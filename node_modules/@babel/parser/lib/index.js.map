{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/tokenizer/state.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\nimport type { TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  privateName: new TokenType(\"#name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\", { beforeExpr }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment> | void) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const value = stmt.expression.value;\n      const directive = super.stmtToDirective(stmt);\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseMaybePrivateName(...args: [boolean]): any {\n      const node = super.parseMaybePrivateName(...args);\n      if (\n        node.type === \"PrivateName\" &&\n        this.getPluginOption(\"estree\", \"classFeatures\")\n      ) {\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n      return node;\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used to track whether the apostrophe \"`\"\n// starts or ends a string template\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true),\n};\n\n// Token-specific context update code\n// Note that we should avoid accessing `this.prodParam` in context update,\n// because it is executed immediately when last token is consumed, which may be\n// before `this.prodParam` is updated. e.g.\n// ```\n// function *g() { () => yield / 2 }\n// ```\n// When `=>` is eaten, the context update of `yield` is executed, however,\n// `this.prodParam` still has `[Yield]` production because it is not yet updated\n\ntt.braceR.updateContext = context => {\n  context.pop();\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\n// ideally only dollarBraceL \"${\" needs a non-template context\n// in order to indicate that the last \"`\" in `${`\" starts a new string template\n// inside a template element within outer string template.\n// but when we popped such context in `}`, we lost track of whether this\n// `}` matches a `${` or other tokens matching `}`, so we have to push\n// such context in every token that `}` will match.\ntt.braceL.updateContext =\n  tt.braceHashL.updateContext =\n  tt.dollarBraceL.updateContext =\n    context => {\n      context.push(types.brace);\n    };\n\ntt.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport { types as tt, type TokenType } from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    OptionalBindingPattern:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: { type: TokenType, value: any }): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (this.state.maybeInArrowParameters) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          if (result.error) {\n            /*:: invariant(refExpressionErrors != null) */\n            super.setOptionalParametersError(refExpressionErrors, result.error);\n          }\n\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentIsString = this.match(tt.string);\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdentIsString) {\n          /*:: invariant(firstIdent instanceof N.StringLiteral) */\n          throw this.raise(\n            specifier.start,\n            Errors.ImportBindingIsString,\n            firstIdent.value,\n          );\n        }\n        /*:: invariant(firstIdent instanceof N.Node) */\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const curContext = context[context.length - 1];\n        if (curContext === tc.j_oTag) {\n          context.length -= 2;\n        } else if (curContext === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {}: any);\n          if (\n            arrowExpression.type !== \"ArrowFunctionExpression\" &&\n            arrowExpression.extra?.parenthesized\n          ) {\n            abort();\n          }\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false\n        ? false\n        : options.strictMode === true\n        ? true\n        : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport type { LookaheadState } from \"../../tokenizer/state\";\nimport State from \"../../tokenizer/state\";\n\ntype JSXLookaheadState = LookaheadState & { inPropertyName: boolean };\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\");\ntc.j_cTag = new TokContext(\"</tag\");\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = context => {\n  context.push(\n    tc.j_expr, // treat as beginning of JSX expression\n    tc.j_oTag, // start opening tag context\n  );\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    createLookaheadState(state: State): JSXLookaheadState {\n      const lookaheadState = ((super.createLookaheadState(\n        state,\n      ): any): JSXLookaheadState);\n      lookaheadState.inPropertyName = state.inPropertyName;\n      return lookaheadState;\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      super.updateContext(prevType);\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.exprAllowed = false;\n      } else if (type === tt.jsxTagEnd) {\n        const out = context.pop();\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.exprAllowed = context[context.length - 1] === tc.j_expr;\n        } else {\n          this.state.exprAllowed = true;\n        }\n      } else if (\n        type.keyword &&\n        (prevType === tt.dot || prevType === tt.questionDot)\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        this.state.exprAllowed = type.beforeExpr;\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.isRelational(\"<\")) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript interface declaration\",\n        BIND_TS_INTERFACE,\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = false;\n              }\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const invalidModifersForStaticBlocks = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n      ];\n      this.tsParseModifiers(\n        member,\n        invalidModifersForStaticBlocks.concat([\"static\"]),\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        const isStatic = !!member.static;\n        if (isStatic && this.eat(tt.braceL)) {\n          if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\"\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext === ct.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const value = this.input.slice(start + 2, end);\n    const comment = {\n      type: \"CommentBlock\",\n      value: value,\n      start: start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word) || tt.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  // the prevType is required by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {\n    this.state.type.updateContext?.(this.state.context);\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, template?: ErrorTemplate): void {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.end, this.nextTokenStart()),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    if (!andThrow) {\n      return (\n        shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n      );\n    }\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? this.state.type.startsExpr\n        : this.state.type.startsExpr && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(\n          startPos,\n          this.hasPlugin(\"topLevelAwait\")\n            ? Errors.AwaitNotInAsyncContext\n            : Errors.AwaitNotInAsyncFunction,\n        );\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName =\n      !computed && this.match(tt.privateName) && this.state.value;\n    const property = computed\n      ? this.parseExpression()\n      : privateName\n      ? this.parsePrivateName()\n      : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    setInnerComments(node, call.innerComments);\n    // mark trailing comments of `async` to be inner comments\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        if (\n          this.isContextual(\"module\") &&\n          this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n          !this.hasFollowingLineBreak()\n        ) {\n          return this.parseModuleExpression();\n        }\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            this.resetPreviousNodeTrailingComments(id);\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            // If the next token begins with \"=\", commit to parsing an async\n            // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n            // expensive full-token lookahead on this common path.)\n            if (this.lookaheadCharCode() === charCodes.equalsTo) {\n              // although `id` is not used in async arrow unary function,\n              // we don't need to reset `async`'s trailing comments because\n              // it will be attached to the upcoming async arrow binding identifier\n              return this.parseAsyncArrowUnaryFunction(\n                this.startNodeAtNode(id),\n              );\n            } else {\n              // Otherwise, treat \"async\" as an identifier and let calling code\n              // deal with the current tt.name token.\n              return id;\n            }\n          } else if (this.match(tt._do)) {\n            this.resetPreviousNodeTrailingComments(id);\n            return this.parseDo(this.startNodeAtNode(id), true);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const start = this.state.start;\n        const value = this.state.value;\n        node = this.parsePrivateName();\n        if (this.match(tt._in)) {\n          this.expectPlugin(\"privateIn\");\n          this.classScope.usePrivateName(value, node.start);\n        } else if (this.hasPlugin(\"privateIn\")) {\n          this.raise(this.state.start, Errors.PrivateInExpectedIn, value);\n        } else {\n          throw this.unexpected(start);\n        }\n        return node;\n      }\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, Errors.UnexpectedPrivateField);\n      }\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      const type = this.state.type;\n      (prop: $FlowFixMe).key =\n        type === tt.num ||\n        type === tt.string ||\n        type === tt.bigint ||\n        type === tt.decimal\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, Errors.PipelineTopicUnused);\n      }\n      bodyNode.expression = childExpression;\n    }\n    return this.finishNode(\n      bodyNode,\n      isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\",\n    );\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position } from \"../util/location\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tt.privateName to tt.hash + tt.name for backward Babel 7 compat.\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens) {\n  if (!process.env.BABEL_8_BREAKING) {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (token.type === tt.privateName) {\n        const { loc, start, value, end } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(\n          i,\n          1,\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: tt.hash,\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc,\n          }),\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: tt.name,\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end,\n          }),\n        );\n      }\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      const matched = keywordRelationalOperator.exec(this.input);\n      if (matched !== null) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(next + matched[0].length);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithUnescapedName =\n      this.match(tt.name) && !this.state.containsEsc;\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithUnescapedName &&\n        init.type === \"Identifier\" &&\n        init.name === \"async\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual = this.match(tt.name) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName && value === \"constructor\") {\n      this.raise(start, Errors.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseModuleExportName()\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    const importedIsString = this.match(tt.string);\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","slashAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","ErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","value","bigInt","BigInt","String","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","preserveSpace","brace","tt","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloPos","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","out","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","maybeInArrowParameters","result","tryParse","setOptionalParametersError","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","stack","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","getTokenFromCode","finishOp","isBinding","last","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","curContext","tc","j_oTag","j_expr","abort","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","State","curLine","potentialArrowAt","inPipeline","inPropertyName","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","ct","exprAllowed","containsEsc","strictErrors","tokensLength","strictMode","sourceType","startLine","curPosition","skipArrays","Array","isArray","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","createLookaheadState","lookaheadState","prevType","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","isLiteralPropertyName","hasPrecedingLineBreak","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","isLineTerminator","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","some","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","typeCast","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","p","join","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","ranges","tokens","createParenthesizedExpressions","getOptions","opts","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","codePointAtPos","cp","trail","setStrict","clear","skipSpace","readTmplToken","skipLineComment","startSkip","spaceStart","loop","CommentWhitespace","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","nextCh","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","lookaheadCh","codePointAt","isPrivate","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","matched","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":";;;;AAwBA,MAAMA,UAAU,GAAG,IAAnB;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAG,IAAhB;AAcO,MAAMC,SAAN,CAAgB;AAarBC,EAAAA,WAAW,CAACC,KAAD,EAAgBC,IAAkB,GAAG,EAArC,EAAyC;AAAA,SAZpDD,KAYoD;AAAA,SAXpDE,OAWoD;AAAA,SAVpDV,UAUoD;AAAA,SATpDC,UASoD;AAAA,SARpDU,gBAQoD;AAAA,SAPpDT,MAOoD;AAAA,SANpDC,QAMoD;AAAA,SALpDC,MAKoD;AAAA,SAJpDC,OAIoD;AAAA,SAHpDO,KAGoD;AAAA,SAFpDC,aAEoD;AAClD,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKE,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,SAAKV,UAAL,GAAkB,CAAC,CAACS,IAAI,CAACT,UAAzB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAACQ,IAAI,CAACR,UAAzB;AACA,SAAKU,gBAAL,GAAwB,CAAC,CAACF,IAAI,CAACE,gBAA/B;AACA,SAAKT,MAAL,GAAc,CAAC,CAACO,IAAI,CAACP,MAArB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAACM,IAAI,CAACN,QAAvB;AACA,SAAKC,MAAL,GAAc,CAAC,CAACK,IAAI,CAACL,MAArB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACI,IAAI,CAACJ,OAAtB;AACA,SAAKO,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,IAAd,GAAqBH,IAAI,CAACG,KAA1B,GAAkC,IAA/C;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAzBoB;AA4BhB,MAAMC,UAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEP,SAASC,aAAT,CAAuBC,IAAvB,EAAqCC,OAAqB,GAAG,EAA7D,EAA4E;AAC1EA,EAAAA,OAAO,CAACR,OAAR,GAAkBO,IAAlB;AACA,QAAME,KAAK,GAAG,IAAIb,SAAJ,CAAcW,IAAd,EAAoBC,OAApB,CAAd;AACAJ,EAAAA,UAAQ,CAACM,GAAT,CAAaH,IAAb,EAAmBE,KAAnB;AACA,SAAOA,KAAP;AACD;;AAED,SAASE,WAAT,CAAqBJ,IAArB,EAAmCL,KAAnC,EAAkD;AAChD,SAAO,IAAIN,SAAJ,CAAcW,IAAd,EAAoB;AAAEjB,IAAAA,UAAF;AAAcY,IAAAA;AAAd,GAApB,CAAP;AACD;;MAEYU,OAAoC,GAAG;AAClDC,EAAAA,GAAG,EAAE,IAAIjB,SAAJ,CAAc,KAAd,EAAqB;AAAEL,IAAAA;AAAF,GAArB,CAD6C;AAElDuB,EAAAA,MAAM,EAAE,IAAIlB,SAAJ,CAAc,QAAd,EAAwB;AAAEL,IAAAA;AAAF,GAAxB,CAF0C;AAGlDwB,EAAAA,OAAO,EAAE,IAAInB,SAAJ,CAAc,SAAd,EAAyB;AAAEL,IAAAA;AAAF,GAAzB,CAHyC;AAIlDyB,EAAAA,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwB;AAAEL,IAAAA;AAAF,GAAxB,CAJ0C;AAKlD0B,EAAAA,MAAM,EAAE,IAAIrB,SAAJ,CAAc,QAAd,EAAwB;AAAEL,IAAAA;AAAF,GAAxB,CAL0C;AAMlDgB,EAAAA,IAAI,EAAE,IAAIX,SAAJ,CAAc,MAAd,EAAsB;AAAEL,IAAAA;AAAF,GAAtB,CAN4C;AAOlD2B,EAAAA,WAAW,EAAE,IAAItB,SAAJ,CAAc,OAAd,EAAuB;AAAEL,IAAAA;AAAF,GAAvB,CAPqC;AAQlD4B,EAAAA,GAAG,EAAE,IAAIvB,SAAJ,CAAc,KAAd,CAR6C;AAWlDwB,EAAAA,QAAQ,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAnB,CAXwC;AAYlD8B,EAAAA,YAAY,EAAE,IAAIzB,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAApB,CAZoC;AAalD+B,EAAAA,WAAW,EAAE,IAAI1B,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAApB,CAbqC;AAclDgC,EAAAA,QAAQ,EAAE,IAAI3B,SAAJ,CAAc,GAAd,CAdwC;AAelD4B,EAAAA,WAAW,EAAE,IAAI5B,SAAJ,CAAc,IAAd,CAfqC;AAgBlD6B,EAAAA,MAAM,EAAE,IAAI7B,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAnB,CAhB0C;AAiBlDmC,EAAAA,SAAS,EAAE,IAAI9B,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAApB,CAjBuC;AAkBlDoC,EAAAA,UAAU,EAAE,IAAI/B,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAApB,CAlBsC;AAmBlDqC,EAAAA,MAAM,EAAE,IAAIhC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA;AAAF,GAAnB,CAnB0C;AAoBlDuC,EAAAA,SAAS,EAAE,IAAIjC,SAAJ,CAAc,IAAd,CApBuC;AAqBlDkC,EAAAA,MAAM,EAAE,IAAIlC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAnB,CArB0C;AAsBlDwC,EAAAA,MAAM,EAAE,IAAInC,SAAJ,CAAc,GAAd,CAtB0C;AAuBlDoC,EAAAA,KAAK,EAAE,IAAIpC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA;AAAF,GAAnB,CAvB2C;AAwBlD2C,EAAAA,IAAI,EAAE,IAAIrC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA;AAAF,GAAnB,CAxB4C;AAyBlD4C,EAAAA,KAAK,EAAE,IAAItC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA;AAAF,GAAnB,CAzB2C;AA0BlD6C,EAAAA,WAAW,EAAE,IAAIvC,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA;AAAF,GAApB,CA1BqC;AA2BlD8C,EAAAA,GAAG,EAAE,IAAIxC,SAAJ,CAAc,GAAd,CA3B6C;AA4BlDyC,EAAAA,QAAQ,EAAE,IAAIzC,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA;AAAF,GAAnB,CA5BwC;AA6BlDgD,EAAAA,WAAW,EAAE,IAAI1C,SAAJ,CAAc,IAAd,CA7BqC;AA8BlD2C,EAAAA,KAAK,EAAE,IAAI3C,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA;AAAF,GAApB,CA9B2C;AA+BlDkD,EAAAA,QAAQ,EAAE,IAAI5C,SAAJ,CAAc,UAAd,CA/BwC;AAgClD6C,EAAAA,QAAQ,EAAE,IAAI7C,SAAJ,CAAc,KAAd,EAAqB;AAAEN,IAAAA;AAAF,GAArB,CAhCwC;AAiClDoD,EAAAA,SAAS,EAAE,IAAI9C,SAAJ,CAAc,GAAd,EAAmB;AAAEL,IAAAA;AAAF,GAAnB,CAjCuC;AAkClDoD,EAAAA,YAAY,EAAE,IAAI/C,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAApB,CAlCoC;AAmClDqD,EAAAA,EAAE,EAAE,IAAIhD,SAAJ,CAAc,GAAd,CAnC8C;AAoClDiD,EAAAA,IAAI,EAAE,IAAIjD,SAAJ,CAAc,GAAd,EAAmB;AAAEL,IAAAA;AAAF,GAAnB,CApC4C;AAuClDuD,EAAAA,oBAAoB,EAAE,IAAIlD,SAAJ,CAAc,OAAd,CAvC4B;AAuDlDmD,EAAAA,EAAE,EAAE,IAAInD,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcG,IAAAA;AAAd,GAAnB,CAvD8C;AAwDlDuD,EAAAA,MAAM,EAAE,IAAIpD,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcG,IAAAA;AAAd,GAApB,CAxD0C;AAyDlDwD,EAAAA,WAAW,EAAE,IAAIrD,SAAJ,CAAc,IAAd,EAAoB;AAAEN,IAAAA,UAAF;AAAcG,IAAAA;AAAd,GAApB,CAzDqC;AA0DlDyD,EAAAA,MAAM,EAAE,IAAItD,SAAJ,CAAc,OAAd,EAAuB;AAAEF,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBJ,IAAAA;AAAnB,GAAvB,CA1D0C;AA2DlD4D,EAAAA,IAAI,EAAE,IAAIvD,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAnB,CA3D4C;AA4DlD6D,EAAAA,KAAK,EAAE,IAAIxD,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAnB,CA5D2C;AA6DlD8D,EAAAA,QAAQ,EAAE1C,WAAW,CAAC,IAAD,EAAO,CAAP,CA7D6B;AA8DlD2C,EAAAA,iBAAiB,EAAE3C,WAAW,CAAC,IAAD,EAAO,CAAP,CA9DoB;AA+DlD4C,EAAAA,SAAS,EAAE5C,WAAW,CAAC,IAAD,EAAO,CAAP,CA/D4B;AAgElD6C,EAAAA,UAAU,EAAE7C,WAAW,CAAC,IAAD,EAAO,CAAP,CAhE2B;AAiElD8C,EAAAA,SAAS,EAAE9C,WAAW,CAAC,GAAD,EAAM,CAAN,CAjE4B;AAkElD+C,EAAAA,UAAU,EAAE/C,WAAW,CAAC,GAAD,EAAM,CAAN,CAlE2B;AAmElDgD,EAAAA,UAAU,EAAEhD,WAAW,CAAC,GAAD,EAAM,CAAN,CAnE2B;AAoElDiD,EAAAA,QAAQ,EAAEjD,WAAW,CAAC,eAAD,EAAkB,CAAlB,CApE6B;AAqElDkD,EAAAA,UAAU,EAAElD,WAAW,CAAC,WAAD,EAAc,CAAd,CArE2B;AAsElDmD,EAAAA,QAAQ,EAAEnD,WAAW,CAAC,WAAD,EAAc,CAAd,CAtE6B;AAuElDoD,EAAAA,OAAO,EAAE,IAAInE,SAAJ,CAAc,KAAd,EAAqB;AAAEN,IAAAA,UAAF;AAAcY,IAAAA,KAAK,EAAE,CAArB;AAAwBR,IAAAA,MAAxB;AAAgCH,IAAAA;AAAhC,GAArB,CAvEyC;AAyElDyE,EAAAA,MAAM,EAAE,IAAIpE,SAAJ,CAAc,GAAd,EAAmB;AAAEN,IAAAA,UAAF;AAAcY,IAAAA,KAAK,EAAE,EAArB;AAAyBX,IAAAA;AAAzB,GAAnB,CAzE0C;AA2ElD0E,EAAAA,IAAI,EAAE,IAAIrE,SAAJ,CAAc,GAAd,EAAmB;AAAEM,IAAAA,KAAK,EAAE;AAAT,GAAnB,CA3E4C;AA4ElDgE,EAAAA,KAAK,EAAEvD,WAAW,CAAC,GAAD,EAAM,EAAN,CA5EgC;AA6ElDwD,EAAAA,QAAQ,EAAE,IAAIvE,SAAJ,CAAc,IAAd,EAAoB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,EAFqB;AAG5BD,IAAAA,gBAAgB,EAAE;AAHU,GAApB,CA7EwC;AAsFlDmE,EAAAA,MAAM,EAAE9D,aAAa,CAAC,OAAD,CAtF6B;AAuFlD+D,EAAAA,KAAK,EAAE/D,aAAa,CAAC,MAAD,EAAS;AAAEhB,IAAAA;AAAF,GAAT,CAvF8B;AAwFlDgF,EAAAA,MAAM,EAAEhE,aAAa,CAAC,OAAD,CAxF6B;AAyFlDiE,EAAAA,SAAS,EAAEjE,aAAa,CAAC,UAAD,CAzF0B;AA0FlDkE,EAAAA,SAAS,EAAElE,aAAa,CAAC,UAAD,CA1F0B;AA2FlDmE,EAAAA,QAAQ,EAAEnE,aAAa,CAAC,SAAD,EAAY;AAAEhB,IAAAA;AAAF,GAAZ,CA3F2B;AA4FlDoF,EAAAA,GAAG,EAAEpE,aAAa,CAAC,IAAD,EAAO;AAAEd,IAAAA,MAAF;AAAUF,IAAAA;AAAV,GAAP,CA5FgC;AA6FlDqF,EAAAA,KAAK,EAAErE,aAAa,CAAC,MAAD,EAAS;AAAEhB,IAAAA;AAAF,GAAT,CA7F8B;AA8FlDsF,EAAAA,QAAQ,EAAEtE,aAAa,CAAC,SAAD,CA9F2B;AA+FlDuE,EAAAA,IAAI,EAAEvE,aAAa,CAAC,KAAD,EAAQ;AAAEd,IAAAA;AAAF,GAAR,CA/F+B;AAgGlDsF,EAAAA,SAAS,EAAExE,aAAa,CAAC,UAAD,EAAa;AAAEf,IAAAA;AAAF,GAAb,CAhG0B;AAiGlDwF,EAAAA,GAAG,EAAEzE,aAAa,CAAC,IAAD,CAjGgC;AAkGlD0E,EAAAA,OAAO,EAAE1E,aAAa,CAAC,QAAD,EAAW;AAAEhB,IAAAA;AAAF,GAAX,CAlG4B;AAmGlD2F,EAAAA,OAAO,EAAE3E,aAAa,CAAC,QAAD,CAnG4B;AAoGlD4E,EAAAA,MAAM,EAAE5E,aAAa,CAAC,OAAD,EAAU;AAAEhB,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAV,CApG6B;AAqGlD4F,EAAAA,IAAI,EAAE7E,aAAa,CAAC,KAAD,CArG+B;AAsGlD8E,EAAAA,IAAI,EAAE9E,aAAa,CAAC,KAAD,CAtG+B;AAuGlD+E,EAAAA,MAAM,EAAE/E,aAAa,CAAC,OAAD,CAvG6B;AAwGlDgF,EAAAA,MAAM,EAAEhF,aAAa,CAAC,OAAD,EAAU;AAAEd,IAAAA;AAAF,GAAV,CAxG6B;AAyGlD+F,EAAAA,KAAK,EAAEjF,aAAa,CAAC,MAAD,CAzG8B;AA0GlDkF,EAAAA,IAAI,EAAElF,aAAa,CAAC,KAAD,EAAQ;AAAEhB,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAR,CA1G+B;AA2GlDkG,EAAAA,KAAK,EAAEnF,aAAa,CAAC,MAAD,EAAS;AAAEf,IAAAA;AAAF,GAAT,CA3G8B;AA4GlDmG,EAAAA,MAAM,EAAEpF,aAAa,CAAC,OAAD,EAAU;AAAEf,IAAAA;AAAF,GAAV,CA5G6B;AA6GlDoG,EAAAA,MAAM,EAAErF,aAAa,CAAC,OAAD,EAAU;AAAEf,IAAAA;AAAF,GAAV,CA7G6B;AA8GlDqG,EAAAA,QAAQ,EAAEtF,aAAa,CAAC,SAAD,EAAY;AAAEhB,IAAAA;AAAF,GAAZ,CA9G2B;AA+GlDuG,EAAAA,OAAO,EAAEvF,aAAa,CAAC,QAAD,CA/G4B;AAgHlDwF,EAAAA,OAAO,EAAExF,aAAa,CAAC,QAAD,EAAW;AAAEf,IAAAA;AAAF,GAAX,CAhH4B;AAiHlDwG,EAAAA,KAAK,EAAEzF,aAAa,CAAC,MAAD,EAAS;AAAEf,IAAAA;AAAF,GAAT,CAjH8B;AAkHlDyG,EAAAA,KAAK,EAAE1F,aAAa,CAAC,MAAD,EAAS;AAAEf,IAAAA;AAAF,GAAT,CAlH8B;AAmHlD0G,EAAAA,MAAM,EAAE3F,aAAa,CAAC,OAAD,EAAU;AAAEf,IAAAA;AAAF,GAAV,CAnH6B;AAoHlD2G,EAAAA,GAAG,EAAE5F,aAAa,CAAC,IAAD,EAAO;AAAEhB,IAAAA,UAAF;AAAcY,IAAAA,KAAK,EAAE;AAArB,GAAP,CApHgC;AAqHlDiG,EAAAA,WAAW,EAAE7F,aAAa,CAAC,YAAD,EAAe;AAAEhB,IAAAA,UAAF;AAAcY,IAAAA,KAAK,EAAE;AAArB,GAAf,CArHwB;AAsHlDkG,EAAAA,OAAO,EAAE9F,aAAa,CAAC,QAAD,EAAW;AAAEhB,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAX,CAtH4B;AAuHlD8G,EAAAA,KAAK,EAAE/F,aAAa,CAAC,MAAD,EAAS;AAAEhB,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAT,CAvH8B;AAwHlD+G,EAAAA,OAAO,EAAEhG,aAAa,CAAC,QAAD,EAAW;AAAEhB,IAAAA,UAAF;AAAcI,IAAAA,MAAd;AAAsBH,IAAAA;AAAtB,GAAX;AAxH4B;;AC9E7C,MAAMgH,SAAS,GAAG,wBAAlB;AACA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAWF,SAAS,CAACG,MAArB,EAA6B,GAA7B,CAAnB;AAGA,SAASC,SAAT,CAAmBC,IAAnB,EAA0C;AAC/C,UAAQA,IAAR;AACE;AACA;AACA;AACA;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AARJ;AAUD;AAEM,MAAMC,cAAc,GAAG,+BAAvB;AAGA,SAASC,YAAT,CAAsBF,IAAtB,EAA6C;AAClD,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA;AACA;AACA;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AAzBJ;AA2BD;;AC3CM,MAAMG,QAAN,CAAe;AAIpBlH,EAAAA,WAAW,CAACmH,IAAD,EAAeC,GAAf,EAA4B;AAAA,SAHvCD,IAGuC;AAAA,SAFvCE,MAEuC;AACrC,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAcD,GAAd;AACD;;AAPmB;AAUf,MAAME,cAAN,CAAqB;AAM1BtH,EAAAA,WAAW,CAACuH,KAAD,EAAkBC,GAAlB,EAAkC;AAAA,SAL7CD,KAK6C;AAAA,SAJ7CC,GAI6C;AAAA,SAH7CC,QAG6C;AAAA,SAF7CC,cAE6C;AAC3C,SAAKH,KAAL,GAAaA,KAAb;AAEA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AAVyB;AAmBrB,SAASG,WAAT,CAAqBC,KAArB,EAAoCC,MAApC,EAA8D;AACnE,MAAIV,IAAI,GAAG,CAAX;AACA,MAAIW,SAAS,GAAG,CAAhB;AACA,MAAIC,KAAJ;AACApB,EAAAA,UAAU,CAACqB,SAAX,GAAuB,CAAvB;;AACA,SAAO,CAACD,KAAK,GAAGpB,UAAU,CAACsB,IAAX,CAAgBL,KAAhB,CAAT,KAAoCG,KAAK,CAACG,KAAN,GAAcL,MAAzD,EAAiE;AAC/DV,IAAAA,IAAI;AACJW,IAAAA,SAAS,GAAGnB,UAAU,CAACqB,SAAvB;AACD;;AAED,SAAO,IAAId,QAAJ,CAAaC,IAAb,EAAmBU,MAAM,GAAGC,SAA5B,CAAP;AACD;;ACzCc,MAAMK,UAAN,CAAiB;AAAA;AAAA,SAa9BC,iBAb8B,GAaD,KAbC;AAAA,SAc9BC,2BAd8B,GAcS,KAdT;AAAA;;AAuB9BC,EAAAA,SAAS,CAAC5H,IAAD,EAAwB;AAC/B,WAAO,KAAK6H,OAAL,CAAaC,GAAb,CAAiB9H,IAAjB,CAAP;AACD;;AAED+H,EAAAA,eAAe,CAACC,MAAD,EAAiBhI,IAAjB,EAA+B;AAE5C,QAAI,KAAK4H,SAAL,CAAeI,MAAf,CAAJ,EAA4B,OAAO,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,MAAjB,EAAyBhI,IAAzB,CAAP;AAC7B;;AA9B6B;;AC0BhC,SAASkI,mBAAT,CAA6BC,IAA7B,EAAyCC,QAAzC,EAAmE;AACjE,MAAID,IAAI,CAACE,gBAAL,KAA0BC,SAA9B,EAAyC;AACvCH,IAAAA,IAAI,CAACE,gBAAL,GAAwBD,QAAxB;AACD,GAFD,MAEO;AACLD,IAAAA,IAAI,CAACE,gBAAL,CAAsBE,OAAtB,CAA8B,GAAGH,QAAjC;AACD;AACF;;AAUM,SAASI,gBAAT,CAA0BL,IAA1B,EAAsCC,QAAtC,EAAuE;AAC5E,MAAID,IAAI,CAACM,aAAL,KAAuBH,SAA3B,EAAsC;AACpCH,IAAAA,IAAI,CAACM,aAAL,GAAqBL,QAArB;AACD,GAFD,MAEO,IAAIA,QAAQ,KAAKE,SAAjB,EAA4B;AACjCH,IAAAA,IAAI,CAACM,aAAL,CAAmBF,OAAnB,CAA2B,GAAGH,QAA9B;AACD;AACF;;AAWD,SAASM,mBAAT,CACEP,IADF,EAEEQ,QAFF,EAGEC,SAHF,EAIE;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,CAAC,GAAGH,QAAQ,CAACI,MAAjB;;AACA,SAAOF,WAAW,KAAK,IAAhB,IAAwBC,CAAC,GAAG,CAAnC,EAAsC;AACpCD,IAAAA,WAAW,GAAGF,QAAQ,CAAC,EAAEG,CAAH,CAAtB;AACD;;AACD,MAAID,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAAChC,KAAZ,GAAoB+B,SAAS,CAAC/B,KAA1D,EAAiE;AAC/D2B,IAAAA,gBAAgB,CAACL,IAAD,EAAOS,SAAS,CAACR,QAAjB,CAAhB;AACD,GAFD,MAEO;AACLF,IAAAA,mBAAmB,CAACW,WAAD,EAAcD,SAAS,CAACR,QAAxB,CAAnB;AACD;AACF;;AAGc,MAAMY,cAAN,SAA6BvB,UAA7B,CAAwC;AACrDwB,EAAAA,UAAU,CAACC,OAAD,EAAyB;AACjC,QAAI,KAAKnC,QAAT,EAAmBmC,OAAO,CAACC,GAAR,CAAYpC,QAAZ,GAAuB,KAAKA,QAA5B;AACnB,SAAKqC,KAAL,CAAWhB,QAAX,CAAoBiB,IAApB,CAAyBH,OAAzB;AACD;;AAUDI,EAAAA,cAAc,CAACnB,IAAD,EAAmB;AAC/B,UAAM;AAAEoB,MAAAA;AAAF,QAAmB,KAAKH,KAA9B;AACA,UAAMI,kBAAkB,GAAGD,YAAY,CAACR,MAAxC;AACA,QAAIS,kBAAkB,KAAK,CAA3B,EAA8B;AAC9B,QAAIV,CAAC,GAAGU,kBAAkB,GAAG,CAA7B;AACA,UAAMC,aAAa,GAAGF,YAAY,CAACT,CAAD,CAAlC;;AAEA,QAAIW,aAAa,CAAC5C,KAAd,KAAwBsB,IAAI,CAACrB,GAAjC,EAAsC;AACpC2C,MAAAA,aAAa,CAACC,WAAd,GAA4BvB,IAA5B;AACAW,MAAAA,CAAC;AACF;;AAED,UAAM;AAAEjC,MAAAA,KAAK,EAAE8C;AAAT,QAAuBxB,IAA7B;;AAEA,WAAOW,CAAC,IAAI,CAAZ,EAAeA,CAAC,EAAhB,EAAoB;AAClB,YAAMF,SAAS,GAAGW,YAAY,CAACT,CAAD,CAA9B;AACA,YAAMc,UAAU,GAAGhB,SAAS,CAAC9B,GAA7B;;AACA,UAAI8C,UAAU,GAAGD,SAAjB,EAA4B;AAO1Bf,QAAAA,SAAS,CAACiB,cAAV,GAA2B1B,IAA3B;AACA,aAAK2B,eAAL,CAAqBlB,SAArB;AACAW,QAAAA,YAAY,CAACQ,MAAb,CAAoBjB,CAApB,EAAuB,CAAvB;AACD,OAVD,MAUO;AACL,YAAIc,UAAU,KAAKD,SAAnB,EAA8B;AAC5Bf,UAAAA,SAAS,CAACoB,YAAV,GAAyB7B,IAAzB;AACD;;AAED;AACD;AACF;AACF;;AAQD2B,EAAAA,eAAe,CAAClB,SAAD,EAA+B;AAC5C,UAAM;AAAER,MAAAA;AAAF,QAAeQ,SAArB;;AACA,QAAIA,SAAS,CAACc,WAAV,KAA0B,IAA1B,IAAkCd,SAAS,CAACoB,YAAV,KAA2B,IAAjE,EAAuE;AACrE,UAAIpB,SAAS,CAACc,WAAV,KAA0B,IAA9B,EAAoC;AAClCxB,QAAAA,mBAAmB,CAACU,SAAS,CAACc,WAAX,EAAwBtB,QAAxB,CAAnB;AACD;;AACD,UAAIQ,SAAS,CAACoB,YAAV,KAA2B,IAA/B,EAAqC;AACnCpB,QAAAA,SAAS,CAACoB,YAAV,CAAuBC,eAAvB,GAAyC7B,QAAzC;AACD;AACF,KAPD,MAOO;AAEL,YAAM;AAAEyB,QAAAA,cAAc,EAAE1B,IAAlB;AAAwBtB,QAAAA,KAAK,EAAEqD;AAA/B,UAAgDtB,SAAtD;;AACA,UAAI,KAAK1B,KAAL,CAAWiD,UAAX,CAAsBD,YAAY,GAAG,CAArC,QAAJ,EAAiE;AAI/D,gBAAQ/B,IAAI,CAACiC,IAAb;AACE,eAAK,kBAAL;AACA,eAAK,eAAL;AACA,eAAK,kBAAL;AACE1B,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACkC,UAAZ,EAAwBzB,SAAxB,CAAnB;AACA;;AACF,eAAK,gBAAL;AACA,eAAK,wBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACmC,SAAZ,EAAuB1B,SAAvB,CAAnB;AACA;;AACF,eAAK,qBAAL;AACA,eAAK,oBAAL;AACA,eAAK,yBAAL;AACA,eAAK,cAAL;AACA,eAAK,aAAL;AACA,eAAK,oBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACoC,MAAZ,EAAoB3B,SAApB,CAAnB;AACA;;AACF,eAAK,iBAAL;AACA,eAAK,cAAL;AACA,eAAK,iBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACQ,QAAZ,EAAsBC,SAAtB,CAAnB;AACA;;AACF,eAAK,wBAAL;AACA,eAAK,mBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACqC,UAAZ,EAAwB5B,SAAxB,CAAnB;AACA;;AACF;AAAS;AACPJ,cAAAA,gBAAgB,CAACL,IAAD,EAAOC,QAAP,CAAhB;AACD;AA7BH;AA+BD,OAnCD,MAmCO;AACLI,QAAAA,gBAAgB,CAACL,IAAD,EAAOC,QAAP,CAAhB;AACD;AACF;AACF;;AAUDqC,EAAAA,yBAAyB,GAAG;AAC1B,UAAM;AAAElB,MAAAA;AAAF,QAAmB,KAAKH,KAA9B;;AACA,SAAK,IAAIN,CAAC,GAAGS,YAAY,CAACR,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD,WAAKgB,eAAL,CAAqBP,YAAY,CAACT,CAAD,CAAjC;AACD;;AACD,SAAKM,KAAL,CAAWG,YAAX,GAA0B,EAA1B;AACD;;AAoBDmB,EAAAA,iCAAiC,CAACvC,IAAD,EAAa;AAC5C,UAAM;AAAEoB,MAAAA;AAAF,QAAmB,KAAKH,KAA9B;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAaQ,YAAnB;AACA,QAAIR,MAAM,KAAK,CAAf,EAAkB;AAClB,UAAMH,SAAS,GAAGW,YAAY,CAACR,MAAM,GAAG,CAAV,CAA9B;;AACA,QAAIH,SAAS,CAACc,WAAV,KAA0BvB,IAA9B,EAAoC;AAClCS,MAAAA,SAAS,CAACc,WAAV,GAAwB,IAAxB;AACD;AACF;;AAxJoD;;ACrFhD,MAAMiB,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc;AACtCC,EAAAA,WAAW,EAAE,2BADyB;AAEtCC,EAAAA,qBAAqB,EAAE;AAFe,CAAd,CAAnB;;ACSA,MAAMC,aAAa,GAAGC,kBAAkB,CAC7C;AACEC,EAAAA,mBAAmB,EAAE,gCADvB;AAEEC,EAAAA,gBAAgB,EACd,6DAHJ;AAIEC,EAAAA,qCAAqC,EACnC,0EALJ;AAMEC,EAAAA,sBAAsB,EACpB,6DAPJ;AAQEC,EAAAA,mCAAmC,EACjC,0DATJ;AAUEC,EAAAA,8BAA8B,EAC5B,sDAXJ;AAYEC,EAAAA,sBAAsB,EACpB,kFAbJ;AAcEC,EAAAA,uBAAuB,EAAE,iDAd3B;AAeEC,EAAAA,cAAc,EAAE,sDAflB;AAgBEC,EAAAA,cAAc,EAAE,yDAhBlB;AAiBEC,EAAAA,sBAAsB,EACpB,iEAlBJ;AAmBEC,EAAAA,qBAAqB,EAAE,mDAnBzB;AAoBEC,EAAAA,4BAA4B,EAC1B,4DArBJ;AAsBEC,EAAAA,qBAAqB,EAAE,2CAtBzB;AAuBEC,EAAAA,kBAAkB,EAAE,yCAvBtB;AAwBEC,EAAAA,sBAAsB,EAAE,mCAxB1B;AAyBEC,EAAAA,6BAA6B,EAAE,uCAzBjC;AA0BEC,EAAAA,qBAAqB,EACnB,mKA3BJ;AA4BEC,EAAAA,oBAAoB,EAClB,iFA7BJ;AA8BEC,EAAAA,oBAAoB,EAClB,kHA/BJ;AAgCEC,EAAAA,kBAAkB,EAAE,iDAhCtB;AAiCEC,EAAAA,oBAAoB,EAAE,+CAjCxB;AAkCEC,EAAAA,kBAAkB,EAAE,0CAlCtB;AAmCEC,EAAAA,sBAAsB,EACpB,oGApCJ;AAqCEC,EAAAA,oBAAoB,EAAE,0CArCxB;AAsCEC,EAAAA,sBAAsB,EAAE,6CAtC1B;AAuCEC,EAAAA,eAAe,EACb,sEAxCJ;AAyCEC,EAAAA,cAAc,EAAE,qCAzClB;AA0CEC,EAAAA,oBAAoB,EAAE,oCA1CxB;AA2CEC,EAAAA,gBAAgB,EAAE,oCA3CpB;AA4CEC,EAAAA,0BAA0B,EAAE,yBA5C9B;AA6CEC,EAAAA,qBAAqB,EACnB,sIA9CJ;AA+CEC,EAAAA,6BAA6B,EAC3B,gEAhDJ;AAiDEC,EAAAA,sBAAsB,EACpB,6DAlDJ;AAmDEC,EAAAA,UAAU,EAAE,yDAnDd;AAoDEC,EAAAA,QAAQ,EAAE,+DApDZ;AAqDEC,EAAAA,iCAAiC,EAC/B,qEAtDJ;AAuDEC,EAAAA,oBAAoB,EAAE,iBAvDxB;AAwDEC,EAAAA,4BAA4B,EAC1B,4EAzDJ;AA0DEC,EAAAA,aAAa,EAAE,+BA1DjB;AA2DEC,EAAAA,qBAAqB,EACnB,mGA5DJ;AA6DEC,EAAAA,+BAA+B,EAC7B,4DA9DJ;AA+DEC,EAAAA,eAAe,EAAE,iCA/DnB;AAgEEC,EAAAA,0BAA0B,EAAE,kCAhE9B;AAiEEC,EAAAA,wBAAwB,EAAE,qCAjE5B;AAkEEC,EAAAA,oBAAoB,EAAE,wBAlExB;AAmEEC,EAAAA,gBAAgB,EAAE,2BAnEpB;AAoEEC,EAAAA,cAAc,EAAE,kBApElB;AAqEEC,EAAAA,YAAY,EAAE,8BArEhB;AAsEEC,EAAAA,qBAAqB,EAAE,gCAtEzB;AAuEEC,EAAAA,6BAA6B,EAAE,sCAvEjC;AAwEEC,EAAAA,0BAA0B,EAAE,gCAxE9B;AAyEEC,EAAAA,iBAAiB,EAAE,wBAzErB;AA0EEC,EAAAA,UAAU,EAAE,+BA1Ed;AA2EEC,EAAAA,iBAAiB,EAAE,uCA3ErB;AA4EEC,EAAAA,aAAa,EAAE,iBA5EjB;AA6EEC,EAAAA,wBAAwB,EACtB,gEA9EJ;AA+EEC,EAAAA,wBAAwB,EAAE,4BA/E5B;AAgFEC,EAAAA,8BAA8B,EAAE,2CAhFlC;AAiFEC,EAAAA,6BAA6B,EAAE,kCAjFjC;AAkFEC,EAAAA,6BAA6B,EAAE,4BAlFjC;AAmFEC,EAAAA,qBAAqB,EACnB,wEApFJ;AAqFEC,EAAAA,4BAA4B,EAAE,mCArFhC;AAsFEC,EAAAA,kBAAkB,EAAE,iCAtFtB;AAuFEC,EAAAA,mBAAmB,EACjB,6EAxFJ;AAyFEC,EAAAA,yBAAyB,EAAE,uCAzF7B;AA0FEC,EAAAA,oBAAoB,EAAE,kCA1FxB;AA2FEC,EAAAA,gBAAgB,EAAE,2BA3FpB;AA4FEC,EAAAA,qBAAqB,EACnB,6DA7FJ;AA8FEC,EAAAA,gBAAgB,EAAE,oBA9FpB;AA+FEC,EAAAA,oBAAoB,EAAE,4CA/FxB;AAgGEC,EAAAA,yBAAyB,EACvB,qFAjGJ;AAkGEC,EAAAA,gCAAgC,EAC9B,+CAnGJ;AAoGEC,EAAAA,2BAA2B,EACzB,8DArGJ;AAsGEC,EAAAA,iCAAiC,EAC/B,yDAvGJ;AAwGEC,EAAAA,gCAAgC,EAC9B,gEAzGJ;AA0GEC,EAAAA,qBAAqB,EAAE,6BA1GzB;AA2GEC,EAAAA,wBAAwB,EAAE,2BA3G5B;AA4GEC,EAAAA,iBAAiB,EAAE,8BA5GrB;AA6GEC,EAAAA,gBAAgB,EAAE,kCA7GpB;AA8GEC,EAAAA,gBAAgB,EAAE,mCA9GpB;AA+GEC,EAAAA,gCAAgC,EAC9B,6FAhHJ;AAiHEC,EAAAA,iBAAiB,EACf,yFAlHJ;AAmHEC,EAAAA,qBAAqB,EACnB,0DApHJ;AAqHEC,EAAAA,0BAA0B,EACxB,4DAtHJ;AAuHEC,EAAAA,qBAAqB,EACnB,iEAxHJ;AAyHEC,EAAAA,SAAS,EAAE,sBAzHb;AA0HEC,EAAAA,kBAAkB,EAAE,gDA1HtB;AA2HEC,EAAAA,gBAAgB,EAAE,uCA3HpB;AA4HEC,EAAAA,mBAAmB,EACjB,mGA7HJ;AA8HEC,EAAAA,8BAA8B,EAC5B,iEA/HJ;AAgIEC,EAAAA,8BAA8B,EAC5B,oEAjIJ;AAkIEC,EAAAA,mBAAmB,EACjB,8DAnIJ;AAoIEC,EAAAA,sBAAsB,EACpB,sEArIJ;AAsIEC,EAAAA,iCAAiC,EAC/B,8FAvIJ;AAwIEC,EAAAA,mBAAmB,EACjB,wGAzIJ;AA0IEC,EAAAA,wBAAwB,EAAE,6BA1I5B;AA2IEC,EAAAA,yCAAyC,EACvC,mIA5IJ;AA6IEC,EAAAA,2CAA2C,EACzC,qIA9IJ;AA+IEC,EAAAA,4CAA4C,EAC1C,sIAhJJ;AAiJEC,EAAAA,aAAa,EAAE,mDAjJjB;AAkJEC,EAAAA,iBAAiB,EAAE,+CAlJrB;AAmJEC,EAAAA,cAAc,EACZ,0HApJJ;AAqJEC,EAAAA,eAAe,EAAE,uDArJnB;AAsJEC,EAAAA,YAAY,EAAE,yCAtJhB;AAuJEC,EAAAA,mBAAmB,EAAE,mCAvJvB;AAwJEC,EAAAA,0BAA0B,EAAE,8BAxJ9B;AAyJEC,EAAAA,cAAc,EACZ,qFA1JJ;AA2JEC,EAAAA,mBAAmB,EACjB,wDA5JJ;AA6JEC,EAAAA,kBAAkB,EAAE,uDA7JtB;AA8JEC,EAAAA,UAAU,EAAE,wBA9Jd;AA+JEC,EAAAA,eAAe,EACb,mJAhKJ;AAiKEC,EAAAA,iBAAiB,EAAE,4CAjKrB;AAkKEC,EAAAA,iBAAiB,EAAE,iDAlKrB;AAmKEC,EAAAA,wCAAwC,EACtC,kIApKJ;AAqKEC,EAAAA,0CAA0C,EACxC,oIAtKJ;AAuKEC,EAAAA,2CAA2C,EACzC,qIAxKJ;AAyKEC,EAAAA,6BAA6B,EAAE,kCAzKjC;AA0KEC,EAAAA,gCAAgC,EAC9B,0FA3KJ;AA4KEC,EAAAA,wBAAwB,EAAE,oCA5K5B;AA6KEC,EAAAA,sBAAsB,EACpB,yDA9KJ;AA+KEC,EAAAA,iBAAiB,EAAE,0BA/KrB;AAgLEC,EAAAA,0BAA0B,EACxB,6DAjLJ;AAkLEC,EAAAA,4BAA4B,EAC1B,kEAnLJ;AAoLEC,EAAAA,mBAAmB,EACjB,iEArLJ;AAsLEC,EAAAA,0BAA0B,EACxB,yDAvLJ;AAwLEC,EAAAA,sBAAsB,EACpB,yJAzLJ;AA0LEC,EAAAA,sBAAsB,EAAE,gCA1L1B;AA2LEC,EAAAA,eAAe,EAAE,wDA3LnB;AA4LEC,EAAAA,eAAe,EAAE,wBA5LnB;AA6LEC,EAAAA,kCAAkC,EAChC,kFA9LJ;AA+LEC,EAAAA,eAAe,EAAE,iDA/LnB;AAgMEC,EAAAA,0BAA0B,EACxB,qDAjMJ;AAkMEC,EAAAA,wBAAwB,EACtB,6EAnMJ;AAoMEC,EAAAA,iBAAiB,EACf,2DArMJ;AAsMEC,EAAAA,uBAAuB,EAAE,+CAtM3B;AAuMEC,EAAAA,6BAA6B,EAC3B,mDAxMJ;AAyMEC,EAAAA,4BAA4B,EAC1B,kEA1MJ;AA2MEC,EAAAA,gBAAgB,EACd,uHA5MJ;AA6MEC,EAAAA,mBAAmB,EAAE,uBA7MvB;AA8MEC,EAAAA,kBAAkB,EAAE,kCA9MtB;AA+MEC,EAAAA,kBAAkB,EAAE,+BA/MtB;AAgNEC,EAAAA,oBAAoB,EAAE,wBAhNxB;AAiNEC,EAAAA,gBAAgB,EAAE,4CAjNpB;AAkNEC,EAAAA,sBAAsB,EACpB,uDAnNJ;AAoNEC,EAAAA,gBAAgB,EAAE,uDApNpB;AAqNEC,EAAAA,yBAAyB,EACvB;AAtNJ,CAD6C,EAyNlCzJ,UAAU,CAACG,WAzNuB,CAAxC;AA4NA,MAAMuJ,6BAA6B,GAAGpJ,kBAAkB,CAC7D;AACEqJ,EAAAA,uBAAuB,EAAG,yDAD5B;AAEEC,EAAAA,mBAAmB,EAAG;AAFxB,CAD6D,EAKlD5J,UAAU,CAACI,qBALuC,CAAxD;;ACzMA,SAASE,kBAAT,CACLuJ,QADK,EAILnO,IAJK,EAKW;AAChB,QAAMoO,SAAyB,GAAG,EAAlC;AACA7J,EAAAA,MAAM,CAAC8J,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BC,UAAU,IAAI;AAC1CH,IAAAA,SAAS,CAACG,UAAD,CAAT,GAAwBhK,MAAM,CAACC,MAAP,CAAc;AACpCxE,MAAAA,IADoC;AAEpCuO,MAAAA,UAFoC;AAGpC3S,MAAAA,QAAQ,EAAEuS,QAAQ,CAACI,UAAD;AAHkB,KAAd,CAAxB;AAKD,GAND;AAOA,SAAOhK,MAAM,CAACC,MAAP,CAAc4J,SAAd,CAAP;AACD;AAUc,MAAMI,WAAN,SAA0B7L,cAA1B,CAAyC;AAMtD8L,EAAAA,sBAAsB,CAACC,GAAD,EAAwB;AAC5C,QAAI5L,GAAJ;AACA,QAAI4L,GAAG,KAAK,KAAK3L,KAAL,CAAWvC,KAAvB,EAA8BsC,GAAG,GAAG,KAAKC,KAAL,CAAW4L,QAAjB,CAA9B,KACK,IAAID,GAAG,KAAK,KAAK3L,KAAL,CAAW6L,YAAvB,EAAqC9L,GAAG,GAAG,KAAKC,KAAL,CAAW8L,eAAjB,CAArC,KACA,IAAIH,GAAG,KAAK,KAAK3L,KAAL,CAAWtC,GAAvB,EAA4BqC,GAAG,GAAG,KAAKC,KAAL,CAAW+L,MAAjB,CAA5B,KACA,IAAIJ,GAAG,KAAK,KAAK3L,KAAL,CAAWgM,UAAvB,EAAmCjM,GAAG,GAAG,KAAKC,KAAL,CAAWiM,aAAjB,CAAnC,KACAlM,GAAG,GAAGlC,WAAW,CAAC,KAAKC,KAAN,EAAa6N,GAAb,CAAjB;AAEL,WAAO5L,GAAP;AACD;;AAEDmM,EAAAA,KAAK,CACHP,GADG,EAEH;AAAE1O,IAAAA,IAAF;AAAQuO,IAAAA,UAAR;AAAoB3S,IAAAA;AAApB,GAFG,EAGH,GAAGsI,MAHA,EAIY;AACf,WAAO,KAAKgL,aAAL,CAAmBR,GAAnB,EAAwB;AAAE1O,MAAAA,IAAF;AAAQuO,MAAAA;AAAR,KAAxB,EAA8C3S,QAA9C,EAAwD,GAAGsI,MAA3D,CAAP;AACD;;AAcDiL,EAAAA,cAAc,CACZT,GADY,EAEZ;AAAE1O,IAAAA,IAAF;AAAQpE,IAAAA;AAAR,GAFY,EAGZ,GAAGsI,MAHS,EAIG;AACf,UAAMpB,GAAG,GAAG,KAAK2L,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMU,OAAO,GACXxT,QAAQ,CAACyT,OAAT,CAAiB,SAAjB,EAA4B,CAACC,CAAD,EAAI7M,CAAJ,KAAkByB,MAAM,CAACzB,CAAD,CAApD,IACC,KAAIK,GAAG,CAAC1C,IAAK,IAAG0C,GAAG,CAACxC,MAAO,GAF9B;;AAGA,QAAI,KAAK1G,OAAL,CAAa2V,aAAjB,EAAgC;AAC9B,YAAMC,MAAM,GAAG,KAAKzM,KAAL,CAAWyM,MAA1B;;AACA,WAAK,IAAI/M,CAAC,GAAG+M,MAAM,CAAC9M,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,cAAMgN,KAAK,GAAGD,MAAM,CAAC/M,CAAD,CAApB;;AACA,YAAIgN,KAAK,CAACf,GAAN,KAAcA,GAAlB,EAAuB;AACrB,iBAAOnK,MAAM,CAACnI,MAAP,CAAcqT,KAAd,EAAqB;AAAEL,YAAAA;AAAF,WAArB,CAAP;AACD,SAFD,MAEO,IAAIK,KAAK,CAACf,GAAN,GAAYA,GAAhB,EAAqB;AAC1B;AACD;AACF;AACF;;AACD,WAAO,KAAKgB,MAAL,CAAY;AAAE1P,MAAAA,IAAF;AAAQ8C,MAAAA,GAAR;AAAa4L,MAAAA;AAAb,KAAZ,EAAgCU,OAAhC,CAAP;AACD;;AAEDF,EAAAA,aAAa,CACXR,GADW,EAEXiB,IAFW,EAMXC,aANW,EAOX,GAAG1L,MAPQ,EAQI;AACf,UAAMpB,GAAG,GAAG,KAAK2L,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMU,OAAO,GACXQ,aAAa,CAACP,OAAd,CAAsB,SAAtB,EAAiC,CAACC,CAAD,EAAI7M,CAAJ,KAAkByB,MAAM,CAACzB,CAAD,CAAzD,IACC,KAAIK,GAAG,CAAC1C,IAAK,IAAG0C,GAAG,CAACxC,MAAO,GAF9B;AAGA,WAAO,KAAKoP,MAAL,CAAYnL,MAAM,CAACnI,MAAP,CAAe;AAAE0G,MAAAA,GAAF;AAAO4L,MAAAA;AAAP,KAAf,EAAsCiB,IAAtC,CAAZ,EAAyDP,OAAzD,CAAP;AACD;;AAEDM,EAAAA,MAAM,CAACG,YAAD,EAA6BT,OAA7B,EAA6D;AAEjE,UAAMU,GAA+B,GAAG,IAAIrL,WAAJ,CAAgB2K,OAAhB,CAAxC;AACA7K,IAAAA,MAAM,CAACnI,MAAP,CAAc0T,GAAd,EAAmBD,YAAnB;;AACA,QAAI,KAAKjW,OAAL,CAAa2V,aAAjB,EAAgC;AAC9B,UAAI,CAAC,KAAKQ,WAAV,EAAuB,KAAKhN,KAAL,CAAWyM,MAAX,CAAkBxM,IAAlB,CAAuB8M,GAAvB;AACvB,aAAOA,GAAP;AACD,KAHD,MAGO;AACL,YAAMA,GAAN;AACD;AACF;;AAtFqD;;AC9CxD,cAAgBE,UAAD,IACb,cAAcA,UAAd,CAAyB;AACvBC,EAAAA,kBAAkB,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAA6B;AAC7C,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAG,IAAIvQ,MAAJ,CAAWqQ,OAAX,EAAoBC,KAApB,CAAR;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU;;AAIZ,UAAMvO,IAAI,GAAG,KAAKwO,kBAAL,CAA+CF,KAA/C,CAAb;AACAtO,IAAAA,IAAI,CAACsO,KAAL,GAAa;AAAEF,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAb;AAEA,WAAOrO,IAAP;AACD;;AAEDyO,EAAAA,kBAAkB,CAACC,KAAD,EAAqB;AAErC,QAAIC,MAAJ;;AACA,QAAI;AAEFA,MAAAA,MAAM,GAAGC,MAAM,CAACF,KAAD,CAAf;AACD,KAHD,CAGE,gBAAM;AACNC,MAAAA,MAAM,GAAG,IAAT;AACD;;AACD,UAAM3O,IAAI,GAAG,KAAKwO,kBAAL,CAA+CG,MAA/C,CAAb;AACA3O,IAAAA,IAAI,CAAC5H,MAAL,GAAcyW,MAAM,CAAC7O,IAAI,CAAC0O,KAAL,IAAcA,KAAf,CAApB;AAEA,WAAO1O,IAAP;AACD;;AAED8O,EAAAA,mBAAmB,CAACJ,KAAD,EAAqB;AAGtC,UAAMrW,OAAO,GAAG,IAAhB;AACA,UAAM2H,IAAI,GAAG,KAAKwO,kBAAL,CAAwBnW,OAAxB,CAAb;AACA2H,IAAAA,IAAI,CAAC3H,OAAL,GAAewW,MAAM,CAAC7O,IAAI,CAAC0O,KAAL,IAAcA,KAAf,CAArB;AAEA,WAAO1O,IAAP;AACD;;AAEDwO,EAAAA,kBAAkB,CAAYE,KAAZ,EAAwB;AACxC,WAAO,KAAKK,YAAL,CAAqBL,KAArB,EAA4B,SAA5B,CAAP;AACD;;AAEDM,EAAAA,kBAAkB,CAACN,KAAD,EAAqB;AACrC,WAAO,KAAKF,kBAAL,CAAwBE,KAAxB,CAAP;AACD;;AAEDO,EAAAA,mBAAmB,CAACP,KAAD,EAAkB;AACnC,WAAO,KAAKF,kBAAL,CAAwBE,KAAxB,CAAP;AACD;;AAEDQ,EAAAA,gBAAgB,GAAW;AACzB,WAAO,KAAKV,kBAAL,CAAwB,IAAxB,CAAP;AACD;;AAEDW,EAAAA,mBAAmB,CAACT,KAAD,EAAmC;AACpD,WAAO,KAAKF,kBAAL,CAAwBE,KAAxB,CAAP;AACD;;AAEDU,EAAAA,eAAe,CAACC,SAAD,EAAgD;AAC7D,UAAMC,gBAAgB,GAAGD,SAAS,CAACX,KAAnC;AAEA,UAAMa,IAAI,GAAG,KAAKC,WAAL,CAAiBH,SAAS,CAAC3Q,KAA3B,EAAkC2Q,SAAS,CAACrO,GAAV,CAActC,KAAhD,CAAb;AACA,UAAM+Q,UAAU,GAAG,KAAKD,WAAL,CACjBF,gBAAgB,CAAC5Q,KADA,EAEjB4Q,gBAAgB,CAACtO,GAAjB,CAAqBtC,KAFJ,CAAnB;AAKA+Q,IAAAA,UAAU,CAACf,KAAX,GAAmBY,gBAAgB,CAACI,KAAjB,CAAuBC,eAA1C;AACAF,IAAAA,UAAU,CAACG,GAAX,GAAiBN,gBAAgB,CAACI,KAAjB,CAAuBE,GAAxC;AAEAL,IAAAA,IAAI,CAACE,UAAL,GAAkB,KAAKI,YAAL,CAChBJ,UADgB,EAEhB,SAFgB,EAGhBH,gBAAgB,CAAC3Q,GAHD,EAIhB2Q,gBAAgB,CAACtO,GAAjB,CAAqBrC,GAJL,CAAlB;AAMA4Q,IAAAA,IAAI,CAACF,SAAL,GAAiBC,gBAAgB,CAACI,KAAjB,CAAuBE,GAAvB,CAA2BE,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAjB;AAEA,WAAO,KAAKD,YAAL,CACLN,IADK,EAEL,qBAFK,EAGLF,SAAS,CAAC1Q,GAHL,EAIL0Q,SAAS,CAACrO,GAAV,CAAcrC,GAJT,CAAP;AAMD;;AAMDoR,EAAAA,YAAY,CACV/P,IADU,EAEVgQ,OAFU,EAGJ;AACN,UAAMD,YAAN,CAAmB/P,IAAnB,EAAyBgQ,OAAzB;AACAhQ,IAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAlB;AACD;;AAEDQ,EAAAA,gBAAgB,CAACjQ,IAAD,EAA2C;AACzD,QAAIA,IAAI,IAAI,IAAR,IAAgB,KAAKkQ,gBAAL,CAAsBlQ,IAAtB,CAApB,EAAiD;AAC/C,WAAKiQ,gBAAL,CAAwBjQ,IAAF,CAAgC0O,KAAtD;AACD,KAFD,MAEO;AACL,YAAMuB,gBAAN,CAAuBjQ,IAAvB;AACD;AACF;;AAEDmQ,EAAAA,4BAA4B,CAACC,MAAD,EAAyC;AACnE,WAASA,MAAF,CAA6D1B,KAA7D,CACJtM,MADH;AAED;;AAEDiO,EAAAA,gBAAgB,CAACd,IAAD,EAA6B;AAAA;;AAC3C,WACEA,IAAI,CAACtN,IAAL,KAAc,qBAAd,IACAsN,IAAI,CAACE,UAAL,CAAgBxN,IAAhB,KAAyB,SADzB,IAEA,OAAOsN,IAAI,CAACE,UAAL,CAAgBf,KAAvB,KAAiC,QAFjC,IAGA,2BAACa,IAAI,CAACE,UAAL,CAAgBC,KAAjB,aAAC,sBAAuBY,aAAxB,CAJF;AAMD;;AAEDC,EAAAA,eAAe,CAAChB,IAAD,EAAiC;AAC9C,UAAMb,KAAK,GAAGa,IAAI,CAACE,UAAL,CAAgBf,KAA9B;AACA,UAAMW,SAAS,GAAG,MAAMkB,eAAN,CAAsBhB,IAAtB,CAAlB;AAKA,SAAKiB,QAAL,CAAcnB,SAAS,CAACX,KAAxB,EAA+B,iBAA/B,EAAkDA,KAAlD;AAEA,WAAOW,SAAP;AACD;;AAEDoB,EAAAA,cAAc,CACZzQ,IADY,EAEZ,GAAG0Q,IAFS,EAGN;AACN,UAAMD,cAAN,CAAqBzQ,IAArB,EAA2B,GAAG0Q,IAA9B;AAEA,UAAMC,mBAAmB,GAAG3Q,IAAI,CAAC4Q,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAC/C,KAAK1B,eAAL,CAAqB0B,CAArB,CAD0B,CAA5B;AAGA9Q,IAAAA,IAAI,CAAC+Q,IAAL,GAAYJ,mBAAmB,CAACK,MAApB,CAA2BhR,IAAI,CAAC+Q,IAAhC,CAAZ;AAEA,WAAO/Q,IAAI,CAAC4Q,UAAZ;AACD;;AAEDK,EAAAA,eAAe,CACbC,SADa,EAEbd,MAFa,EAGbe,WAHa,EAIbnB,OAJa,EAKboB,aALa,EAMbC,iBANa,EAOP;AACN,SAAKC,WAAL,CACElB,MADF,EAEEe,WAFF,EAGEnB,OAHF,EAIEoB,aAJF,EAKEC,iBALF,EAME,aANF,EAOE,IAPF;;AASA,QAAIjB,MAAM,CAACmB,cAAX,EAA2B;AAEzBnB,MAAAA,MAAM,CAAC1B,KAAP,CAAa6C,cAAb,GAA8BnB,MAAM,CAACmB,cAArC;AACA,aAAOnB,MAAM,CAACmB,cAAd;AACD;;AACDL,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoBkP,MAApB;AACD;;AAEDoB,EAAAA,qBAAqB,CAAC,GAAGd,IAAJ,EAA0B;AAC7C,UAAM1Q,IAAI,GAAG,MAAMwR,qBAAN,CAA4B,GAAGd,IAA/B,CAAb;;AACA,QACE1Q,IAAI,CAACiC,IAAL,KAAc,aAAd,IACA,KAAKrC,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAFF,EAGE;AACA,aAAO,KAAK6R,qCAAL,CAA2CzR,IAA3C,CAAP;AACD;;AACD,WAAOA,IAAP;AACD;;AAEDyR,EAAAA,qCAAqC,CACnCzR,IADmC,EAER;AAC3B,UAAMnI,IAAI,GAAG,MAAM6Z,gBAAN,CAAuB1R,IAAvB,CAAb;AACAA,IAAAA,IAAI,GAAIA,IAAR;AACA,WAAOA,IAAI,CAAC2R,EAAZ;AACA3R,IAAAA,IAAI,CAACnI,IAAL,GAAYA,IAAZ;AACAmI,IAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,WAAOjC,IAAP;AACD;;AAED4R,EAAAA,aAAa,CAAC5R,IAAD,EAAwB;AACnC,QAAI,CAAC,KAAKJ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAMgS,aAAN,CAAoB5R,IAApB,CAAP;AACD;;AACD,WAAOA,IAAI,CAACiC,IAAL,KAAc,mBAArB;AACD;;AAEDyP,EAAAA,gBAAgB,CAAC1R,IAAD,EAAuB;AACrC,QAAI,CAAC,KAAKJ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAM8R,gBAAN,CAAuB1R,IAAvB,CAAP;AACD;;AACD,WAAOA,IAAI,CAACnI,IAAZ;AACD;;AAEDkX,EAAAA,YAAY,CAAYL,KAAZ,EAAwBzM,IAAxB,EAA0D;AACpE,UAAMjC,IAAI,GAAG,MAAM+O,YAAN,CAAsBL,KAAtB,EAA6BzM,IAA7B,CAAb;AACAjC,IAAAA,IAAI,CAAC4P,GAAL,GAAW5P,IAAI,CAAC0P,KAAL,CAAWE,GAAtB;AACA,WAAO5P,IAAI,CAAC0P,KAAZ;AAEA,WAAO1P,IAAP;AACD;;AAED6R,EAAAA,iBAAiB,CACf7R,IADe,EAEf8R,eAFe,EAGfC,QAAkB,GAAG,KAHN,EAIT;AACN,UAAMF,iBAAN,CAAwB7R,IAAxB,EAA8B8R,eAA9B,EAA+CC,QAA/C;AACA/R,IAAAA,IAAI,CAACyP,UAAL,GAAkBzP,IAAI,CAAC+Q,IAAL,CAAU9O,IAAV,KAAmB,gBAArC;AACD;;AAEDqP,EAAAA,WAAW,CACTtR,IADS,EAETmR,WAFS,EAGTnB,OAHS,EAIToB,aAJS,EAKTY,gBALS,EAMT/P,IANS,EAOTgQ,YAAqB,GAAG,KAPf,EAQN;AACH,QAAIC,QAAQ,GAAG,KAAKC,SAAL,EAAf;AACAD,IAAAA,QAAQ,CAACE,IAAT,GAAgBpS,IAAI,CAACoS,IAArB;AACAF,IAAAA,QAAQ,GAAG,MAAMZ,WAAN,CACTY,QADS,EAETf,WAFS,EAGTnB,OAHS,EAIToB,aAJS,EAKTY,gBALS,EAMT/P,IANS,EAOTgQ,YAPS,CAAX;AASAC,IAAAA,QAAQ,CAACjQ,IAAT,GAAgB,oBAAhB;AACA,WAAOiQ,QAAQ,CAACE,IAAhB;AAEApS,IAAAA,IAAI,CAAC0O,KAAL,GAAawD,QAAb;;AACA,QAAIjQ,IAAI,KAAK,oBAAb,EAAmC;AAEjCjC,MAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACD;;AACDpQ,IAAAA,IAAI,GAAG,kBAAP;AACA,WAAO,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDsQ,EAAAA,kBAAkB,CAAC,GAAG7B,IAAJ,EAAkC;AAClD,UAAM8B,YAAY,GAAI,MAAMD,kBAAN,CAAyB,GAAG7B,IAA5B,CAAtB;;AACA,QAAI,KAAK9Q,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnD4S,MAAAA,YAAY,CAACvQ,IAAb,GAAoB,oBAApB;AACD;;AACD,WAAQuQ,YAAR;AACD;;AAEDC,EAAAA,yBAAyB,CAAC,GAAG/B,IAAJ,EAAyC;AAChE,UAAM8B,YAAY,GAAI,MAAMC,yBAAN,CAAgC,GAAG/B,IAAnC,CAAtB;;AACA,QAAI,KAAK9Q,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnD4S,MAAAA,YAAY,CAACvQ,IAAb,GAAoB,oBAApB;AACAuQ,MAAAA,YAAY,CAACH,QAAb,GAAwB,KAAxB;AACD;;AACD,WAAQG,YAAR;AACD;;AAEDE,EAAAA,iBAAiB,CACfC,IADe,EAEfxB,WAFe,EAGfnB,OAHe,EAIf4C,SAJe,EAKfC,UALe,EAME;AACjB,UAAM7S,IAAsB,GAAI,MAAM0S,iBAAN,CAC9BC,IAD8B,EAE9BxB,WAF8B,EAG9BnB,OAH8B,EAI9B4C,SAJ8B,EAK9BC,UAL8B,CAAhC;;AAQA,QAAI7S,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACiC,IAAL,GAAY,UAAZ;AACA,UAAMjC,IAAF,CAA6BoS,IAA7B,KAAsC,QAA1C,EAAoDpS,IAAI,CAACoS,IAAL,GAAY,MAAZ;AACpDpS,MAAAA,IAAI,CAAC8S,SAAL,GAAiB,KAAjB;AACD;;AAED,WAAQ9S,IAAR;AACD;;AAED+S,EAAAA,mBAAmB,CACjBJ,IADiB,EAEjBK,QAFiB,EAGjBnG,QAHiB,EAIjB+F,SAJiB,EAKjBK,mBALiB,EAME;AACnB,UAAMjT,IAAsB,GAAI,MAAM+S,mBAAN,CAC9BJ,IAD8B,EAE9BK,QAF8B,EAG9BnG,QAH8B,EAI9B+F,SAJ8B,EAK9BK,mBAL8B,CAAhC;;AAQA,QAAIjT,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACoS,IAAL,GAAY,MAAZ;AACApS,MAAAA,IAAI,CAACiC,IAAL,GAAY,UAAZ;AACD;;AAED,WAAQjC,IAAR;AACD;;AAEDkT,EAAAA,YAAY,CAAClT,IAAD,EAAemT,KAAc,GAAG,KAAhC,EAA+C;AACzD,QAAInT,IAAI,IAAI,IAAR,IAAgB,KAAKkQ,gBAAL,CAAsBlQ,IAAtB,CAApB,EAAiD;AAC/C,WAAKkT,YAAL,CAAkBlT,IAAI,CAAC0O,KAAvB,EAA8ByE,KAA9B;AAEA,aAAOnT,IAAP;AACD;;AAED,WAAO,MAAMkT,YAAN,CAAmBlT,IAAnB,EAAyBmT,KAAzB,CAAP;AACD;;AAEDC,EAAAA,gCAAgC,CAACT,IAAD,EAAe,GAAGjC,IAAlB,EAAwB;AACtD,QAAIiC,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAAzC,EAAgD;AAC9C,WAAKjF,KAAL,CAAWwF,IAAI,CAACU,GAAL,CAAS3U,KAApB,EAA2B4U,aAAM,CAAChL,kBAAlC;AACD,KAFD,MAEO,IAAIqK,IAAI,CAACvC,MAAT,EAAiB;AACtB,WAAKjD,KAAL,CAAWwF,IAAI,CAACU,GAAL,CAAS3U,KAApB,EAA2B4U,aAAM,CAAC/K,gBAAlC;AACD,KAFM,MAEA;AACL,YAAM6K,gCAAN,CAAuCT,IAAvC,EAA6C,GAAGjC,IAAhD;AACD;AACF;;AAED6C,EAAAA,oBAAoB,CAClBvT,IADkB,EAElBwT,QAFkB,EAGJ;AACd,UAAMD,oBAAN,CAA2BvT,IAA3B,EAAiCwT,QAAjC;;AAEA,QAAIxT,IAAI,CAACyT,MAAL,CAAYxR,IAAZ,KAAqB,QAAzB,EAAmC;AAC/BjC,MAAAA,IAAF,CAA2CiC,IAA3C,GAAkD,kBAAlD;AACEjC,MAAAA,IAAF,CAA2ChC,MAA3C,GAAoDgC,IAAI,CAACmC,SAAL,CAAe,CAAf,CAApD;;AACA,UAAI,KAAK1C,SAAL,CAAe,kBAAf,CAAJ,EAAwC;AAAA;;AACpCO,QAAAA,IAAF,CAA2C0T,UAA3C,uBACE1T,IAAI,CAACmC,SAAL,CAAe,CAAf,CADF,+BACuB,IADvB;AAED;;AAED,aAAOnC,IAAI,CAACmC,SAAZ;AAEA,aAAOnC,IAAI,CAACyT,MAAZ;AACD;;AAED,WAAOzT,IAAP;AACD;;AAED2T,EAAAA,qBAAqB,CACnB3T,IADmB,EAMnB;AAEA,QAAIA,IAAI,CAACiC,IAAL,KAAc,kBAAlB,EAAsC;AACpC;AACD;;AAED,UAAM0R,qBAAN,CAA4B3T,IAA5B;AACD;;AAED4T,EAAAA,WAAW,CAAC5T,IAAD,EAAe;AACxB,UAAM4T,WAAN,CAAkB5T,IAAlB;;AAEA,YAAQA,IAAI,CAACiC,IAAb;AACE,WAAK,sBAAL;AACEjC,QAAAA,IAAI,CAAC6T,QAAL,GAAgB,IAAhB;AACA;;AAEF,WAAK,wBAAL;AACE,YACE7T,IAAI,CAACqC,UAAL,CAAgBzB,MAAhB,KAA2B,CAA3B,IACAZ,IAAI,CAACqC,UAAL,CAAgB,CAAhB,EAAmBJ,IAAnB,KAA4B,0BAF9B,EAGE;AACAjC,UAAAA,IAAI,CAACiC,IAAL,GAAY,sBAAZ;AACAjC,UAAAA,IAAI,CAAC6T,QAAL,GAAgB7T,IAAI,CAACqC,UAAL,CAAgB,CAAhB,EAAmBwR,QAAnC;AACA,iBAAO7T,IAAI,CAACqC,UAAZ;AACD;;AAED;AAfJ;;AAkBA,WAAOrC,IAAP;AACD;;AAED8T,EAAAA,cAAc,CACZC,IADY,EAEZf,QAFY,EAGZnG,QAHY,EAIZmH,OAJY,EAKZ/S,KALY,EAMZ;AACA,UAAMjB,IAAI,GAAG,MAAM8T,cAAN,CACXC,IADW,EAEXf,QAFW,EAGXnG,QAHW,EAIXmH,OAJW,EAKX/S,KALW,CAAb;;AAQA,QAAIA,KAAK,CAACgT,mBAAV,EAA+B;AAE7B,UACEjU,IAAI,CAACiC,IAAL,KAAc,0BAAd,IACAjC,IAAI,CAACiC,IAAL,KAAc,wBAFhB,EAGE;AACAjC,QAAAA,IAAI,CAACiC,IAAL,GAAYjC,IAAI,CAACiC,IAAL,CAAUiS,SAAV,CAAoB,CAApB,CAAZ;AACD;;AACD,UAAIjT,KAAK,CAACkT,IAAV,EAAgB;AACd,cAAMC,KAAK,GAAG,KAAKC,eAAL,CAAqBrU,IAArB,CAAd;AACAoU,QAAAA,KAAK,CAAC3E,UAAN,GAAmBzP,IAAnB;AACA,eAAO,KAAKsS,UAAL,CAAgB8B,KAAhB,EAAuB,iBAAvB,CAAP;AACD;AACF,KAbD,MAaO,IACLpU,IAAI,CAACiC,IAAL,KAAc,kBAAd,IACAjC,IAAI,CAACiC,IAAL,KAAc,gBAFT,EAGL;AACAjC,MAAAA,IAAI,CAACwT,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAOxT,IAAP;AACD;;AAEDsU,EAAAA,wBAAwB,CAACtU,IAAD,EAAwB;AAC9C,QAAIA,IAAI,CAACiC,IAAL,KAAc,iBAAlB,EAAqC;AACnCjC,MAAAA,IAAI,GAAGA,IAAI,CAACyP,UAAZ;AACD;;AACD,WAAO,MAAM6E,wBAAN,CAA+BtU,IAA/B,CAAP;AACD;;AAEDuU,EAAAA,eAAe,CAACvU,IAAD,EAAwB;AACrC,WAAOA,IAAI,CAACiC,IAAL,KAAc,iBAArB;AACD;;AAEDiO,EAAAA,gBAAgB,CAAClQ,IAAD,EAAwB;AACtC,WAAOA,IAAI,CAACiC,IAAL,KAAc,UAAd,IAA4BjC,IAAI,CAACoS,IAAL,KAAc,MAA1C,IAAoD,CAACpS,IAAI,CAACoQ,MAAjE;AACD;;AAEDoE,EAAAA,cAAc,CAACxU,IAAD,EAAwB;AACpC,WAAOA,IAAI,CAACoQ,MAAL,IAAepQ,IAAI,CAACoS,IAAL,KAAc,KAA7B,IAAsCpS,IAAI,CAACoS,IAAL,KAAc,KAA3D;AACD;;AA1csB,CAD3B;;ACFO,MAAMqC,UAAN,CAAiB;AACtBtd,EAAAA,WAAW,CAACY,KAAD,EAAgB2c,aAAhB,EAAyC;AAAA,SAKpD3c,KALoD;AAAA,SAMpD2c,aANoD;AAClD,SAAK3c,KAAL,GAAaA,KAAb;AACA,SAAK2c,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACD;;AAJqB;AAUjB,MAAMxc,KAEZ,GAAG;AACFyc,EAAAA,KAAK,EAAE,IAAIF,UAAJ,CAAe,GAAf,CADL;AAEF3a,EAAAA,QAAQ,EAAE,IAAI2a,UAAJ,CAAe,GAAf,EAAoB,IAApB;AAFR,CAFG;;AAiBPG,OAAE,CAAC1b,MAAH,CAAUzB,aAAV,GAA0Bod,OAAO,IAAI;AACnCA,EAAAA,OAAO,CAACC,GAAR;AACD,CAFD;;AAWAF,OAAE,CAAC7b,MAAH,CAAUtB,aAAV,GACEmd,OAAE,CAAC3b,UAAH,CAAcxB,aAAd,GACAmd,OAAE,CAAC3a,YAAH,CAAgBxC,aAAhB,GACEod,OAAO,IAAI;AACTA,EAAAA,OAAO,CAAC3T,IAAR,CAAahJ,KAAK,CAACyc,KAAnB;AACD,CALL;;AAOAC,OAAE,CAAC5a,SAAH,CAAavC,aAAb,GAA6Bod,OAAO,IAAI;AACtC,MAAIA,OAAO,CAACA,OAAO,CAACjU,MAAR,GAAiB,CAAlB,CAAP,KAAgC1I,KAAK,CAAC4B,QAA1C,EAAoD;AAClD+a,IAAAA,OAAO,CAACC,GAAR;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAAC3T,IAAR,CAAahJ,KAAK,CAAC4B,QAAnB;AACD;AACF,CAND;;ACzCA,IAAIib,4BAA4B,GAAG,urIAAnC;AAEA,IAAIC,uBAAuB,GAAG,sjFAA9B;AAEA,MAAMC,uBAAuB,GAAG,IAAIlX,MAAJ,CAC9B,MAAMgX,4BAAN,GAAqC,GADP,CAAhC;AAGA,MAAMG,kBAAkB,GAAG,IAAInX,MAAJ,CACzB,MAAMgX,4BAAN,GAAqCC,uBAArC,GAA+D,GADtC,CAA3B;AAIAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD;AASA,MAAMG,0BAA0B,GAAG,CAAC,CAAD,EAAG,EAAH,EAAM,CAAN,EAAQ,EAAR,EAAW,CAAX,EAAa,EAAb,EAAgB,CAAhB,EAAkB,CAAlB,EAAoB,CAApB,EAAsB,EAAtB,EAAyB,CAAzB,EAA2B,EAA3B,EAA8B,EAA9B,EAAiC,GAAjC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,GAA3C,EAA+C,EAA/C,EAAkD,CAAlD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,CAAnE,EAAqE,EAArE,EAAwE,EAAxE,EAA2E,EAA3E,EAA8E,CAA9E,EAAgF,EAAhF,EAAmF,CAAnF,EAAqF,CAArF,EAAuF,CAAvF,EAAyF,CAAzF,EAA2F,EAA3F,EAA8F,GAA9F,EAAkG,EAAlG,EAAqG,EAArG,EAAwG,CAAxG,EAA0G,EAA1G,EAA6G,CAA7G,EAA+G,EAA/G,EAAkH,CAAlH,EAAoH,EAApH,EAAuH,GAAvH,EAA2H,GAA3H,EAA+H,EAA/H,EAAkI,EAAlI,EAAqI,EAArI,EAAwI,CAAxI,EAA0I,GAA1I,EAA8I,CAA9I,EAAgJ,CAAhJ,EAAkJ,CAAlJ,EAAoJ,CAApJ,EAAsJ,EAAtJ,EAAyJ,CAAzJ,EAA2J,CAA3J,EAA6J,CAA7J,EAA+J,CAA/J,EAAiK,CAAjK,EAAmK,EAAnK,EAAsK,EAAtK,EAAyK,EAAzK,EAA4K,EAA5K,EAA+K,EAA/K,EAAkL,EAAlL,EAAqL,EAArL,EAAwL,CAAxL,EAA0L,CAA1L,EAA4L,EAA5L,EAA+L,EAA/L,EAAkM,EAAlM,EAAqM,EAArM,EAAwM,EAAxM,EAA2M,EAA3M,EAA8M,CAA9M,EAAgN,CAAhN,EAAkN,EAAlN,EAAqN,CAArN,EAAuN,EAAvN,EAA0N,CAA1N,EAA4N,CAA5N,EAA8N,CAA9N,EAAgO,CAAhO,EAAkO,EAAlO,EAAqO,EAArO,EAAwO,EAAxO,EAA2O,CAA3O,EAA6O,EAA7O,EAAgP,EAAhP,EAAmP,CAAnP,EAAqP,CAArP,EAAuP,EAAvP,EAA0P,EAA1P,EAA6P,EAA7P,EAAgQ,EAAhQ,EAAmQ,EAAnQ,EAAsQ,EAAtQ,EAAyQ,EAAzQ,EAA4Q,EAA5Q,EAA+Q,EAA/Q,EAAkR,GAAlR,EAAsR,EAAtR,EAAyR,EAAzR,EAA4R,EAA5R,EAA+R,EAA/R,EAAkS,EAAlS,EAAqS,EAArS,EAAwS,EAAxS,EAA2S,GAA3S,EAA+S,EAA/S,EAAkT,CAAlT,EAAoT,CAApT,EAAsT,EAAtT,EAAyT,EAAzT,EAA4T,EAA5T,EAA+T,CAA/T,EAAiU,CAAjU,EAAmU,EAAnU,EAAsU,GAAtU,EAA0U,EAA1U,EAA6U,EAA7U,EAAgV,EAAhV,EAAmV,EAAnV,EAAsV,EAAtV,EAAyV,EAAzV,EAA4V,EAA5V,EAA+V,EAA/V,EAAkW,EAAlW,EAAqW,EAArW,EAAwW,EAAxW,EAA2W,EAA3W,EAA8W,CAA9W,EAAgX,CAAhX,EAAkX,CAAlX,EAAoX,CAApX,EAAsX,EAAtX,EAAyX,CAAzX,EAA2X,CAA3X,EAA6X,EAA7X,EAAgY,EAAhY,EAAmY,EAAnY,EAAsY,CAAtY,EAAwY,EAAxY,EAA2Y,CAA3Y,EAA6Y,CAA7Y,EAA+Y,CAA/Y,EAAiZ,EAAjZ,EAAoZ,EAApZ,EAAuZ,CAAvZ,EAAyZ,EAAzZ,EAA4Z,EAA5Z,EAA+Z,CAA/Z,EAAia,CAAja,EAAma,CAAna,EAAqa,CAAra,EAAua,CAAva,EAAya,CAAza,EAA2a,EAA3a,EAA8a,CAA9a,EAAgb,CAAhb,EAAkb,CAAlb,EAAob,EAApb,EAAub,EAAvb,EAA0b,CAA1b,EAA4b,CAA5b,EAA8b,CAA9b,EAAgc,CAAhc,EAAkc,EAAlc,EAAqc,CAArc,EAAuc,CAAvc,EAAyc,CAAzc,EAA2c,CAA3c,EAA6c,CAA7c,EAA+c,CAA/c,EAAid,CAAjd,EAAmd,CAAnd,EAAqd,EAArd,EAAwd,CAAxd,EAA0d,EAA1d,EAA6d,CAA7d,EAA+d,GAA/d,EAAme,EAAne,EAAse,EAAte,EAAye,CAAze,EAA2e,EAA3e,EAA8e,CAA9e,EAAgf,EAAhf,EAAmf,EAAnf,EAAsf,EAAtf,EAAyf,CAAzf,EAA2f,CAA3f,EAA6f,CAA7f,EAA+f,GAA/f,EAAmgB,EAAngB,EAAsgB,EAAtgB,EAAygB,CAAzgB,EAA2gB,EAA3gB,EAA8gB,EAA9gB,EAAihB,EAAjhB,EAAohB,CAAphB,EAAshB,EAAthB,EAAyhB,EAAzhB,EAA4hB,EAA5hB,EAA+hB,CAA/hB,EAAiiB,EAAjiB,EAAoiB,EAApiB,EAAuiB,GAAviB,EAA2iB,EAA3iB,EAA8iB,GAA9iB,EAAkjB,EAAljB,EAAqjB,EAArjB,EAAwjB,CAAxjB,EAA0jB,CAA1jB,EAA4jB,CAA5jB,EAA8jB,CAA9jB,EAAgkB,CAAhkB,EAAkkB,CAAlkB,EAAokB,CAApkB,EAAskB,CAAtkB,EAAwkB,EAAxkB,EAA2kB,EAA3kB,EAA8kB,CAA9kB,EAAglB,CAAhlB,EAAklB,CAAllB,EAAolB,EAAplB,EAAulB,CAAvlB,EAAylB,CAAzlB,EAA2lB,EAA3lB,EAA8lB,EAA9lB,EAAimB,CAAjmB,EAAmmB,CAAnmB,EAAqmB,CAArmB,EAAumB,EAAvmB,EAA0mB,CAA1mB,EAA4mB,EAA5mB,EAA+mB,EAA/mB,EAAknB,CAAlnB,EAAonB,CAApnB,EAAsnB,EAAtnB,EAAynB,CAAznB,EAA2nB,EAA3nB,EAA8nB,EAA9nB,EAAioB,EAAjoB,EAAooB,CAApoB,EAAsoB,EAAtoB,EAAyoB,EAAzoB,EAA4oB,GAA5oB,EAAgpB,CAAhpB,EAAkpB,CAAlpB,EAAopB,EAAppB,EAAupB,EAAvpB,EAA0pB,CAA1pB,EAA4pB,EAA5pB,EAA+pB,EAA/pB,EAAkqB,GAAlqB,EAAsqB,CAAtqB,EAAwqB,CAAxqB,EAA0qB,CAA1qB,EAA4qB,CAA5qB,EAA8qB,EAA9qB,EAAirB,EAAjrB,EAAorB,CAAprB,EAAsrB,EAAtrB,EAAyrB,CAAzrB,EAA2rB,CAA3rB,EAA6rB,CAA7rB,EAA+rB,CAA/rB,EAAisB,EAAjsB,EAAosB,EAApsB,EAAusB,CAAvsB,EAAysB,GAAzsB,EAA6sB,EAA7sB,EAAgtB,GAAhtB,EAAotB,CAAptB,EAAstB,EAAttB,EAAytB,GAAztB,EAA6tB,GAA7tB,EAAiuB,GAAjuB,EAAquB,EAAruB,EAAwuB,GAAxuB,EAA4uB,IAA5uB,EAAivB,IAAjvB,EAAsvB,IAAtvB,EAA2vB,GAA3vB,EAA+vB,IAA/vB,EAAowB,GAApwB,EAAwwB,CAAxwB,EAA0wB,EAA1wB,EAA6wB,GAA7wB,EAAixB,EAAjxB,EAAoxB,EAApxB,EAAuxB,EAAvxB,EAA0xB,EAA1xB,EAA6xB,CAA7xB,EAA+xB,EAA/xB,EAAkyB,EAAlyB,EAAqyB,CAAryB,EAAuyB,EAAvyB,EAA0yB,GAA1yB,EAA8yB,EAA9yB,EAAizB,GAAjzB,EAAqzB,EAArzB,EAAwzB,CAAxzB,EAA0zB,CAA1zB,EAA4zB,EAA5zB,EAA+zB,EAA/zB,EAAk0B,EAAl0B,EAAq0B,CAAr0B,EAAu0B,CAAv0B,EAAy0B,CAAz0B,EAA20B,EAA30B,EAA80B,IAA90B,EAAm1B,CAAn1B,EAAq1B,IAAr1B,EAA01B,EAA11B,EAA61B,CAA71B,EAA+1B,IAA/1B,EAAo2B,GAAp2B,EAAw2B,EAAx2B,EAA22B,CAA32B,EAA62B,EAA72B,EAAg3B,CAAh3B,EAAk3B,CAAl3B,EAAo3B,GAAp3B,EAAw3B,IAAx3B,EAA63B,GAA73B,EAAi4B,CAAj4B,EAAm4B,EAAn4B,EAAs4B,CAAt4B,EAAw4B,CAAx4B,EAA04B,CAA14B,EAA44B,CAA54B,EAA84B,IAA94B,EAAm5B,EAAn5B,EAAs5B,CAAt5B,EAAw5B,EAAx5B,EAA25B,CAA35B,EAA65B,CAA75B,EAA+5B,CAA/5B,EAAi6B,CAAj6B,EAAm6B,CAAn6B,EAAq6B,CAAr6B,EAAu6B,CAAv6B,EAAy6B,CAAz6B,EAA26B,CAA36B,EAA66B,EAA76B,EAAg7B,CAAh7B,EAAk7B,CAAl7B,EAAo7B,CAAp7B,EAAs7B,CAAt7B,EAAw7B,CAAx7B,EAA07B,EAA17B,EAA67B,CAA77B,EAA+7B,CAA/7B,EAAi8B,CAAj8B,EAAm8B,CAAn8B,EAAq8B,CAAr8B,EAAu8B,CAAv8B,EAAy8B,CAAz8B,EAA28B,EAA38B,EAA88B,CAA98B,EAAg9B,CAAh9B,EAAk9B,CAAl9B,EAAo9B,CAAp9B,EAAs9B,CAAt9B,EAAw9B,CAAx9B,EAA09B,CAA19B,EAA49B,CAA59B,EAA89B,CAA99B,EAAg+B,GAAh+B,EAAo+B,CAAp+B,EAAs+B,EAAt+B,EAAy+B,CAAz+B,EAA2+B,EAA3+B,EAA8+B,CAA9+B,EAAg/B,EAAh/B,EAAm/B,CAAn/B,EAAq/B,EAAr/B,EAAw/B,CAAx/B,EAA0/B,EAA1/B,EAA6/B,CAA7/B,EAA+/B,EAA//B,EAAkgC,CAAlgC,EAAogC,EAApgC,EAAugC,CAAvgC,EAAygC,EAAzgC,EAA4gC,CAA5gC,EAA8gC,EAA9gC,EAAihC,CAAjhC,EAAmhC,EAAnhC,EAAshC,CAAthC,EAAwhC,CAAxhC,EAA0hC,IAA1hC,EAA+hC,EAA/hC,EAAkiC,EAAliC,EAAqiC,CAAriC,EAAuiC,EAAviC,EAA0iC,CAA1iC,EAA4iC,GAA5iC,EAAgjC,EAAhjC,EAAmjC,IAAnjC,EAAwjC,GAAxjC,EAA4jC,EAA5jC,EAA+jC,EAA/jC,EAAkkC,CAAlkC,EAAokC,CAApkC,EAAskC,IAAtkC,EAA2kC,CAA3kC,EAA6kC,CAA7kC,EAA+kC,EAA/kC,EAAklC,CAAllC,EAAolC,CAAplC,EAAslC,CAAtlC,EAAwlC,CAAxlC,EAA0lC,CAA1lC,EAA4lC,CAA5lC,EAA8lC,CAA9lC,EAAgmC,CAAhmC,EAAkmC,CAAlmC,EAAomC,CAApmC,EAAsmC,CAAtmC,EAAwmC,CAAxmC,EAA0mC,CAA1mC,EAA4mC,CAA5mC,EAA8mC,CAA9mC,EAAgnC,CAAhnC,EAAknC,CAAlnC,EAAonC,CAApnC,EAAsnC,CAAtnC,EAAwnC,CAAxnC,EAA0nC,CAA1nC,EAA4nC,CAA5nC,EAA8nC,CAA9nC,EAAgoC,CAAhoC,EAAkoC,CAAloC,EAAooC,CAApoC,EAAsoC,CAAtoC,EAAwoC,CAAxoC,EAA0oC,CAA1oC,EAA4oC,CAA5oC,EAA8oC,CAA9oC,EAAgpC,CAAhpC,EAAkpC,CAAlpC,EAAopC,CAAppC,EAAspC,CAAtpC,EAAwpC,CAAxpC,EAA0pC,CAA1pC,EAA4pC,CAA5pC,EAA8pC,CAA9pC,EAAgqC,CAAhqC,EAAkqC,CAAlqC,EAAoqC,CAApqC,EAAsqC,CAAtqC,EAAwqC,CAAxqC,EAA0qC,CAA1qC,EAA4qC,CAA5qC,EAA8qC,CAA9qC,EAAgrC,CAAhrC,EAAkrC,CAAlrC,EAAorC,CAAprC,EAAsrC,CAAtrC,EAAwrC,CAAxrC,EAA0rC,CAA1rC,EAA4rC,CAA5rC,EAA8rC,CAA9rC,EAAgsC,EAAhsC,EAAmsC,CAAnsC,EAAqsC,CAArsC,EAAusC,CAAvsC,EAAysC,CAAzsC,EAA2sC,CAA3sC,EAA6sC,EAA7sC,EAAgtC,IAAhtC,EAAqtC,KAArtC,EAA2tC,EAA3tC,EAA8tC,IAA9tC,EAAmuC,EAAnuC,EAAsuC,GAAtuC,EAA0uC,CAA1uC,EAA4uC,IAA5uC,EAAivC,EAAjvC,EAAovC,IAApvC,EAAyvC,IAAzvC,EAA8vC,GAA9vC,EAAkwC,IAAlwC,EAAuwC,IAAvwC,CAAnC;AAEA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAK,CAAL,EAAO,GAAP,EAAW,CAAX,EAAa,GAAb,EAAiB,CAAjB,EAAmB,GAAnB,EAAuB,CAAvB,EAAyB,IAAzB,EAA8B,CAA9B,EAAgC,CAAhC,EAAkC,CAAlC,EAAoC,CAApC,EAAsC,CAAtC,EAAwC,EAAxC,EAA2C,CAA3C,EAA6C,CAA7C,EAA+C,CAA/C,EAAiD,GAAjD,EAAqD,CAArD,EAAuD,GAAvD,EAA2D,CAA3D,EAA6D,CAA7D,EAA+D,CAA/D,EAAiE,GAAjE,EAAqE,CAArE,EAAuE,GAAvE,EAA2E,EAA3E,EAA8E,GAA9E,EAAkF,CAAlF,EAAoF,EAApF,EAAuF,EAAvF,EAA0F,EAA1F,EAA6F,CAA7F,EAA+F,EAA/F,EAAkG,CAAlG,EAAoG,EAApG,EAAuG,EAAvG,EAA0G,EAA1G,EAA6G,CAA7G,EAA+G,CAA/G,EAAiH,CAAjH,EAAmH,EAAnH,EAAsH,EAAtH,EAAyH,CAAzH,EAA2H,CAA3H,EAA6H,CAA7H,EAA+H,CAA/H,EAAiI,EAAjI,EAAoI,CAApI,EAAsI,EAAtI,EAAyI,CAAzI,EAA2I,EAA3I,EAA8I,EAA9I,EAAiJ,CAAjJ,EAAmJ,CAAnJ,EAAqJ,CAArJ,EAAuJ,EAAvJ,EAA0J,EAA1J,EAA6J,EAA7J,EAAgK,CAAhK,EAAkK,CAAlK,EAAoK,GAApK,EAAwK,EAAxK,EAA2K,CAA3K,EAA6K,CAA7K,EAA+K,CAA/K,EAAiL,CAAjL,EAAmL,EAAnL,EAAsL,CAAtL,EAAwL,CAAxL,EAA0L,CAA1L,EAA4L,CAA5L,EAA8L,CAA9L,EAAgM,CAAhM,EAAkM,CAAlM,EAAoM,EAApM,EAAuM,CAAvM,EAAyM,EAAzM,EAA4M,CAA5M,EAA8M,CAA9M,EAAgN,CAAhN,EAAkN,CAAlN,EAAoN,CAApN,EAAsN,GAAtN,EAA0N,EAA1N,EAA6N,EAA7N,EAAgO,CAAhO,EAAkO,CAAlO,EAAoO,CAApO,EAAsO,EAAtO,EAAyO,EAAzO,EAA4O,EAA5O,EAA+O,CAA/O,EAAiP,GAAjP,EAAqP,CAArP,EAAuP,CAAvP,EAAyP,CAAzP,EAA2P,EAA3P,EAA8P,CAA9P,EAAgQ,EAAhQ,EAAmQ,EAAnQ,EAAsQ,EAAtQ,EAAyQ,CAAzQ,EAA2Q,EAA3Q,EAA8Q,EAA9Q,EAAiR,CAAjR,EAAmR,CAAnR,EAAqR,EAArR,EAAwR,EAAxR,EAA2R,CAA3R,EAA6R,CAA7R,EAA+R,GAA/R,EAAmS,EAAnS,EAAsS,GAAtS,EAA0S,CAA1S,EAA4S,EAA5S,EAA+S,CAA/S,EAAiT,CAAjT,EAAmT,CAAnT,EAAqT,CAArT,EAAuT,CAAvT,EAAyT,CAAzT,EAA2T,CAA3T,EAA6T,CAA7T,EAA+T,CAA/T,EAAiU,EAAjU,EAAoU,CAApU,EAAsU,GAAtU,EAA0U,CAA1U,EAA4U,CAA5U,EAA8U,CAA9U,EAAgV,CAAhV,EAAkV,CAAlV,EAAoV,EAApV,EAAuV,CAAvV,EAAyV,EAAzV,EAA4V,CAA5V,EAA8V,CAA9V,EAAgW,CAAhW,EAAkW,CAAlW,EAAoW,CAApW,EAAsW,EAAtW,EAAyW,EAAzW,EAA4W,EAA5W,EAA+W,EAA/W,EAAkX,GAAlX,EAAsX,CAAtX,EAAwX,CAAxX,EAA0X,CAA1X,EAA4X,EAA5X,EAA+X,CAA/X,EAAiY,EAAjY,EAAoY,EAApY,EAAuY,CAAvY,EAAyY,EAAzY,EAA4Y,GAA5Y,EAAgZ,CAAhZ,EAAkZ,CAAlZ,EAAoZ,CAApZ,EAAsZ,CAAtZ,EAAwZ,CAAxZ,EAA0Z,CAA1Z,EAA4Z,CAA5Z,EAA8Z,CAA9Z,EAAga,CAAha,EAAka,CAAla,EAAoa,CAApa,EAAsa,EAAta,EAAya,CAAza,EAA2a,CAA3a,EAA6a,CAA7a,EAA+a,CAA/a,EAAib,CAAjb,EAAmb,CAAnb,EAAqb,CAArb,EAAub,GAAvb,EAA2b,CAA3b,EAA6b,KAA7b,EAAmc,CAAnc,EAAqc,GAArc,EAAyc,CAAzc,EAA2c,EAA3c,EAA8c,CAA9c,EAAgd,EAAhd,EAAmd,CAAnd,EAAqd,IAArd,EAA0d,CAA1d,EAA4d,CAA5d,EAA8d,EAA9d,EAAie,CAAje,EAAme,CAAne,EAAqe,EAAre,EAAwe,CAAxe,EAA0e,EAA1e,EAA6e,CAA7e,EAA+e,KAA/e,EAAqf,CAArf,EAAuf,IAAvf,EAA4f,CAA5f,EAA8f,CAA9f,EAAggB,CAAhgB,EAAkgB,CAAlgB,EAAogB,CAApgB,EAAsgB,CAAtgB,EAAwgB,CAAxgB,EAA0gB,EAA1gB,EAA6gB,CAA7gB,EAA+gB,GAA/gB,EAAmhB,CAAnhB,EAAqhB,IAArhB,EAA0hB,EAA1hB,EAA6hB,GAA7hB,EAAiiB,EAAjiB,EAAoiB,CAApiB,EAAsiB,EAAtiB,EAAyiB,CAAziB,EAA2iB,CAA3iB,EAA6iB,EAA7iB,EAAgjB,CAAhjB,EAAkjB,EAAljB,EAAqjB,CAArjB,EAAujB,CAAvjB,EAAyjB,EAAzjB,EAA4jB,IAA5jB,EAAikB,CAAjkB,EAAmkB,CAAnkB,EAAqkB,EAArkB,EAAwkB,CAAxkB,EAA0kB,CAA1kB,EAA4kB,CAA5kB,EAA8kB,CAA9kB,EAAglB,CAAhlB,EAAklB,CAAllB,EAAolB,GAAplB,EAAwlB,CAAxlB,EAA0lB,EAA1lB,EAA6lB,CAA7lB,EAA+lB,GAA/lB,EAAmmB,EAAnmB,EAAsmB,IAAtmB,EAA2mB,CAA3mB,EAA6mB,GAA7mB,EAAinB,CAAjnB,EAAmnB,CAAnnB,EAAqnB,CAArnB,EAAunB,IAAvnB,EAA4nB,CAA5nB,EAA8nB,MAA9nB,EAAqoB,GAAroB,CAA9B;;AAKA,SAASC,aAAT,CAAuBnX,IAAvB,EAAqClG,GAArC,EAAsE;AACpE,MAAI4U,GAAG,GAAG,OAAV;;AACA,OAAK,IAAIjM,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG5I,GAAG,CAAC4I,MAA7B,EAAqCD,CAAC,GAAGC,MAAzC,EAAiDD,CAAC,IAAI,CAAtD,EAAyD;AACvDiM,IAAAA,GAAG,IAAI5U,GAAG,CAAC2I,CAAD,CAAV;AACA,QAAIiM,GAAG,GAAG1O,IAAV,EAAgB,OAAO,KAAP;AAEhB0O,IAAAA,GAAG,IAAI5U,GAAG,CAAC2I,CAAC,GAAG,CAAL,CAAV;AACA,QAAIiM,GAAG,IAAI1O,IAAX,EAAiB,OAAO,IAAP;AAClB;;AACD,SAAO,KAAP;AACD;;AAIM,SAASoX,iBAAT,CAA2BpX,IAA3B,EAAkD;AACvD,MAAIA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;AACjC,MAAIA,IAAI,MAAR,EAAkC,OAAO,IAAP;AAClC,MAAIA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;AACjC,MAAIA,IAAI,OAAR,EAAkC,OAAO,IAAP;;AAClC,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WACEA,IAAI,IAAI,IAAR,IAAgB+W,uBAAuB,CAACM,IAAxB,CAA6B1G,MAAM,CAAC2G,YAAP,CAAoBtX,IAApB,CAA7B,CADlB;AAGD;;AACD,SAAOmX,aAAa,CAACnX,IAAD,EAAOiX,0BAAP,CAApB;AACD;AAIM,SAASM,gBAAT,CAA0BvX,IAA1B,EAAiD;AACtD,MAAIA,IAAI,KAAR,EAA6B,OAAOA,IAAI,OAAX;AAC7B,MAAIA,IAAI,KAAR,EAA4B,OAAO,IAAP;AAC5B,MAAIA,IAAI,KAAR,EAAiC,OAAO,KAAP;AACjC,MAAIA,IAAI,MAAR,EAAkC,OAAO,IAAP;AAClC,MAAIA,IAAI,KAAR,EAAiC,OAAOA,IAAI,OAAX;AACjC,MAAIA,IAAI,OAAR,EAAkC,OAAO,IAAP;;AAClC,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgBgX,kBAAkB,CAACK,IAAnB,CAAwB1G,MAAM,CAAC2G,YAAP,CAAoBtX,IAApB,CAAxB,CAAvB;AACD;;AACD,SACEmX,aAAa,CAACnX,IAAD,EAAOiX,0BAAP,CAAb,IACAE,aAAa,CAACnX,IAAD,EAAOkX,qBAAP,CAFf;AAID;;ACjFD,MAAMM,aAAa,GAAG;AACpBpe,EAAAA,OAAO,EAAE,CACP,OADO,EAEP,MAFO,EAGP,OAHO,EAIP,UAJO,EAKP,UALO,EAMP,SANO,EAOP,IAPO,EAQP,MARO,EASP,SATO,EAUP,KAVO,EAWP,UAXO,EAYP,IAZO,EAaP,QAbO,EAcP,QAdO,EAeP,OAfO,EAgBP,KAhBO,EAiBP,KAjBO,EAkBP,OAlBO,EAmBP,OAnBO,EAoBP,MApBO,EAqBP,KArBO,EAsBP,MAtBO,EAuBP,OAvBO,EAwBP,OAxBO,EAyBP,SAzBO,EA0BP,QA1BO,EA2BP,QA3BO,EA4BP,MA5BO,EA6BP,MA7BO,EA8BP,OA9BO,EA+BP,IA/BO,EAgCP,YAhCO,EAiCP,QAjCO,EAkCP,MAlCO,EAmCP,QAnCO,CADW;AAsCpBqe,EAAAA,MAAM,EAAE,CACN,YADM,EAEN,WAFM,EAGN,KAHM,EAIN,SAJM,EAKN,SALM,EAMN,WANM,EAON,QAPM,EAQN,QARM,EASN,OATM,CAtCY;AAiDpBC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT;AAjDQ,CAAtB;AAmDA,MAAMle,QAAQ,GAAG,IAAIme,GAAJ,CAAQH,aAAa,CAACpe,OAAtB,CAAjB;AACA,MAAMwe,sBAAsB,GAAG,IAAID,GAAJ,CAAQH,aAAa,CAACC,MAAtB,CAA/B;AACA,MAAMI,0BAA0B,GAAG,IAAIF,GAAJ,CAAQH,aAAa,CAACE,UAAtB,CAAnC;AAKO,SAASI,cAAT,CAAwBC,IAAxB,EAAsCC,QAAtC,EAAkE;AACvE,SAAQA,QAAQ,IAAID,IAAI,KAAK,OAAtB,IAAkCA,IAAI,KAAK,MAAlD;AACD;AAOM,SAASE,oBAAT,CAA8BF,IAA9B,EAA4CC,QAA5C,EAAwE;AAC7E,SAAOF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCJ,sBAAsB,CAACnW,GAAvB,CAA2BsW,IAA3B,CAAzC;AACD;AAMM,SAASG,4BAAT,CAAsCH,IAAtC,EAA6D;AAClE,SAAOF,0BAA0B,CAACpW,GAA3B,CAA+BsW,IAA/B,CAAP;AACD;AAOM,SAASI,wBAAT,CACLJ,IADK,EAELC,QAFK,EAGI;AACT,SACEC,oBAAoB,CAACF,IAAD,EAAOC,QAAP,CAApB,IAAwCE,4BAA4B,CAACH,IAAD,CADtE;AAGD;AAEM,SAASK,SAAT,CAAmBL,IAAnB,EAA0C;AAC/C,SAAOve,QAAQ,CAACiI,GAAT,CAAasW,IAAb,CAAP;AACD;;AC3EM,SAASM,eAAT,CAAyBC,OAAzB,EAA0CC,IAA1C,EAAiE;AACtE,SAAOD,OAAO,OAAP,IAAgCC,IAAI,OAA3C;AACD;AAOD,MAAMC,mBAAmB,GAAG,IAAIb,GAAJ,CAAQ,CAClC,OADkC,EAElC,MAFkC,EAGlC,OAHkC,EAIlC,UAJkC,EAKlC,UALkC,EAMlC,SANkC,EAOlC,IAPkC,EAQlC,MARkC,EASlC,SATkC,EAUlC,KAVkC,EAWlC,UAXkC,EAYlC,IAZkC,EAalC,QAbkC,EAclC,QAdkC,EAelC,OAfkC,EAgBlC,KAhBkC,EAiBlC,KAjBkC,EAkBlC,OAlBkC,EAmBlC,OAnBkC,EAoBlC,MApBkC,EAqBlC,KArBkC,EAsBlC,MAtBkC,EAuBlC,OAvBkC,EAwBlC,OAxBkC,EAyBlC,SAzBkC,EA0BlC,QA1BkC,EA2BlC,QA3BkC,EA4BlC,MA5BkC,EA6BlC,MA7BkC,EA8BlC,OA9BkC,EA+BlC,IA/BkC,EAgClC,YAhCkC,EAiClC,QAjCkC,EAkClC,MAlCkC,EAmClC,QAnCkC,EAqClC,YArCkC,EAsClC,WAtCkC,EAuClC,KAvCkC,EAwClC,SAxCkC,EAyClC,SAzCkC,EA0ClC,WA1CkC,EA2ClC,QA3CkC,EA4ClC,QA5CkC,EA6ClC,OA7CkC,EA+ClC,MA/CkC,EAgDlC,WAhDkC,EAkDlC,MAlDkC,EAmDlC,OAnDkC,CAAR,CAA5B;AAsDO,SAASc,iBAAT,CAA2BV,IAA3B,EAAkD;AACvD,SAAOS,mBAAmB,CAAC/W,GAApB,CAAwBsW,IAAxB,CAAP;AACD;;ACjFM,MAAMW,WAAW,GAAU,WAA3B;AAAA,MACMC,aAAa,GAAQ,WAD3B;AAAA,MAEMC,cAAc,GAAO,WAF3B;AAAA,MAGMC,WAAW,GAAU,WAH3B;AAAA,MAIMC,kBAAkB,GAAG,WAJ3B;AAAA,MAKMC,WAAW,GAAU,WAL3B;AAAA,MAMMC,kBAAkB,GAAG,WAN3B;AAAA,MAOMC,WAAW,GAAU,WAP3B;AAAA,MAQMC,kBAAkB,GAAG,WAR3B;AAAA,MASMC,eAAe,GAAM,WAT3B;AAAA,MAUMC,SAAS,GAAGT,aAAa,GAAGC,cAAhB,GAAiCO,eAVnD;MA0BME,eAAe,GAAc,cAAnC;AAAA,MACMC,cAAc,GAAe,cADnC;AAAA,MAGMC,cAAc,GAAe,cAHnC;AAAA,MAIMC,kBAAkB,GAAW,cAJnC;AAAA,MAKMC,mBAAmB,GAAU,cALnC;AAAA,MASMC,eAAe,GAAc,cATnC;AAAA,MAUMC,gBAAgB,GAAa,cAVnC;AAAA,MAWMC,kBAAkB,GAAW,cAXnC;AAAA,MAYMC,wBAAwB,GAAK,cAZnC;AAAA,MAaMC,yBAAyB,GAAI,cAbnC;AAAA,MAcMC,0BAA0B,GAAG;AAKnC,MAAMC,UAAU,GAAWX,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAyDG,gBAApF;AAAA,MACMM,YAAY,GAASZ,eAAe,GAAG,CAAlB,GAAmCG,kBAAnC,GAAyD,CADpF;AAAA,MAEMU,QAAQ,GAAab,eAAe,GAAG,CAAlB,GAAmCE,cAAnC,GAAyD,CAFpF;AAAA,MAGMY,aAAa,GAAQd,eAAe,GAAG,CAAlB,GAAmCI,mBAAnC,GAAyD,CAHpF;AAAA,MAIMW,iBAAiB,GAAI,IAAkBd,cAAlB,GAAmC,CAAnC,GAAyDK,gBAJpF;AAAA,MAKMU,YAAY,GAAS,IAAkBf,cAAlB,GAAmC,CAAnC,GAAyD,CALpF;AAAA,MAMMgB,YAAY,GAASjB,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAyDI,kBANpF;AAAA,MAOMW,eAAe,GAAM,IAAkB,CAAlB,GAAmC,CAAnC,GAAkDT,yBAP7E;AAAA,MAUMU,SAAS,GAAY,IAAkB,CAAlB,GAAmC,CAAnC,GAAyDd,eAVpF;AAAA,MAWMe,YAAY,GAASpB,eAAe,GAAG,CAAlB,GAAmC,CAAnC,GAAyDK,eAXpF;AAAA,MAaMgB,kBAAkB,GAAGJ,YAAY,GAAGT,wBAb1C;AAAA,MAcMc,iBAAiB,GAAI,IAAkB,CAAlB,GAAmC,CAAnC,GAAkDb,yBAd7E;AAAA,MAgBMc,oBAAoB,GAAGb,0BAhB7B;AAgCA,MAAMc,yBAAyB,GAAG,KAAlC;AAAA,MACMC,yBAAyB,GAAG,KADlC;AAAA,MAEMC,yBAAyB,GAAG,KAFlC;AAAA,MAGMC,2BAA2B,GAAGF,yBAAyB,GAAGC,yBAHhE;AAMA,MAAME,2BAA2B,GAAKH,yBAAyB,GAAGD,yBAAlE;AAAA,MACMK,2BAA2B,GAAKH,yBAAyB,GAAGF,yBADlE;AAAA,MAEMM,6BAA6B,GAAGL,yBAFtC;AAAA,MAGMM,6BAA6B,GAAGL,yBAHtC;AAAA,MAIMM,mBAAmB,GAAa,CAJtC;;ACjEA,MAAMC,KAAN,CAAY;AASjBriB,EAAAA,WAAW,CAACkX,KAAD,EAAoB;AAAA,SAN/BoL,GAM+B,GANZ,IAAI5D,GAAJ,EAMY;AAAA,SAJ/B6D,OAI+B,GAJR,IAAI7D,GAAJ,EAIQ;AAAA,SAF/B8D,SAE+B,GAFN,IAAI9D,GAAJ,EAEM;AAC7B,SAAKxH,KAAL,GAAaA,KAAb;AACD;;AAXgB;AAgBJ,MAAMuL,YAAN,CAA0C;AAOvDziB,EAAAA,WAAW,CAACgW,KAAD,EAAuB+I,QAAvB,EAA0C;AAAA,SANrD2D,UAMqD,GANzB,EAMyB;AAAA,SAHrDC,gBAGqD,GAHb,IAAIniB,GAAJ,EAGa;AAAA,SAFrDoiB,qBAEqD,GAFR,IAAIpiB,GAAJ,EAEQ;AACnD,SAAKwV,KAAL,GAAaA,KAAb;AACA,SAAK+I,QAAL,GAAgBA,QAAhB;AACD;;AAEa,MAAV8D,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,oBAAL,KAA8BnD,cAA/B,IAAiD,CAAxD;AACD;;AACa,MAAVoD,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,qBAAL,KAA+BlD,WAAhC,IAA+C,CAAtD;AACD;;AACmB,MAAhBjF,gBAAgB,GAAG;AACrB,WAAO,CAAC,KAAKmI,qBAAL,KAA+BjD,kBAAhC,IAAsD,CAA7D;AACD;;AACU,MAAPkD,OAAO,GAAG;AACZ,WAAO,CAAC,KAAKD,qBAAL,KAA+BhD,WAAhC,IAA+C,CAAtD;AACD;;AACkC,MAA/BkD,+BAA+B,GAAG;AACpC,UAAMhM,KAAK,GAAG,KAAK8L,qBAAL,EAAd;AACA,WAAO,CAAC9L,KAAK,GAAG8I,WAAT,IAAwB,CAAxB,IAA6B,CAAC9I,KAAK,GAAGyI,cAAT,MAA6B,CAAjE;AACD;;AACgB,MAAbwD,aAAa,GAAG;AAClB,SAAK,IAAI3Z,CAAC,GAAG,KAAKkZ,UAAL,CAAgBjZ,MAAhB,GAAyB,CAAtC,GAA2CD,CAAC,EAA5C,EAAgD;AAC9C,YAAM;AAAE0N,QAAAA;AAAF,UAAY,KAAKwL,UAAL,CAAgBlZ,CAAhB,CAAlB;;AACA,UAAI0N,KAAK,GAAG+I,kBAAZ,EAAgC;AAC9B,eAAO,IAAP;AACD;;AACD,UAAI/I,KAAK,IAAIiJ,SAAS,GAAGH,WAAhB,CAAT,EAAuC;AAErC,eAAO,KAAP;AACD;AACF;AACF;;AACqB,MAAlBoD,kBAAkB,GAAG;AACvB,WAAO,CAAC,KAAKJ,qBAAL,KAA+BrD,cAAhC,IAAkD,CAAzD;AACD;;AACsB,MAAnB0D,mBAAmB,GAAG;AACxB,WAAO,KAAKC,0BAAL,CAAgC,KAAKC,YAAL,EAAhC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACtM,KAAD,EAA2B;AACpC,WAAO,IAAImL,KAAJ,CAAUnL,KAAV,CAAP;AACD;;AAIDuM,EAAAA,KAAK,CAACvM,KAAD,EAAoB;AACvB,SAAKwL,UAAL,CAAgB3Y,IAAhB,CAAqB,KAAKyZ,WAAL,CAAiBtM,KAAjB,CAArB;AACD;;AAEDwM,EAAAA,IAAI,GAAG;AACL,SAAKhB,UAAL,CAAgB/E,GAAhB;AACD;;AAKD2F,EAAAA,0BAA0B,CAACK,KAAD,EAAyB;AACjD,WAAO,CAAC,EACNA,KAAK,CAACzM,KAAN,GAAcyI,cAAd,IACC,CAAC,KAAKZ,QAAN,IAAkB4E,KAAK,CAACzM,KAAN,GAAcwI,aAF3B,CAAR;AAID;;AAEDkE,EAAAA,WAAW,CAACljB,IAAD,EAAemjB,WAAf,EAA0CpO,GAA1C,EAAuD;AAChE,QAAIkO,KAAK,GAAG,KAAKJ,YAAL,EAAZ;;AACA,QAAIM,WAAW,GAAGtD,kBAAd,IAAoCsD,WAAW,GAAGrD,mBAAtD,EAA2E;AACzE,WAAKsD,yBAAL,CAA+BH,KAA/B,EAAsCjjB,IAAtC,EAA4CmjB,WAA5C,EAAyDpO,GAAzD;;AAEA,UAAIoO,WAAW,GAAGrD,mBAAlB,EAAuC;AACrCmD,QAAAA,KAAK,CAACnB,SAAN,CAAgBuB,GAAhB,CAAoBrjB,IAApB;AACD,OAFD,MAEO;AACLijB,QAAAA,KAAK,CAACpB,OAAN,CAAcwB,GAAd,CAAkBrjB,IAAlB;AACD;;AAED,UAAImjB,WAAW,GAAGtD,kBAAlB,EAAsC;AACpC,aAAKyD,kBAAL,CAAwBL,KAAxB,EAA+BjjB,IAA/B;AACD;AACF,KAZD,MAYO,IAAImjB,WAAW,GAAGvD,cAAlB,EAAkC;AACvC,WAAK,IAAI9W,CAAC,GAAG,KAAKkZ,UAAL,CAAgBjZ,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpDma,QAAAA,KAAK,GAAG,KAAKjB,UAAL,CAAgBlZ,CAAhB,CAAR;AACA,aAAKsa,yBAAL,CAA+BH,KAA/B,EAAsCjjB,IAAtC,EAA4CmjB,WAA5C,EAAyDpO,GAAzD;AACAkO,QAAAA,KAAK,CAACrB,GAAN,CAAUyB,GAAV,CAAcrjB,IAAd;AACA,aAAKsjB,kBAAL,CAAwBL,KAAxB,EAA+BjjB,IAA/B;AAEA,YAAIijB,KAAK,CAACzM,KAAN,GAAciJ,SAAlB,EAA6B;AAC9B;AACF;;AACD,QAAI,KAAKpB,QAAL,IAAiB4E,KAAK,CAACzM,KAAN,GAAcwI,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBsB,MAAtB,CAA6BvjB,IAA7B;AACD;AACF;;AAEDsjB,EAAAA,kBAAkB,CAACL,KAAD,EAAgBjjB,IAAhB,EAA8B;AAC9C,QAAI,KAAKqe,QAAL,IAAiB4E,KAAK,CAACzM,KAAN,GAAcwI,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBsB,MAAtB,CAA6BvjB,IAA7B;AACD;AACF;;AAEDojB,EAAAA,yBAAyB,CACvBH,KADuB,EAEvBjjB,IAFuB,EAGvBmjB,WAHuB,EAIvBpO,GAJuB,EAKvB;AACA,QAAI,KAAKyO,mBAAL,CAAyBP,KAAzB,EAAgCjjB,IAAhC,EAAsCmjB,WAAtC,CAAJ,EAAwD;AACtD,WAAK7N,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAACxH,gBAAvB,EAAyCjU,IAAzC;AACD;AACF;;AAEDwjB,EAAAA,mBAAmB,CACjBP,KADiB,EAEjBjjB,IAFiB,EAGjBmjB,WAHiB,EAIR;AACT,QAAI,EAAEA,WAAW,GAAGzD,eAAhB,CAAJ,EAAsC,OAAO,KAAP;;AAEtC,QAAIyD,WAAW,GAAGtD,kBAAlB,EAAsC;AACpC,aACEoD,KAAK,CAACpB,OAAN,CAAc/Z,GAAd,CAAkB9H,IAAlB,KACAijB,KAAK,CAACnB,SAAN,CAAgBha,GAAhB,CAAoB9H,IAApB,CADA,IAEAijB,KAAK,CAACrB,GAAN,CAAU9Z,GAAV,CAAc9H,IAAd,CAHF;AAKD;;AAED,QAAImjB,WAAW,GAAGrD,mBAAlB,EAAuC;AACrC,aACEmD,KAAK,CAACpB,OAAN,CAAc/Z,GAAd,CAAkB9H,IAAlB,KACC,CAAC,KAAK4iB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAACrB,GAAN,CAAU9Z,GAAV,CAAc9H,IAAd,CAF9C;AAID;;AAED,WACGijB,KAAK,CAACpB,OAAN,CAAc/Z,GAAd,CAAkB9H,IAAlB,KACC,EACEijB,KAAK,CAACzM,KAAN,GAAc2I,kBAAd,IACA8D,KAAK,CAACpB,OAAN,CAAc4B,MAAd,GAAuB7E,IAAvB,GAA8B/H,KAA9B,KAAwC7W,IAF1C,CADF,IAKC,CAAC,KAAK4iB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAACnB,SAAN,CAAgBha,GAAhB,CAAoB9H,IAApB,CAN9C;AAQD;;AAED0jB,EAAAA,gBAAgB,CAAC5J,EAAD,EAAmB;AACjC,UAAM;AAAE9Z,MAAAA;AAAF,QAAW8Z,EAAjB;AACA,UAAM6J,aAAa,GAAG,KAAK3B,UAAL,CAAgB,CAAhB,CAAtB;;AACA,QACE,CAAC2B,aAAa,CAAC9B,OAAd,CAAsB/Z,GAAtB,CAA0B9H,IAA1B,CAAD,IACA,CAAC2jB,aAAa,CAAC/B,GAAd,CAAkB9Z,GAAlB,CAAsB9H,IAAtB,CADD,IAKA,CAAC2jB,aAAa,CAAC7B,SAAd,CAAwBha,GAAxB,CAA4B9H,IAA5B,CANH,EAOE;AACA,WAAKiiB,gBAAL,CAAsB9hB,GAAtB,CAA0BH,IAA1B,EAAgC8Z,EAAE,CAACjT,KAAnC;AACD;AACF;;AAEDgc,EAAAA,YAAY,GAAW;AACrB,WAAO,KAAKb,UAAL,CAAgB,KAAKA,UAAL,CAAgBjZ,MAAhB,GAAyB,CAAzC,CAAP;AACD;;AAGDqZ,EAAAA,oBAAoB,GAAe;AACjC,SAAK,IAAItZ,CAAC,GAAG,KAAKkZ,UAAL,CAAgBjZ,MAAhB,GAAyB,CAAtC,GAA2CD,CAAC,EAA5C,EAAgD;AAC9C,YAAM;AAAE0N,QAAAA;AAAF,UAAY,KAAKwL,UAAL,CAAgBlZ,CAAhB,CAAlB;;AACA,UAAI0N,KAAK,GAAGiJ,SAAZ,EAAuB;AACrB,eAAOjJ,KAAP;AACD;AACF;AACF;;AAID8L,EAAAA,qBAAqB,GAAe;AAClC,SAAK,IAAIxZ,CAAC,GAAG,KAAKkZ,UAAL,CAAgBjZ,MAAhB,GAAyB,CAAtC,GAA2CD,CAAC,EAA5C,EAAgD;AAC9C,YAAM;AAAE0N,QAAAA;AAAF,UAAY,KAAKwL,UAAL,CAAgBlZ,CAAhB,CAAlB;;AACA,UAAI0N,KAAK,IAAIiJ,SAAS,GAAGH,WAAhB,CAAL,IAAqC,EAAE9I,KAAK,GAAG0I,WAAV,CAAzC,EAAiE;AAC/D,eAAO1I,KAAP;AACD;AACF;AACF;;AA3LsD;;AC3BzD,MAAMoN,SAAN,SAAwBjC,KAAxB,CAA8B;AAAA;AAAA;AAAA,SAE5BkC,gBAF4B,GAEI,IAAI7F,GAAJ,EAFJ;AAAA;;AAAA;;AAKf,MAAM8F,gBAAN,SAA+B/B,YAA/B,CAAuD;AACpEe,EAAAA,WAAW,CAACtM,KAAD,EAA+B;AACxC,WAAO,IAAIoN,SAAJ,CAAcpN,KAAd,CAAP;AACD;;AAED0M,EAAAA,WAAW,CAACljB,IAAD,EAAemjB,WAAf,EAA0CpO,GAA1C,EAAuD;AAChE,UAAMkO,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AACA,QAAIM,WAAW,GAAG/C,0BAAlB,EAA8C;AAC5C,WAAKgD,yBAAL,CAA+BH,KAA/B,EAAsCjjB,IAAtC,EAA4CmjB,WAA5C,EAAyDpO,GAAzD;AACA,WAAKuO,kBAAL,CAAwBL,KAAxB,EAA+BjjB,IAA/B;AACAijB,MAAAA,KAAK,CAACY,gBAAN,CAAuBR,GAAvB,CAA2BrjB,IAA3B;AACA;AACD;;AAED,UAAMkjB,WAAN,CAAkB,GAAG5Y,SAArB;AACD;;AAEDkZ,EAAAA,mBAAmB,CACjBP,KADiB,EAEjBjjB,IAFiB,EAGjBmjB,WAHiB,EAIR;AACT,QAAI,MAAMK,mBAAN,CAA0B,GAAGlZ,SAA7B,CAAJ,EAA6C,OAAO,IAAP;;AAE7C,QAAI6Y,WAAW,GAAG/C,0BAAlB,EAA8C;AAC5C,aACE,CAAC6C,KAAK,CAACY,gBAAN,CAAuB/b,GAAvB,CAA2B9H,IAA3B,CAAD,KACCijB,KAAK,CAACpB,OAAN,CAAc/Z,GAAd,CAAkB9H,IAAlB,KAA2BijB,KAAK,CAACnB,SAAN,CAAgBha,GAAhB,CAAoB9H,IAApB,CAD5B,CADF;AAID;;AAED,WAAO,KAAP;AACD;;AAED0jB,EAAAA,gBAAgB,CAAC5J,EAAD,EAAmB;AACjC,QAAI,CAAC,KAAKkI,UAAL,CAAgB,CAAhB,EAAmB6B,gBAAnB,CAAoC/b,GAApC,CAAwCgS,EAAE,CAAC9Z,IAA3C,CAAL,EAAuD;AACrD,YAAM0jB,gBAAN,CAAuB5J,EAAvB;AACD;AACF;;AAtCmE;;ACYtE,MAAMiK,aAAa,GAAG,IAAI/F,GAAJ,CAAQ,CAC5B,GAD4B,EAE5B,KAF4B,EAG5B,MAH4B,EAI5B,SAJ4B,EAK5B,OAL4B,EAM5B,SAN4B,EAO5B,OAP4B,EAQ5B,WAR4B,EAS5B,OAT4B,EAU5B,MAV4B,EAW5B,QAX4B,EAY5B,QAZ4B,EAa5B,QAb4B,EAc5B,MAd4B,EAe5B,QAf4B,EAgB5B,MAhB4B,CAAR,CAAtB;AAqBA,MAAMgG,UAAU,GAAG/Y,kBAAkB,CACnC;AACEgZ,EAAAA,yBAAyB,EACvB,gFAFJ;AAGEC,EAAAA,0BAA0B,EACxB,wKAJJ;AAKEC,EAAAA,kBAAkB,EAAE,oCALtB;AAMEC,EAAAA,mBAAmB,EACjB,yDAPJ;AAQEC,EAAAA,4BAA4B,EAC1B,qEATJ;AAUEC,EAAAA,6BAA6B,EAC3B,+CAXJ;AAYEC,EAAAA,+BAA+B,EAC7B,qGAbJ;AAcEC,EAAAA,uBAAuB,EACrB,mGAfJ;AAgBEC,EAAAA,4BAA4B,EAC1B,8KAjBJ;AAkBEC,EAAAA,uBAAuB,EACrB,kGAnBJ;AAoBEC,EAAAA,sCAAsC,EACpC,sGArBJ;AAsBEC,EAAAA,uCAAuC,EACrC,+EAvBJ;AAwBEC,EAAAA,sCAAsC,EACpC,oEAzBJ;AA0BEC,EAAAA,uCAAuC,EACrC,gHA3BJ;AA4BEC,EAAAA,qBAAqB,EACnB,0HA7BJ;AA8BEC,EAAAA,8BAA8B,EAC5B,yEA/BJ;AAgCEC,EAAAA,yCAAyC,EACvC,6GAjCJ;AAkCEC,EAAAA,yBAAyB,EAAE,0CAlC7B;AAmCEC,EAAAA,mCAAmC,EACjC,wKApCJ;AAqCEC,EAAAA,kBAAkB,EAChB,6EAtCJ;AAuCEC,EAAAA,sBAAsB,EACpB,0EAxCJ;AAyCEC,EAAAA,eAAe,EAAE,+CAzCnB;AA0CEC,EAAAA,mCAAmC,EACjC,yFA3CJ;AA4CEC,EAAAA,uBAAuB,EACrB,yGA7CJ;AA8CEC,EAAAA,mBAAmB,EACjB,kEA/CJ;AAgDEC,EAAAA,iBAAiB,EACf,yDAjDJ;AAkDEC,EAAAA,sBAAsB,EACpB,gFAnDJ;AAoDEC,EAAAA,yBAAyB,EAAE,0CApD7B;AAqDEC,EAAAA,cAAc,EAAE,yCArDlB;AAsDEC,EAAAA,2BAA2B,EACzB,yDAvDJ;AAwDEC,EAAAA,4BAA4B,EAC1B,mGAzDJ;AA0DEC,EAAAA,yBAAyB,EAAE,0CA1D7B;AA2DEC,EAAAA,oBAAoB,EAClB,4DA5DJ;AA6DEC,EAAAA,kBAAkB,EAAE,oDA7DtB;AA8DEC,EAAAA,qBAAqB,EACnB,mHA/DJ;AAgEEC,EAAAA,iBAAiB,EACf,sEAjEJ;AAkEEC,EAAAA,iCAAiC,EAC/B,sEAnEJ;AAoEEC,EAAAA,sBAAsB,EAAE,8BApE1B;AAqEEC,EAAAA,4BAA4B,EAC1B,wDAtEJ;AAuEEC,EAAAA,kCAAkC,EAChC,uDAxEJ;AAyEEC,EAAAA,oBAAoB,EAClB,kEA1EJ;AA2EEC,EAAAA,4BAA4B,EAC1B,kDA5EJ;AA6EEC,EAAAA,iCAAiC,EAC/B,mEA9EJ;AA+EEC,EAAAA,+CAA+C,EAC7C,mHAhFJ;AAiFEC,EAAAA,4BAA4B,EAC1B,yDAlFJ;AAmFEC,EAAAA,mCAAmC,EACjC,mEApFJ;AAqFEC,EAAAA,uBAAuB,EAAE;AArF3B,CADmC,EAwFxBpc,UAAU,CAACG,WAxFa,CAArC;;AA4FA,SAASkc,cAAT,CAAwBC,WAAxB,EAAsD;AACpD,SACEA,WAAW,CAAC7c,IAAZ,KAAqB,6BAArB,IACC6c,WAAW,CAAC7c,IAAZ,KAAqB,0BAArB,KACE,CAAC6c,WAAW,CAACC,WAAb,IACED,WAAW,CAACC,WAAZ,CAAwB9c,IAAxB,KAAiC,WAAjC,IACC6c,WAAW,CAACC,WAAZ,CAAwB9c,IAAxB,KAAiC,sBAHtC,CAFH;AAOD;;AAED,SAAS+c,iBAAT,CAA2Bhf,IAA3B,EAAkD;AAChD,SAAOA,IAAI,CAACif,UAAL,KAAoB,MAApB,IAA8Bjf,IAAI,CAACif,UAAL,KAAoB,QAAzD;AACD;;AAED,SAASC,oBAAT,CAA8Bje,KAA9B,EAA+E;AAC7E,SACE,CAACA,KAAK,CAACgB,IAAN,KAAe2S,OAAE,CAAC/c,IAAlB,IAA0B,CAAC,CAACoJ,KAAK,CAACgB,IAAN,CAAW3K,OAAxC,KAAoD2J,KAAK,CAACyN,KAAN,KAAgB,MADtE;AAGD;;AAED,MAAMyQ,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,oBADiB;AAExBC,EAAAA,GAAG,EAAE,oBAFmB;AAGxBpd,EAAAA,IAAI,EAAE,aAHkB;AAIxBqd,EAAAA,SAAS,EAAE;AAJa,CAA1B;;AAQA,SAASC,SAAT,CACEC,IADF,EAEEjK,IAFF,EAGc;AACZ,QAAMkK,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI/e,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6e,IAAI,CAAC5e,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,KAAC4U,IAAI,CAACiK,IAAI,CAAC7e,CAAD,CAAL,EAAUA,CAAV,EAAa6e,IAAb,CAAJ,GAAyBC,KAAzB,GAAiCC,KAAlC,EAAyCxe,IAAzC,CAA8Cse,IAAI,CAAC7e,CAAD,CAAlD;AACD;;AACD,SAAO,CAAC8e,KAAD,EAAQC,KAAR,CAAP;AACD;;AAED,MAAMC,iBAAiB,GAAG,wBAA1B;AAgBA,YAAgBzR,UAAD,IACb,cAAcA,UAAd,CAAyB;AAAA;AAAA;AAAA,SAIvB0R,UAJuB,GAIuBzf,SAJvB;AAAA;;AAMvB0f,EAAAA,eAAe,GAA4B;AACzC,WAAOlE,gBAAP;AACD;;AAEDmE,EAAAA,gBAAgB,GAAY;AAC1B,WAAO,KAAKlgB,eAAL,CAAqB,MAArB,EAA6B,KAA7B,KAAuC,KAAKggB,UAAL,KAAoB,MAAlE;AACD;;AAEDG,EAAAA,gBAAgB,GAAY;AAC1B,WAAO,CAAC,CAAC,KAAKngB,eAAL,CAAqB,MAArB,EAA6B,OAA7B,CAAT;AACD;;AAEDogB,EAAAA,WAAW,CAAC/d,IAAD,EAAkBge,GAAlB,EAAkC;AAC3C,QACEhe,IAAI,KAAK2S,OAAE,CAACrc,MAAZ,IACA0J,IAAI,KAAK2S,OAAE,CAACrb,IADZ,IAEA0I,IAAI,KAAK2S,OAAE,CAACxa,oBAHd,EAIE;AACA,UAAI,KAAKwlB,UAAL,KAAoBzf,SAAxB,EAAmC;AACjC,aAAKyf,UAAL,GAAkB,IAAlB;AACD;AACF;;AACD,WAAO,MAAMI,WAAN,CAAkB/d,IAAlB,EAAwBge,GAAxB,CAAP;AACD;;AAEDnf,EAAAA,UAAU,CAACC,OAAD,EAA2B;AACnC,QAAI,KAAK6e,UAAL,KAAoBzf,SAAxB,EAAmC;AAEjC,YAAM+f,OAAO,GAAGP,iBAAiB,CAACvgB,IAAlB,CAAuB2B,OAAO,CAAC2N,KAA/B,CAAhB;;AACA,UAAI,CAACwR,OAAL,EAAc,CAAd,MAEO,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,MAAnB,EAA2B;AAChC,aAAKN,UAAL,GAAkB,MAAlB;AACD,OAFM,MAEA,IAAIM,OAAO,CAAC,CAAD,CAAP,KAAe,QAAnB,EAA6B;AAClC,aAAKN,UAAL,GAAkB,QAAlB;AACD,OAFM,MAEA;AACL,cAAM,IAAIO,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;;AACD,WAAO,MAAMrf,UAAN,CAAiBC,OAAjB,CAAP;AACD;;AAEDqf,EAAAA,wBAAwB,CAACC,GAAD,EAA8B;AACpD,UAAMC,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,SAAKtf,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAYH,GAAG,IAAIzL,OAAE,CAACpb,KAAtB;AAEA,UAAMyI,IAAI,GAAG,KAAKwe,aAAL,EAAb;AACA,SAAKxf,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AACA,WAAOre,IAAP;AACD;;AAEDye,EAAAA,kBAAkB,GAAe;AAC/B,UAAM1gB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAMwO,SAAS,GAAG,KAAK1f,KAAL,CAAWvC,KAA7B;AACA,SAAK+X,IAAL;AACA,SAAKmK,gBAAL,CAAsB,QAAtB;;AAEA,QAAI,KAAK3f,KAAL,CAAW6L,YAAX,GAA0B6T,SAAS,GAAG,CAA1C,EAA6C;AAC3C,WAAKxT,KAAL,CAAWwT,SAAX,EAAsB9E,UAAU,CAACwC,kCAAjC;AACD;;AACD,QAAI,KAAKwC,GAAL,CAASjM,OAAE,CAACxb,MAAZ,CAAJ,EAAyB;AACvB4G,MAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKoS,eAAL,EAAb;AACA,WAAKN,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA,aAAO,KAAKiZ,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;;AAED+gB,EAAAA,oCAAoC,GAAoC;AACtE,UAAMT,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,SAAKtf,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AACA,QAAIyI,IAAI,GAAG,IAAX;AACA,QAAI+e,SAAS,GAAG,IAAhB;;AACA,QAAI,KAAK9hB,KAAL,CAAW0V,OAAE,CAACtZ,MAAd,CAAJ,EAA2B;AACzB,WAAK2F,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AACAU,MAAAA,SAAS,GAAG,KAAKN,kBAAL,EAAZ;AACD,KAHD,MAGO;AACLze,MAAAA,IAAI,GAAG,KAAKwe,aAAL,EAAP;AACA,WAAKxf,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;;AACA,UAAI,KAAKphB,KAAL,CAAW0V,OAAE,CAACtZ,MAAd,CAAJ,EAA2B;AACzB0lB,QAAAA,SAAS,GAAG,KAAKN,kBAAL,EAAZ;AACD;AACF;;AACD,WAAO,CAACze,IAAD,EAAO+e,SAAP,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAACjhB,IAAD,EAA+C;AAClE,SAAKyW,IAAL;AACA,SAAKyK,qBAAL,CAA2BlhB,IAA3B,EAA6C,IAA7C;AACA,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDmhB,EAAAA,wBAAwB,CACtBnhB,IADsB,EAEC;AACvB,SAAKyW,IAAL;AAEA,UAAM9E,EAAE,GAAI3R,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAtB;AAEA,UAAMC,QAAQ,GAAG,KAAKlP,SAAL,EAAjB;AACA,UAAMmP,aAAa,GAAG,KAAKnP,SAAL,EAAtB;;AAEA,QAAI,KAAKoP,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BF,MAAAA,QAAQ,CAAC9P,cAAT,GAA0B,KAAKiQ,iCAAL,EAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,QAAQ,CAAC9P,cAAT,GAA0B,IAA1B;AACD;;AAED,SAAKiP,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA,UAAMqoB,GAAG,GAAG,KAAKC,2BAAL,EAAZ;AACAL,IAAAA,QAAQ,CAACjf,MAAT,GAAkBqf,GAAG,CAACrf,MAAtB;AACAif,IAAAA,QAAQ,CAACM,IAAT,GAAgBF,GAAG,CAACE,IAApB;AACAN,IAAAA,QAAQ,CAACO,IAAT,GAAgBH,GAAG,CAAC1kB,KAApB;AACA,SAAKyjB,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA,KAEEgoB,QAAQ,CAACQ,UAFX,EAIE7hB,IAAI,CAACghB,SAJP,IAKI,KAAKD,oCAAL,EALJ;AAOAO,IAAAA,aAAa,CAACQ,cAAd,GAA+B,KAAKxP,UAAL,CAC7B+O,QAD6B,EAE7B,wBAF6B,CAA/B;AAKA1P,IAAAA,EAAE,CAACmQ,cAAH,GAAoB,KAAKxP,UAAL,CAAgBgP,aAAhB,EAA+B,gBAA/B,CAApB;AAEA,SAAKS,gBAAL,CAAsBpQ,EAAtB;AACA,SAAKqQ,SAAL;AAEA,SAAKlH,KAAL,CAAWC,WAAX,CAAuB/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IAA/B,EAAqCihB,oBAArC,EAA2D9Y,IAAI,CAAC2R,EAAL,CAAQjT,KAAnE;AAEA,WAAO,KAAK4T,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDiiB,EAAAA,gBAAgB,CACdjiB,IADc,EAEdkiB,YAFc,EAGC;AACf,QAAI,KAAKhjB,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAAJ,EAA2B;AACzB,aAAO,KAAKgkB,qBAAL,CAA2BjhB,IAA3B,CAAP;AACD,KAFD,MAEO,IAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACxY,SAAd,CAAJ,EAA8B;AACnC,aAAO,KAAK+kB,wBAAL,CAA8BnhB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAClY,IAAd,CAAJ,EAAyB;AAC9B,aAAO,KAAKylB,wBAAL,CAA8BniB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKoiB,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;AACvC,UAAI,KAAKljB,KAAL,CAAW0V,OAAE,CAAClb,GAAd,CAAJ,EAAwB;AACtB,eAAO,KAAK2oB,6BAAL,CAAmCriB,IAAnC,CAAP;AACD,OAFD,MAEO;AACL,YAAIkiB,YAAJ,EAAkB;AAChB,eAAK/U,KAAL,CAAW,KAAKlM,KAAL,CAAW6L,YAAtB,EAAoC+O,UAAU,CAACyB,mBAA/C;AACD;;AACD,eAAO,KAAKgF,sBAAL,CAA4BtiB,IAA5B,CAAP;AACD;AACF,KATM,MASA,IAAI,KAAKuiB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC,aAAO,KAAKC,yBAAL,CAA+BxiB,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKuiB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtC,aAAO,KAAKE,0BAAL,CAAgCziB,IAAhC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKuiB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,aAAO,KAAKG,yBAAL,CAA+B1iB,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACzX,OAAd,CAAJ,EAA4B;AACjC,aAAO,KAAKwlB,iCAAL,CAAuC3iB,IAAvC,EAA6CkiB,YAA7C,CAAP;AACD,KAFM,MAEA;AACL,YAAM,KAAKU,UAAL,EAAN;AACD;AACF;;AAEDT,EAAAA,wBAAwB,CACtBniB,IADsB,EAEC;AACvB,SAAKyW,IAAL;AACAzW,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKkR,kCAAL,CACmB,IADnB,CAAV;AAGA,SAAK/H,KAAL,CAAWC,WAAX,CAAuB/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IAA/B,EAAqCugB,QAArC,EAA+CpY,IAAI,CAAC2R,EAAL,CAAQjT,KAAvD;AACA,SAAKsjB,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDsiB,EAAAA,sBAAsB,CAACtiB,IAAD,EAAiD;AACrE,SAAK8a,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;;AAEA,QAAI,KAAK1X,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAJ,EAA2B;AACzByH,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKmR,aAAL,EAAV;AACD,KAFD,MAEO;AACL9iB,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACD;;AAED,UAAM2B,QAAQ,GAAI/iB,IAAI,CAAC+Q,IAAL,GAAY,KAAKoB,SAAL,EAA9B;AACA,UAAMpB,IAAI,GAAIgS,QAAQ,CAAChS,IAAT,GAAgB,EAA9B;AACA,SAAKyP,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;;AACA,WAAO,CAAC,KAAKmG,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAR,EAA+B;AAC7B,UAAI6pB,QAAQ,GAAG,KAAK5Q,SAAL,EAAf;;AAEA,UAAI,KAAKjT,KAAL,CAAW0V,OAAE,CAACxX,OAAd,CAAJ,EAA4B;AAC1B,aAAKqZ,IAAL;;AACA,YAAI,CAAC,KAAK8L,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrjB,KAAL,CAAW0V,OAAE,CAAClX,OAAd,CAAnC,EAA2D;AACzD,eAAKyP,KAAL,CACE,KAAKlM,KAAL,CAAW6L,YADb,EAEE+O,UAAU,CAACuB,mCAFb;AAID;;AACD,aAAK4F,WAAL,CAAiBD,QAAjB;AACD,OATD,MASO;AACL,aAAKnC,gBAAL,CACE,SADF,EAEE/E,UAAU,CAAC8C,mCAFb;AAKAoE,QAAAA,QAAQ,GAAG,KAAKd,gBAAL,CAAsBc,QAAtB,EAAgC,IAAhC,CAAX;AACD;;AAEDhS,MAAAA,IAAI,CAAC7P,IAAL,CAAU6hB,QAAV;AACD;;AAED,SAAKjI,KAAL,CAAWD,IAAX;AAEA,SAAK2F,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AAEA,SAAKoZ,UAAL,CAAgByQ,QAAhB,EAA0B,gBAA1B;AAEA,QAAI3Q,IAAI,GAAG,IAAX;AACA,QAAI6Q,eAAe,GAAG,KAAtB;AACAlS,IAAAA,IAAI,CAACvE,OAAL,CAAasS,WAAW,IAAI;AAC1B,UAAID,cAAc,CAACC,WAAD,CAAlB,EAAiC;AAC/B,YAAI1M,IAAI,KAAK,UAAb,EAAyB;AACvB,eAAKjF,KAAL,CACE2R,WAAW,CAACpgB,KADd,EAEEmd,UAAU,CAACE,0BAFb;AAID;;AACD3J,QAAAA,IAAI,GAAG,IAAP;AACD,OARD,MAQO,IAAI0M,WAAW,CAAC7c,IAAZ,KAAqB,sBAAzB,EAAiD;AACtD,YAAIghB,eAAJ,EAAqB;AACnB,eAAK9V,KAAL,CACE2R,WAAW,CAACpgB,KADd,EAEEmd,UAAU,CAACM,6BAFb;AAID;;AACD,YAAI/J,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAKjF,KAAL,CACE2R,WAAW,CAACpgB,KADd,EAEEmd,UAAU,CAACE,0BAFb;AAID;;AACD3J,QAAAA,IAAI,GAAG,UAAP;AACA6Q,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KAzBD;AA2BAjjB,IAAAA,IAAI,CAACoS,IAAL,GAAYA,IAAI,IAAI,UAApB;AACA,WAAO,KAAKE,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED2iB,EAAAA,iCAAiC,CAC/B3iB,IAD+B,EAE/BkiB,YAF+B,EAGC;AAChC,SAAK1B,MAAL,CAAY5L,OAAE,CAACzX,OAAf;;AAEA,QAAI,KAAK0jB,GAAL,CAASjM,OAAE,CAAC7Y,QAAZ,CAAJ,EAA2B;AACzB,UAAI,KAAKmD,KAAL,CAAW0V,OAAE,CAACxY,SAAd,KAA4B,KAAK8C,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAAhC,EAAuD;AAGrD+C,QAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKkD,gBAAL,CAAsB,KAAK9P,SAAL,EAAtB,CAAnB;AACD,OAJD,MAIO;AAELnS,QAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAK0B,aAAL,EAAnB;AACA,aAAKuB,SAAL;AACD;;AACDhiB,MAAAA,IAAI,CAACkjB,OAAL,GAAe,IAAf;AAEA,aAAO,KAAK5Q,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAbD,MAaO;AACL,UACE,KAAKd,KAAL,CAAW0V,OAAE,CAACjY,MAAd,KACA,KAAKwmB,KAAL,EADA,IAEC,CAAC,KAAKZ,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA9B,KACC,CAACL,YAJL,EAKE;AACA,cAAM9qB,KAAK,GAAG,KAAK6J,KAAL,CAAWyN,KAAzB;AACA,cAAM0U,UAAU,GAAGjE,iBAAiB,CAAC/nB,KAAD,CAApC;AAEA,cAAM,KAAK+V,KAAL,CACJ,KAAKlM,KAAL,CAAWvC,KADP,EAEJmd,UAAU,CAAC6C,4BAFP,EAGJtnB,KAHI,EAIJgsB,UAJI,CAAN;AAMD;;AAED,UACE,KAAKlkB,KAAL,CAAW0V,OAAE,CAAClY,IAAd,KACA,KAAKwC,KAAL,CAAW0V,OAAE,CAACxY,SAAd,CADA,IAEA,KAAK8C,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAFA,IAGA,KAAKslB,YAAL,CAAkB,QAAlB,CAJF,EAKE;AACAviB,UAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKkD,gBAAL,CAAsB,KAAK9P,SAAL,EAAtB,CAAnB;AACAnS,UAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAf;AAEA,iBAAO,KAAK5Q,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD,SAVD,MAUO,IACL,KAAKd,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,KACA,KAAK2D,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CADA,IAEA,KAAKwpB,YAAL,CAAkB,WAAlB,CAFA,IAGA,KAAKA,YAAL,CAAkB,MAAlB,CAHA,IAIA,KAAKA,YAAL,CAAkB,QAAlB,CALK,EAML;AACAviB,UAAAA,IAAI,GAAG,KAAK4T,WAAL,CAAiB5T,IAAjB,CAAP;;AACA,cAAIA,IAAI,CAACiC,IAAL,KAAc,wBAAlB,EAA4C;AAG1CjC,YAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AAEAjC,YAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAf;AACA,mBAAOljB,IAAI,CAACqjB,UAAZ;AACD;;AAGDrjB,UAAAA,IAAI,CAACiC,IAAL,GAAY,YAAYjC,IAAI,CAACiC,IAA7B;AAEA,iBAAOjC,IAAP;AACD;AACF;;AAED,UAAM,KAAK4iB,UAAL,EAAN;AACD;;AAEDP,EAAAA,6BAA6B,CAC3BriB,IAD2B,EAEC;AAC5B,SAAKyW,IAAL;AACA,SAAKmK,gBAAL,CAAsB,SAAtB;AACA5gB,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKwB,uBAAL,EAAtB;AACA,SAAKtB,SAAL;AAEA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDwiB,EAAAA,yBAAyB,CACvBxiB,IADuB,EAEC;AACxB,SAAKyW,IAAL;AACA,SAAK8M,kBAAL,CAAwBvjB,IAAxB;AAEAA,IAAAA,IAAI,CAACiC,IAAL,GAAY,kBAAZ;AACA,WAAOjC,IAAP;AACD;;AAEDyiB,EAAAA,0BAA0B,CACxBziB,IADwB,EAEC;AACzB,SAAKyW,IAAL;AACA,SAAK+M,mBAAL,CAAyBxjB,IAAzB,EAA+B,IAA/B;AAEAA,IAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,WAAOjC,IAAP;AACD;;AAED0iB,EAAAA,yBAAyB,CACvB1iB,IADuB,EAEC;AACxB,SAAKyW,IAAL;AACA,SAAKyK,qBAAL,CAA2BlhB,IAA3B;AACA,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAIDkhB,EAAAA,qBAAqB,CACnBlhB,IADmB,EAEnByjB,OAAiB,GAAG,KAFD,EAGb;AACNzjB,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK+R,6BAAL,CACM,CAACD,OADP,EAEU,IAFV,CAAV;AAKA,SAAK3I,KAAL,CAAWC,WAAX,CACE/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IADV,EAEE4rB,OAAO,GAAGpL,aAAH,GAAmBF,YAF5B,EAGEnY,IAAI,CAAC2R,EAAL,CAAQjT,KAHV;;AAMA,QAAI,KAAK6iB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACD;;AAEDvR,IAAAA,IAAI,CAAC2jB,OAAL,GAAe,EAAf;AACA3jB,IAAAA,IAAI,CAAC4jB,UAAL,GAAkB,EAAlB;AACA5jB,IAAAA,IAAI,CAAC6jB,MAAL,GAAc,EAAd;;AAEA,QAAI,KAAKhD,GAAL,CAASjM,OAAE,CAAC1X,QAAZ,CAAJ,EAA2B;AACzB,SAAG;AACD8C,QAAAA,IAAI,CAAC2jB,OAAL,CAAaziB,IAAb,CAAkB,KAAK4iB,yBAAL,EAAlB;AACD,OAFD,QAES,CAACL,OAAD,IAAY,KAAK5C,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAFrB;AAGD;;AAED,QAAI,KAAKipB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,WAAK9L,IAAL;;AACA,SAAG;AACDzW,QAAAA,IAAI,CAAC6jB,MAAL,CAAY3iB,IAAZ,CAAiB,KAAK4iB,yBAAL,EAAjB;AACD,OAFD,QAES,KAAKjD,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAFT;AAGD;;AAED,QAAI,KAAKipB,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAK9L,IAAL;;AACA,SAAG;AACDzW,QAAAA,IAAI,CAAC4jB,UAAL,CAAgB1iB,IAAhB,CAAqB,KAAK4iB,yBAAL,EAArB;AACD,OAFD,QAES,KAAKjD,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAFT;AAGD;;AAED0G,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKgT,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAEP,OADsB;AAEnCQ,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAEV,OAJuB;AAKnCW,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOD;;AAEDN,EAAAA,yBAAyB,GAA2B;AAClD,UAAM9jB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAEAnS,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK0S,gCAAL,EAAV;;AACA,QAAI,KAAK9C,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAK+S,mCAAL,EAAtB;AACD,KAFD,MAEO;AACLtkB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACD;;AAED,WAAO,KAAKe,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDukB,EAAAA,kBAAkB,CAACvkB,IAAD,EAAyC;AACzD,SAAKkhB,qBAAL,CAA2BlhB,IAA3B;AACA,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDwkB,EAAAA,kBAAkB,CAACvO,IAAD,EAAe;AAC/B,QAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAK9I,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6Bmd,UAAU,CAACuC,4BAAxC;AACD;AACF;;AAEDqG,EAAAA,iBAAiB,CAACxO,IAAD,EAAepJ,QAAf,EAAiCkS,WAAjC,EAAwD;AACvE,QAAI,CAACnD,aAAa,CAACjc,GAAd,CAAkBsW,IAAlB,CAAL,EAA8B;AAE9B,SAAK9I,KAAL,CACEN,QADF,EAEEkS,WAAW,GACPlD,UAAU,CAACG,kBADJ,GAEPH,UAAU,CAACsC,sBAJjB,EAKElI,IALF;AAOD;;AAEDyN,EAAAA,6BAA6B,CAC3BgB,OAD2B,EAE3B3F,WAF2B,EAGb;AACd,SAAK0F,iBAAL,CAAuB,KAAKxjB,KAAL,CAAWyN,KAAlC,EAAyC,KAAKzN,KAAL,CAAWvC,KAApD,EAA2DqgB,WAA3D;AACA,WAAO,KAAKqC,eAAL,CAAqBsD,OAArB,CAAP;AACD;;AAIDnB,EAAAA,kBAAkB,CAACvjB,IAAD,EAAyC;AACzDA,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK+R,6BAAL,CACM,KADN,EAEU,IAFV,CAAV;AAIA,SAAK5I,KAAL,CAAWC,WAAX,CAAuB/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IAA/B,EAAqCsgB,YAArC,EAAmDnY,IAAI,CAAC2R,EAAL,CAAQjT,KAA3D;;AAEA,QAAI,KAAK6iB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACD;;AAEDvR,IAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKvE,wBAAL,CAA8BxL,OAAE,CAACva,EAAjC,CAAb;AACA,SAAK2nB,SAAL;AAEA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAEDwjB,EAAAA,mBAAmB,CACjBxjB,IADiB,EAEjB4kB,OAFiB,EAGC;AAClB,SAAKhE,gBAAL,CAAsB,MAAtB;AACA5gB,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK+R,6BAAL,CACM,IADN,EAEU,IAFV,CAAV;AAIA,SAAK5I,KAAL,CAAWC,WAAX,CAAuB/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IAA/B,EAAqCsgB,YAArC,EAAmDnY,IAAI,CAAC2R,EAAL,CAAQjT,KAA3D;;AAEA,QAAI,KAAK6iB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACD;;AAGDvR,IAAAA,IAAI,CAAC6kB,SAAL,GAAiB,IAAjB;;AACA,QAAI,KAAK3lB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwG,MAAAA,IAAI,CAAC6kB,SAAL,GAAiB,KAAKzE,wBAAL,CAA8BxL,OAAE,CAACpb,KAAjC,CAAjB;AACD;;AAEDwG,IAAAA,IAAI,CAAC8kB,QAAL,GAAgB,IAAhB;;AACA,QAAI,CAACF,OAAL,EAAc;AACZ5kB,MAAAA,IAAI,CAAC8kB,QAAL,GAAgB,KAAK1E,wBAAL,CAA8BxL,OAAE,CAACva,EAAjC,CAAhB;AACD;;AACD,SAAK2nB,SAAL;AAEA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAID+kB,EAAAA,sBAAsB,CAACC,cAAwB,GAAG,KAA5B,EAAoD;AACxE,UAAMxjB,SAAS,GAAG,KAAKP,KAAL,CAAWvC,KAA7B;AAEA,UAAMsB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAEA,UAAM8S,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AAEA,UAAMC,KAAK,GAAG,KAAKtC,kCAAL,EAAd;AACA7iB,IAAAA,IAAI,CAACnI,IAAL,GAAYstB,KAAK,CAACttB,IAAlB;AACAmI,IAAAA,IAAI,CAACilB,QAAL,GAAgBA,QAAhB;AACAjlB,IAAAA,IAAI,CAAColB,KAAL,GAAaD,KAAK,CAACrD,cAAnB;;AAEA,QAAI,KAAK5iB,KAAL,CAAW0V,OAAE,CAACva,EAAd,CAAJ,EAAuB;AACrB,WAAKwmB,GAAL,CAASjM,OAAE,CAACva,EAAZ;AACA2F,MAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAKzC,aAAL,EAAf;AACD,KAHD,MAGO;AACL,UAAIuE,cAAJ,EAAoB;AAClB,aAAK7X,KAAL,CAAW3L,SAAX,EAAsBqa,UAAU,CAACwB,uBAAjC;AACD;AACF;;AAED,WAAO,KAAK/K,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDwhB,EAAAA,iCAAiC,GAA+B;AAC9D,UAAMlB,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,UAAMvgB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AAEA,SAAKnB,KAAL,CAAWsf,MAAX,GAAoB,IAApB;;AAGA,QAAI,KAAKgB,YAAL,CAAkB,GAAlB,KAA0B,KAAKriB,KAAL,CAAW0V,OAAE,CAACyQ,WAAd,CAA9B,EAA0D;AACxD,WAAK5O,IAAL;AACD,KAFD,MAEO;AACL,WAAKmM,UAAL;AACD;;AAED,QAAI0C,eAAe,GAAG,KAAtB;;AAEA,OAAG;AACD,YAAMC,aAAa,GAAG,KAAKR,sBAAL,CAA4BO,eAA5B,CAAtB;AAEAtlB,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiBqkB,aAAjB;;AAEA,UAAIA,aAAa,CAACrC,OAAlB,EAA2B;AACzBoC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,UAAI,CAAC,KAAK/D,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF,KAZD,QAYS,CAAC,KAAKioB,YAAL,CAAkB,GAAlB,CAZV;;AAaA,SAAKiE,gBAAL,CAAsB,GAAtB;AAEA,SAAKvkB,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AAEA,WAAO,KAAKhO,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAEDskB,EAAAA,mCAAmC,GAAiC;AAClE,UAAMtkB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAMmO,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACAvgB,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AAEA,SAAKnB,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AAEA,SAAKiF,gBAAL,CAAsB,GAAtB;AACA,UAAMC,qBAAqB,GAAG,KAAKxkB,KAAL,CAAWykB,kBAAzC;AACA,SAAKzkB,KAAL,CAAWykB,kBAAX,GAAgC,KAAhC;;AACA,WAAO,CAAC,KAAKnE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BvhB,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAKuf,aAAL,EAAjB;;AACA,UAAI,CAAC,KAAKc,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,SAAK2H,KAAL,CAAWykB,kBAAX,GAAgCD,qBAAhC;AACA,SAAKD,gBAAL,CAAsB,GAAtB;AAEA,SAAKvkB,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AAEA,WAAO,KAAKhO,UAAL,CAAgBtS,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED2lB,EAAAA,4CAA4C,GAAiC;AAC3E,UAAM3lB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAMmO,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACAvgB,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AAEA,SAAKnB,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AAEA,SAAKiF,gBAAL,CAAsB,GAAtB;;AACA,WAAO,CAAC,KAAKjE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BvhB,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAK0kB,oCAAL,EAAjB;;AACA,UAAI,CAAC,KAAKrE,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKf,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,SAAKksB,gBAAL,CAAsB,GAAtB;AAEA,SAAKvkB,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AAEA,WAAO,KAAKhO,UAAL,CAAgBtS,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED6lB,EAAAA,sBAAsB,GAAwB;AAC5C,UAAM7lB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKyO,gBAAL,CAAsB,WAAtB;AAEA5gB,IAAAA,IAAI,CAAC2jB,OAAL,GAAe,EAAf;;AACA,QAAI,KAAK9C,GAAL,CAASjM,OAAE,CAAC1X,QAAZ,CAAJ,EAA2B;AACzB,SAAG;AACD8C,QAAAA,IAAI,CAAC2jB,OAAL,CAAaziB,IAAb,CAAkB,KAAK4iB,yBAAL,EAAlB;AACD,OAFD,QAES,KAAKjD,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAFT;AAGD;;AAED0G,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKgT,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAE,KADsB;AAEnCC,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAE,KAJuB;AAKnCC,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAQA,WAAO,KAAK9R,UAAL,CAAgBtS,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAED8lB,EAAAA,0BAA0B,GAAiB;AACzC,WAAO,KAAK5mB,KAAL,CAAW0V,OAAE,CAACzc,GAAd,KAAsB,KAAK+G,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAtB,GACH,KAAKuqB,aAAL,EADG,GAEH,KAAK1B,eAAL,CAAqB,IAArB,CAFJ;AAGD;;AAED2E,EAAAA,0BAA0B,CACxB/lB,IADwB,EAExBgmB,QAFwB,EAGxBf,QAHwB,EAIC;AACzBjlB,IAAAA,IAAI,CAACimB,MAAL,GAAcD,QAAd;;AAGA,QAAI,KAAKE,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAACpb,KAAjC,EAAwC;AACtCwG,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKmU,0BAAL,EAAV;AACA9lB,MAAAA,IAAI,CAACqT,GAAL,GAAW,KAAK+M,wBAAL,EAAX;AACD,KAHD,MAGO;AACLpgB,MAAAA,IAAI,CAAC2R,EAAL,GAAU,IAAV;AACA3R,MAAAA,IAAI,CAACqT,GAAL,GAAW,KAAKoN,aAAL,EAAX;AACD;;AACD,SAAKD,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACAmH,IAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0R,wBAAL,EAAb;AACApgB,IAAAA,IAAI,CAACilB,QAAL,GAAgBA,QAAhB;AAEA,WAAO,KAAK3S,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmmB,EAAAA,+BAA+B,CAC7BnmB,IAD6B,EAE7BgmB,QAF6B,EAGC;AAC9BhmB,IAAAA,IAAI,CAACimB,MAAL,GAAcD,QAAd;AAEAhmB,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKmU,0BAAL,EAAV;AACA,SAAKtF,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACA,SAAK2nB,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;;AACA,QAAI,KAAK0oB,YAAL,CAAkB,GAAlB,KAA0B,KAAKriB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAA9B,EAAqD;AACnD4G,MAAAA,IAAI,CAACoQ,MAAL,GAAc,IAAd;AACApQ,MAAAA,IAAI,CAACwT,QAAL,GAAgB,KAAhB;AACAxT,MAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0X,4BAAL,CACX,KAAK5W,WAAL,CAAiBxP,IAAI,CAACtB,KAAtB,EAA6BsB,IAAI,CAACgB,GAAL,CAAStC,KAAtC,CADW,CAAb;AAGD,KAND,MAMO;AACLsB,MAAAA,IAAI,CAACoQ,MAAL,GAAc,KAAd;;AACA,UAAI,KAAKyQ,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzBqG,QAAAA,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AACD;;AACDxT,MAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0R,wBAAL,EAAb;AACD;;AACD,WAAO,KAAK9N,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDomB,EAAAA,4BAA4B,CAC1BpmB,IAD0B,EAEI;AAC9BA,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AACApC,IAAAA,IAAI,CAAC2hB,IAAL,GAAY,IAAZ;AACA3hB,IAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACAvR,IAAAA,IAAI,CAAC4hB,IAAL,GAAY,IAAZ;;AAEA,QAAI,KAAKL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD;;AAED,SAAKhB,MAAL,CAAY5L,OAAE,CAACxb,MAAf;;AACA,QAAI,KAAK8F,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAAJ,EAA0B;AACxBiD,MAAAA,IAAI,CAAC4hB,IAAL,GAAY,KAAKyE,0BAAL,CAA4C,IAA5C,CAAZ;AAEArmB,MAAAA,IAAI,CAAC4hB,IAAL,CAAU/pB,IAAV,GAAiB,IAAjB;;AACA,UAAI,CAAC,KAAKqH,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAL,EAA4B;AAC1B,aAAKmnB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,WAAO,CAAC,KAAK4F,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAD,IAA0B,CAAC,KAAK6F,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAlC,EAA2D;AACzDiG,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAKmlB,0BAAL,CAAgC,KAAhC,CAAjB;;AACA,UAAI,CAAC,KAAKnnB,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAL,EAA4B;AAC1B,aAAKmnB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AAED,QAAI,KAAKunB,GAAL,CAASjM,OAAE,CAAC7a,QAAZ,CAAJ,EAA2B;AACzBiG,MAAAA,IAAI,CAAC2hB,IAAL,GAAY,KAAK0E,0BAAL,CAAgC,KAAhC,CAAZ;AACD;;AACD,SAAK7F,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA2G,IAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKzB,wBAAL,EAAlB;AAEA,WAAO,KAAK9N,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDsmB,EAAAA,+BAA+B,CAC7BtmB,IAD6B,EAE7BgmB,QAF6B,EAGC;AAC9B,UAAMO,SAAS,GAAG,KAAKpU,SAAL,EAAlB;AACAnS,IAAAA,IAAI,CAACimB,MAAL,GAAcD,QAAd;AACAhmB,IAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0X,4BAAL,CAAkCG,SAAlC,CAAb;AACA,WAAO,KAAKjU,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED+jB,EAAAA,mBAAmB,CAAC;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,UAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,UAJkB;AAKlBC,IAAAA;AALkB,GAAD,EAYY;AAC7B,UAAM9D,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,SAAKtf,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AAEA,UAAM/e,SAAS,GAAG,KAAK2Q,SAAL,EAAlB;AAEA3Q,IAAAA,SAAS,CAACglB,cAAV,GAA2B,EAA3B;AACAhlB,IAAAA,SAAS,CAACU,UAAV,GAAuB,EAAvB;AACAV,IAAAA,SAAS,CAACilB,QAAV,GAAqB,EAArB;AACAjlB,IAAAA,SAAS,CAACklB,aAAV,GAA0B,EAA1B;AAEA,QAAIC,QAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;;AACA,QAAI5C,UAAU,IAAI,KAAK/kB,KAAL,CAAW0V,OAAE,CAAC5b,SAAd,CAAlB,EAA4C;AAC1C,WAAKwnB,MAAL,CAAY5L,OAAE,CAAC5b,SAAf;AACA2tB,MAAAA,QAAQ,GAAG/R,OAAE,CAACzb,SAAd;AACAytB,MAAAA,KAAK,GAAG,IAAR;AACD,KAJD,MAIO;AACL,WAAKpG,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AACA4tB,MAAAA,QAAQ,GAAG/R,OAAE,CAAC1b,MAAd;AACA0tB,MAAAA,KAAK,GAAG,KAAR;AACD;;AAEDplB,IAAAA,SAAS,CAAColB,KAAV,GAAkBA,KAAlB;;AAEA,WAAO,CAAC,KAAK1nB,KAAL,CAAWynB,QAAX,CAAR,EAA8B;AAC5B,UAAIX,QAAQ,GAAG,KAAf;AACA,UAAIc,UAAmB,GAAG,IAA1B;AACA,UAAIC,YAAqB,GAAG,IAA5B;AACA,YAAM/mB,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AAEA,UAAIgS,UAAU,IAAI,KAAK5B,YAAL,CAAkB,OAAlB,CAAlB,EAA8C;AAC5C,cAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACpb,KAAtB,IAA+B0sB,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACjb,QAAzD,EAAmE;AACjE,eAAK8c,IAAL;AACAqQ,UAAAA,UAAU,GAAG,KAAK7lB,KAAL,CAAWvC,KAAxB;AACAslB,UAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AAED,UAAIA,WAAW,IAAI,KAAKzB,YAAL,CAAkB,QAAlB,CAAnB,EAAgD;AAC9C,cAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAGA,YAAIA,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACpb,KAAtB,IAA+B0sB,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACjb,QAAzD,EAAmE;AACjE,eAAK8c,IAAL;AACAuP,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,YAAMf,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;;AAEA,UAAI,KAAKrE,GAAL,CAASjM,OAAE,CAAClc,QAAZ,CAAJ,EAA2B;AACzB,YAAIouB,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AACD,YAAI,KAAKjG,GAAL,CAASjM,OAAE,CAAClc,QAAZ,CAAJ,EAA2B;AACzB,cAAIusB,QAAJ,EAAc;AACZ,iBAAKrC,UAAL,CAAgBqC,QAAQ,CAACvmB,KAAzB;AACD;;AACD8C,UAAAA,SAAS,CAACklB,aAAV,CAAwBxlB,IAAxB,CACE,KAAKilB,+BAAL,CAAqCnmB,IAArC,EAA2CgmB,QAA3C,CADF;AAGD,SAPD,MAOO;AACLxkB,UAAAA,SAAS,CAACilB,QAAV,CAAmBvlB,IAAnB,CACE,KAAK6kB,0BAAL,CAAgC/lB,IAAhC,EAAsCgmB,QAAtC,EAAgDf,QAAhD,CADF;AAGD;AACF,OAhBD,MAgBO,IAAI,KAAK/lB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KAAyB,KAAKmoB,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;AAC1D,YAAIuF,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AACD,YAAI7B,QAAJ,EAAc;AACZ,eAAKrC,UAAL,CAAgBqC,QAAQ,CAACvmB,KAAzB;AACD;;AACD8C,QAAAA,SAAS,CAACglB,cAAV,CAAyBtlB,IAAzB,CACE,KAAKolB,+BAAL,CAAqCtmB,IAArC,EAA2CgmB,QAA3C,CADF;AAGD,OAVM,MAUA;AACL,YAAI5T,IAAI,GAAG,MAAX;;AAEA,YAAI,KAAKmQ,YAAL,CAAkB,KAAlB,KAA4B,KAAKA,YAAL,CAAkB,KAAlB,CAAhC,EAA0D;AACxD,gBAAM2D,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AACA,cACEA,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAAC/c,IAAtB,IACAquB,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACrc,MADtB,IAEA2tB,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAACzc,GAHxB,EAIE;AACAia,YAAAA,IAAI,GAAG,KAAKnR,KAAL,CAAWyN,KAAlB;AACA,iBAAK+H,IAAL;AACD;AACF;;AAED,cAAMuQ,aAAa,GAAG,KAAKC,2BAAL,CACpBjnB,IADoB,EAEpBgmB,QAFoB,EAGpBc,UAHoB,EAIpB7B,QAJoB,EAKpB7S,IALoB,EAMpB8R,WANoB,EAOpBE,YAPoB,WAOpBA,YAPoB,GAOJ,CAACwC,KAPG,CAAtB;;AAUA,YAAII,aAAa,KAAK,IAAtB,EAA4B;AAC1BH,UAAAA,OAAO,GAAG,IAAV;AACAE,UAAAA,YAAY,GAAG,KAAK9lB,KAAL,CAAW6L,YAA1B;AACD,SAHD,MAGO;AACLtL,UAAAA,SAAS,CAACU,UAAV,CAAqBhB,IAArB,CAA0B8lB,aAA1B;AACD;AACF;;AAED,WAAKE,uBAAL;;AAEA,UACEH,YAAY,IACZ,CAAC,KAAK7nB,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CADD,IAEA,CAAC,KAAKgG,KAAL,CAAW0V,OAAE,CAACzb,SAAd,CAHH,EAIE;AACA,aAAKgU,KAAL,CACE4Z,YADF,EAEElL,UAAU,CAACqC,iCAFb;AAID;AACF;;AAED,SAAKsC,MAAL,CAAYmG,QAAZ;;AAOA,QAAIzC,WAAJ,EAAiB;AACf1iB,MAAAA,SAAS,CAACqlB,OAAV,GAAoBA,OAApB;AACD;;AAED,UAAMM,GAAG,GAAG,KAAK7U,UAAL,CAAgB9Q,SAAhB,EAA2B,sBAA3B,CAAZ;AAEA,SAAKP,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AAEA,WAAO6G,GAAP;AACD;;AAEDF,EAAAA,2BAA2B,CACzBjnB,IADyB,EAEzBgmB,QAFyB,EAGzBc,UAHyB,EAIzB7B,QAJyB,EAKzB7S,IALyB,EAMzB8R,WANyB,EAOzBE,YAPyB,EAQ2C;AACpE,QAAI,KAAKvD,GAAL,CAASjM,OAAE,CAAC7a,QAAZ,CAAJ,EAA2B;AACzB,YAAMqtB,cAAc,GAClB,KAAKloB,KAAL,CAAW0V,OAAE,CAACtb,KAAd,KACA,KAAK4F,KAAL,CAAW0V,OAAE,CAACrb,IAAd,CADA,IAEA,KAAK2F,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAFA,IAGA,KAAKgG,KAAL,CAAW0V,OAAE,CAACzb,SAAd,CAJF;;AAMA,UAAIiuB,cAAJ,EAAoB;AAClB,YAAI,CAAClD,WAAL,EAAkB;AAChB,eAAK/W,KAAL,CACE,KAAKlM,KAAL,CAAW6L,YADb,EAEE+O,UAAU,CAACqB,sBAFb;AAID,SALD,MAKO,IAAI,CAACkH,YAAL,EAAmB;AACxB,eAAKjX,KAAL,CAAW,KAAKlM,KAAL,CAAW6L,YAAtB,EAAoC+O,UAAU,CAACoB,kBAA/C;AACD;;AACD,YAAIgI,QAAJ,EAAc;AACZ,eAAK9X,KAAL,CAAW8X,QAAQ,CAACvmB,KAApB,EAA2Bmd,UAAU,CAACsB,eAAtC;AACD;;AAED,eAAO,IAAP;AACD;;AAED,UAAI,CAAC+G,WAAL,EAAkB;AAChB,aAAK/W,KAAL,CAAW,KAAKlM,KAAL,CAAW6L,YAAtB,EAAoC+O,UAAU,CAACyC,oBAA/C;AACD;;AACD,UAAIwI,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AACD,UAAI7B,QAAJ,EAAc;AACZ,aAAK9X,KAAL,CAAW8X,QAAQ,CAACvmB,KAApB,EAA2Bmd,UAAU,CAAC6B,cAAtC;AACD;;AAED1d,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK5G,aAAL,EAAhB;AACA,aAAO,KAAKnO,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAnCD,MAmCO;AACLA,MAAAA,IAAI,CAACqT,GAAL,GAAW,KAAKyS,0BAAL,EAAX;AACA9lB,MAAAA,IAAI,CAACimB,MAAL,GAAcD,QAAd;AACAhmB,MAAAA,IAAI,CAACsnB,KAAL,GAAaR,UAAU,IAAI,IAA3B;AACA9mB,MAAAA,IAAI,CAACoS,IAAL,GAAYA,IAAZ;AAEA,UAAIoB,QAAQ,GAAG,KAAf;;AACA,UAAI,KAAK+N,YAAL,CAAkB,GAAlB,KAA0B,KAAKriB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAA9B,EAAqD;AAEnD4G,QAAAA,IAAI,CAACoQ,MAAL,GAAc,IAAd;;AAEA,YAAI0W,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKlE,UAAL,CAAgBkE,UAAhB;AACD;;AACD,YAAI7B,QAAJ,EAAc;AACZ,eAAKrC,UAAL,CAAgBqC,QAAQ,CAACvmB,KAAzB;AACD;;AAEDsB,QAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0X,4BAAL,CACX,KAAK5W,WAAL,CAAiBxP,IAAI,CAACtB,KAAtB,EAA6BsB,IAAI,CAACgB,GAAL,CAAStC,KAAtC,CADW,CAAb;;AAGA,YAAI0T,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC;AACpC,eAAKmV,2BAAL,CAAiCvnB,IAAjC;AACD;;AAED,YACE,CAACkkB,WAAD,IACAlkB,IAAI,CAACqT,GAAL,CAASxb,IAAT,KAAkB,aADlB,IAEAmI,IAAI,CAAC0O,KAAL,CAAWkT,IAHb,EAIE;AACA,eAAKzU,KAAL,CACEnN,IAAI,CAAC0O,KAAL,CAAWkT,IAAX,CAAgBljB,KADlB,EAEEmd,UAAU,CAAC+B,4BAFb;AAID;AACF,OA5BD,MA4BO;AACL,YAAIxL,IAAI,KAAK,MAAb,EAAqB,KAAKwQ,UAAL;AAErB5iB,QAAAA,IAAI,CAACoQ,MAAL,GAAc,KAAd;;AAEA,YAAI,KAAKyQ,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzB6Z,UAAAA,QAAQ,GAAG,IAAX;AACD;;AACDxT,QAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAK0R,wBAAL,EAAb;AACApgB,QAAAA,IAAI,CAACilB,QAAL,GAAgBA,QAAhB;AACD;;AAEDjlB,MAAAA,IAAI,CAACwT,QAAL,GAAgBA,QAAhB;AAEA,aAAO,KAAKlB,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;AACF;;AAIDunB,EAAAA,2BAA2B,CACzBC,QADyB,EAEnB;AACN,UAAMC,UAAU,GAAGD,QAAQ,CAACpV,IAAT,KAAkB,KAAlB,GAA0B,CAA1B,GAA8B,CAAjD;AACA,UAAM1T,KAAK,GAAG8oB,QAAQ,CAAC9oB,KAAvB;AACA,UAAMkC,MAAM,GACV4mB,QAAQ,CAAC9Y,KAAT,CAAetM,MAAf,CAAsBxB,MAAtB,IAAgC4mB,QAAQ,CAAC9Y,KAAT,CAAeiT,IAAf,GAAsB,CAAtB,GAA0B,CAA1D,CADF;;AAGA,QAAI6F,QAAQ,CAAC9Y,KAAT,CAAekT,IAAnB,EAAyB;AACvB,WAAKzU,KAAL,CACEqa,QAAQ,CAAC9Y,KAAT,CAAekT,IAAf,CAAoBljB,KADtB,EAEE8oB,QAAQ,CAACpV,IAAT,KAAkB,KAAlB,GACIyJ,UAAU,CAACkB,yBADf,GAEIlB,UAAU,CAAC4B,yBAJjB;AAMD;;AAED,QAAI7c,MAAM,KAAK6mB,UAAf,EAA2B;AACzB,UAAID,QAAQ,CAACpV,IAAT,KAAkB,KAAtB,EAA6B;AAC3B,aAAKjF,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC/P,cAAzB;AACD,OAFD,MAEO;AACL,aAAK4J,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC9P,cAAzB;AACD;AACF;;AAED,QAAIgkB,QAAQ,CAACpV,IAAT,KAAkB,KAAlB,IAA2BoV,QAAQ,CAAC9Y,KAAT,CAAeiT,IAA9C,EAAoD;AAClD,WAAKxU,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC7P,sBAAzB;AACD;AACF;;AAEDyjB,EAAAA,uBAAuB,GAAS;AAC9B,QACE,CAAC,KAAKrG,GAAL,CAASjM,OAAE,CAACrb,IAAZ,CAAD,IACA,CAAC,KAAKsnB,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CADD,IAEA,CAAC,KAAK4F,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAFD,IAGA,CAAC,KAAKgG,KAAL,CAAW0V,OAAE,CAACzb,SAAd,CAJH,EAKE;AACA,WAAKypB,UAAL;AACD;AACF;;AAEDyB,EAAAA,gCAAgC,CAC9BrR,QAD8B,EAE9BnG,QAF8B,EAG9B8E,EAH8B,EAIC;AAC/BqB,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAK/R,KAAL,CAAWvC,KAAlC;AACAmO,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAK5L,KAAL,CAAW4L,QAAlC;AACA,QAAI7M,IAAI,GAAG2R,EAAE,IAAI,KAAK+R,6BAAL,CAAmC,IAAnC,CAAjB;;AAEA,WAAO,KAAK7C,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAP,EAAyB;AACvB,YAAMguB,KAAK,GAAG,KAAKlY,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAd;AACA6a,MAAAA,KAAK,CAACC,aAAN,GAAsB3nB,IAAtB;AACA0nB,MAAAA,KAAK,CAAC/V,EAAN,GAAW,KAAK+R,6BAAL,CAAmC,IAAnC,CAAX;AACA1jB,MAAAA,IAAI,GAAG,KAAKsS,UAAL,CAAgBoV,KAAhB,EAAuB,yBAAvB,CAAP;AACD;;AAED,WAAO1nB,IAAP;AACD;;AAED4nB,EAAAA,oBAAoB,CAClB5U,QADkB,EAElBnG,QAFkB,EAGlB8E,EAHkB,EAIW;AAC7B,UAAM3R,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AAEA7M,IAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACAvR,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK0S,gCAAL,CAAsCrR,QAAtC,EAAgDnG,QAAhD,EAA0D8E,EAA1D,CAAV;;AAEA,QAAI,KAAK4P,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAK+S,mCAAL,EAAtB;AACD;;AAED,WAAO,KAAKhS,UAAL,CAAgBtS,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED6nB,EAAAA,mBAAmB,GAA+B;AAChD,UAAM7nB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKqO,MAAL,CAAY5L,OAAE,CAAClX,OAAf;AACAsC,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKS,oBAAL,EAAhB;AACA,WAAO,KAAKxV,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED+nB,EAAAA,kBAAkB,GAA8B;AAC9C,UAAM/nB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAAC9H,KAAL,GAAa,EAAb;AACA,SAAKsoB,MAAL,CAAY5L,OAAE,CAAClc,QAAf;;AAEA,WAAO,KAAKuI,KAAL,CAAW2L,GAAX,GAAiB,KAAKhM,MAAtB,IAAgC,CAAC,KAAK1B,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAxC,EAAiE;AAC/DmH,MAAAA,IAAI,CAAC9H,KAAL,CAAWgJ,IAAX,CAAgB,KAAKuf,aAAL,EAAhB;AACA,UAAI,KAAKvhB,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAJ,EAA6B;AAC7B,WAAK2nB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;;AACD,SAAKknB,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACA,WAAO,KAAKyZ,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDqmB,EAAAA,0BAA0B,CAAC2B,KAAD,EAA0C;AAClE,QAAInwB,IAAI,GAAG,IAAX;AACA,QAAI2b,QAAQ,GAAG,KAAf;AACA,QAAIsO,cAAc,GAAG,IAArB;AACA,UAAM9hB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAM8V,EAAE,GAAG,KAAK/B,SAAL,EAAX;AACA,UAAMgC,MAAM,GAAG,KAAKjnB,KAAL,CAAWgB,IAAX,KAAoB2S,OAAE,CAAC7X,KAAtC;;AAEA,QAAIkrB,EAAE,CAAChmB,IAAH,KAAY2S,OAAE,CAACpb,KAAf,IAAwByuB,EAAE,CAAChmB,IAAH,KAAY2S,OAAE,CAACjb,QAA3C,EAAqD;AACnD,UAAIuuB,MAAM,IAAI,CAACF,KAAf,EAAsB;AACpB,aAAK7a,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuBmd,UAAU,CAACiC,oBAAlC;AACD;;AACDjmB,MAAAA,IAAI,GAAG,KAAKupB,eAAL,CAAqB8G,MAArB,CAAP;;AACA,UAAI,KAAKrH,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzB6Z,QAAAA,QAAQ,GAAG,IAAX;;AACA,YAAI0U,MAAJ,EAAY;AACV,eAAK/a,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuBmd,UAAU,CAACgC,yBAAlC;AACD;AACF;;AACDiE,MAAAA,cAAc,GAAG,KAAK1B,wBAAL,EAAjB;AACD,KAZD,MAYO;AACL0B,MAAAA,cAAc,GAAG,KAAKrB,aAAL,EAAjB;AACD;;AACDzgB,IAAAA,IAAI,CAACnI,IAAL,GAAYA,IAAZ;AACAmI,IAAAA,IAAI,CAACwT,QAAL,GAAgBA,QAAhB;AACAxT,IAAAA,IAAI,CAAC8hB,cAAL,GAAsBA,cAAtB;AACA,WAAO,KAAKxP,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmoB,EAAAA,kCAAkC,CAChClmB,IADgC,EAEP;AACzB,UAAMjC,IAAI,GAAG,KAAKwP,WAAL,CAAiBvN,IAAI,CAACvD,KAAtB,EAA6BuD,IAAI,CAACjB,GAAL,CAAStC,KAAtC,CAAb;AACAsB,IAAAA,IAAI,CAACnI,IAAL,GAAY,IAAZ;AACAmI,IAAAA,IAAI,CAACwT,QAAL,GAAgB,KAAhB;AACAxT,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB7f,IAAtB;AACA,WAAO,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED0hB,EAAAA,2BAA2B,CAACtf,MAAiC,GAAG,EAArC,EAIzB;AACA,QAAIuf,IAA8B,GAAG,IAArC;AACA,QAAI5kB,KAA+B,GAAG,IAAtC;;AACA,QAAI,KAAKmC,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,GAAG,KAAKspB,0BAAL,CAA4C,IAA5C,CAAR;AAEAtpB,MAAAA,KAAK,CAAClF,IAAN,GAAa,IAAb;;AACA,UAAI,CAAC,KAAKqH,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAL,EAA4B;AAC1B,aAAKmnB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,WAAO,CAAC,KAAK4F,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAD,IAA0B,CAAC,KAAK6F,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAlC,EAA2D;AACzDqI,MAAAA,MAAM,CAAClB,IAAP,CAAY,KAAKmlB,0BAAL,CAAgC,KAAhC,CAAZ;;AACA,UAAI,CAAC,KAAKnnB,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAL,EAA4B;AAC1B,aAAKmnB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,QAAI,KAAKunB,GAAL,CAASjM,OAAE,CAAC7a,QAAZ,CAAJ,EAA2B;AACzB4nB,MAAAA,IAAI,GAAG,KAAK0E,0BAAL,CAAgC,KAAhC,CAAP;AACD;;AACD,WAAO;AAAEjkB,MAAAA,MAAF;AAAUuf,MAAAA,IAAV;AAAgB5kB,MAAAA;AAAhB,KAAP;AACD;;AAEDqrB,EAAAA,yBAAyB,CACvBpV,QADuB,EAEvBnG,QAFuB,EAGvB7M,IAHuB,EAIvB2R,EAJuB,EAKD;AACtB,YAAQA,EAAE,CAAC9Z,IAAX;AACE,WAAK,KAAL;AACE,eAAO,KAAKya,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;;AAEF,WAAK,MAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,uBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,aAAKwkB,kBAAL,CAAwB7S,EAAE,CAAC9Z,IAA3B;AACA,eAAO,KAAK+vB,oBAAL,CAA0B5U,QAA1B,EAAoCnG,QAApC,EAA8C8E,EAA9C,CAAP;AAzBJ;AA2BD;;AAKDmW,EAAAA,oBAAoB,GAAyB;AAC3C,UAAM9U,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAM7M,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,QAAIsP,GAAJ;AACA,QAAIxf,IAAJ;AACA,QAAIomB,aAAa,GAAG,KAApB;AACA,UAAM5C,qBAAqB,GAAG,KAAKxkB,KAAL,CAAWykB,kBAAzC;;AAEA,YAAQ,KAAKzkB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC/c,IAAR;AACE,YAAI,KAAK0qB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAClC,iBAAO,KAAKsD,sBAAL,EAAP;AACD;;AAED,eAAO,KAAKuC,yBAAL,CACLpV,QADK,EAELnG,QAFK,EAGL7M,IAHK,EAIL,KAAKohB,eAAL,EAJK,CAAP;;AAOF,WAAKxM,OAAE,CAAC7b,MAAR;AACE,eAAO,KAAKgrB,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,KAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAKxP,OAAE,CAAC5b,SAAR;AACE,eAAO,KAAK+qB,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,IAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAKxP,OAAE,CAAClc,QAAR;AACE,aAAKuI,KAAL,CAAWykB,kBAAX,GAAgC,KAAhC;AACAzjB,QAAAA,IAAI,GAAG,KAAK8lB,kBAAL,EAAP;AACA,aAAK9mB,KAAL,CAAWykB,kBAAX,GAAgCD,qBAAhC;AACA,eAAOxjB,IAAP;;AAEF,WAAK2S,OAAE,CAACzZ,UAAR;AACE,YAAI,KAAK8F,KAAL,CAAWyN,KAAX,KAAqB,GAAzB,EAA8B;AAC5B1O,UAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACA,eAAKhB,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACAqoB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACA1hB,UAAAA,IAAI,CAACoC,MAAL,GAAcqf,GAAG,CAACrf,MAAlB;AACApC,UAAAA,IAAI,CAAC2hB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA3hB,UAAAA,IAAI,CAAC4hB,IAAL,GAAYH,GAAG,CAAC1kB,KAAhB;AACA,eAAKyjB,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA,eAAKmnB,MAAL,CAAY5L,OAAE,CAAC/a,KAAf;AAEAmG,UAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AAEA,iBAAO,KAAKnO,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AACD;;AAEF,WAAK4U,OAAE,CAACxb,MAAR;AACE,aAAKqd,IAAL;;AAGA,YAAI,CAAC,KAAKvX,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAD,IAA0B,CAAC,KAAK6F,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAA/B,EAAwD;AACtD,cAAI,KAAKmF,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,KAAKqH,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAA3B,EAAiD;AAC/C,kBAAMhF,KAAK,GAAG,KAAKmuB,SAAL,GAAiBjkB,IAA/B;AACAomB,YAAAA,aAAa,GAAGtwB,KAAK,KAAK6c,OAAE,CAACjb,QAAb,IAAyB5B,KAAK,KAAK6c,OAAE,CAACpb,KAAtD;AACD,WAHD,MAGO;AACL6uB,YAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,YAAIA,aAAJ,EAAmB;AACjB,eAAKpnB,KAAL,CAAWykB,kBAAX,GAAgC,KAAhC;AACAzjB,UAAAA,IAAI,GAAG,KAAKwe,aAAL,EAAP;AACA,eAAKxf,KAAL,CAAWykB,kBAAX,GAAgCD,qBAAhC;;AAGA,cACE,KAAKxkB,KAAL,CAAWykB,kBAAX,IACA,EACE,KAAKxmB,KAAL,CAAW0V,OAAE,CAACtb,KAAd,KACC,KAAK4F,KAAL,CAAW0V,OAAE,CAACvb,MAAd,KAAyB,KAAK6sB,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAAC/a,KAFzD,CAFF,EAME;AACA,iBAAK2mB,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA,mBAAO4I,IAAP;AACD,WATD,MASO;AAEL,iBAAK4e,GAAL,CAASjM,OAAE,CAACtb,KAAZ;AACD;AACF;;AAED,YAAI2I,IAAJ,EAAU;AACRwf,UAAAA,GAAG,GAAG,KAAKC,2BAAL,CAAiC,CACrC,KAAKyG,kCAAL,CAAwClmB,IAAxC,CADqC,CAAjC,CAAN;AAGD,SAJD,MAIO;AACLwf,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACD;;AAED1hB,QAAAA,IAAI,CAACoC,MAAL,GAAcqf,GAAG,CAACrf,MAAlB;AACApC,QAAAA,IAAI,CAAC2hB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA3hB,QAAAA,IAAI,CAAC4hB,IAAL,GAAYH,GAAG,CAAC1kB,KAAhB;AAEA,aAAKyjB,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA,aAAKmnB,MAAL,CAAY5L,OAAE,CAAC/a,KAAf;AAEAmG,QAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AAEAzgB,QAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AAEA,eAAO,KAAKe,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAACrc,MAAR;AACE,eAAO,KAAKwW,YAAL,CACL,KAAK9N,KAAL,CAAWyN,KADN,EAEL,6BAFK,CAAP;;AAKF,WAAKkG,OAAE,CAACtX,KAAR;AACA,WAAKsX,OAAE,CAACrX,MAAR;AACEyC,QAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKxP,KAAL,CAAW0V,OAAE,CAACtX,KAAd,CAAb;AACA,aAAKmZ,IAAL;AACA,eAAO,KAAKnE,UAAL,CACLtS,IADK,EAEL,8BAFK,CAAP;;AAKF,WAAK4U,OAAE,CAACvZ,OAAR;AACE,YAAI,KAAK4F,KAAL,CAAWyN,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,eAAK+H,IAAL;;AACA,cAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAACzc,GAAd,CAAJ,EAAwB;AACtB,mBAAO,KAAKmwB,kBAAL,CACL,CAAC,KAAKrnB,KAAL,CAAWyN,KADP,EAEL,6BAFK,EAGL1O,IAHK,CAAP;AAKD;;AAED,cAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACxc,MAAd,CAAJ,EAA2B;AACzB,mBAAO,KAAKkwB,kBAAL,CACL,CAAC,KAAKrnB,KAAL,CAAWyN,KADP,EAEL,6BAFK,EAGL1O,IAHK,CAAP;AAKD;;AAED,gBAAM,KAAKmN,KAAL,CACJ,KAAKlM,KAAL,CAAWvC,KADP,EAEJmd,UAAU,CAAC0C,4BAFP,CAAN;AAID;;AAED,cAAM,KAAKqE,UAAL,EAAN;;AACF,WAAKhO,OAAE,CAACzc,GAAR;AACE,eAAO,KAAK4W,YAAL,CACL,KAAK9N,KAAL,CAAWyN,KADN,EAEL,6BAFK,CAAP;;AAKF,WAAKkG,OAAE,CAACxc,MAAR;AACE,eAAO,KAAK2W,YAAL,CACL,KAAK9N,KAAL,CAAWyN,KADN,EAEL,6BAFK,CAAP;;AAKF,WAAKkG,OAAE,CAACjX,KAAR;AACE,aAAK8Y,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAACvX,KAAR;AACE,aAAKoZ,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,2BAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAAC7X,KAAR;AACE,aAAK0Z,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAACrZ,IAAR;AACE,aAAKkb,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,YAAI,KAAKiB,KAAL,CAAWgB,IAAX,CAAgB3K,OAAhB,KAA4B,QAAhC,EAA0C;AACxC,iBAAO,KAAKuwB,mBAAL,EAAP;AACD,SAFD,MAEO,IAAI,KAAK5mB,KAAL,CAAWgB,IAAX,CAAgB3K,OAApB,EAA6B;AAClC,gBAAMF,KAAK,GAAG,KAAK6J,KAAL,CAAWgB,IAAX,CAAgB7K,KAA9B;AACA,eAAKqf,IAAL;AACA,iBAAO,MAAM8R,gBAAN,CAAuBvoB,IAAvB,EAA6B5I,KAA7B,CAAP;AACD;;AA3LL;;AA8LA,UAAM,KAAKwrB,UAAL,EAAN;AACD;;AAED4F,EAAAA,oBAAoB,GAAyB;AAC3C,UAAMxV,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,QAAI5K,IAAI,GAAG,KAAK6lB,oBAAL,EAAX;AACA,QAAIW,yBAAyB,GAAG,KAAhC;;AACA,WACE,CAAC,KAAKvpB,KAAL,CAAW0V,OAAE,CAAClc,QAAd,KAA2B,KAAKwG,KAAL,CAAW0V,OAAE,CAAChb,WAAd,CAA5B,KACA,CAAC,KAAK8uB,kBAAL,EAFH,EAGE;AACA,YAAM1oB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,YAAM2G,QAAQ,GAAG,KAAKqN,GAAL,CAASjM,OAAE,CAAChb,WAAZ,CAAjB;AACA6uB,MAAAA,yBAAyB,GAAGA,yBAAyB,IAAIjV,QAAzD;AACA,WAAKgN,MAAL,CAAY5L,OAAE,CAAClc,QAAf;;AACA,UAAI,CAAC8a,QAAD,IAAa,KAAKtU,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAjB,EAA0C;AACxCmH,QAAAA,IAAI,CAAC2oB,WAAL,GAAmB1mB,IAAnB;AACA,aAAKwU,IAAL;AACAxU,QAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD,OAJD,MAIO;AACLA,QAAAA,IAAI,CAAC4oB,UAAL,GAAkB3mB,IAAlB;AACAjC,QAAAA,IAAI,CAAC6oB,SAAL,GAAiB,KAAKpI,aAAL,EAAjB;AACA,aAAKD,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;;AACA,YAAI4vB,yBAAJ,EAA+B;AAC7BzoB,UAAAA,IAAI,CAACwT,QAAL,GAAgBA,QAAhB;AACAvR,UAAAA,IAAI,GAAG,KAAKqQ,UAAL,CACLtS,IADK,EAEL,2BAFK,CAAP;AAID,SAND,MAMO;AACLiC,UAAAA,IAAI,GAAG,KAAKqQ,UAAL,CACLtS,IADK,EAEL,mBAFK,CAAP;AAID;AACF;AACF;;AACD,WAAOiC,IAAP;AACD;;AAED6mB,EAAAA,mBAAmB,GAAyB;AAC1C,UAAM9oB,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AACA,QAAI,KAAK0O,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzBqG,MAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKgH,mBAAL,EAAtB;AACA,aAAO,KAAKxW,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAKwoB,oBAAL,EAAP;AACD;AACF;;AAEDO,EAAAA,kCAAkC,GAAyB;AACzD,UAAMC,KAAK,GAAG,KAAKF,mBAAL,EAAd;;AACA,QAAI,CAAC,KAAK7nB,KAAL,CAAWykB,kBAAZ,IAAkC,KAAK7E,GAAL,CAASjM,OAAE,CAAC/a,KAAZ,CAAtC,EAA0D;AAExD,YAAMmG,IAAI,GAAG,KAAKwP,WAAL,CAAiBwZ,KAAK,CAACtqB,KAAvB,EAA8BsqB,KAAK,CAAChoB,GAAN,CAAUtC,KAAxC,CAAb;AACAsB,MAAAA,IAAI,CAACoC,MAAL,GAAc,CAAC,KAAK+lB,kCAAL,CAAwCa,KAAxC,CAAD,CAAd;AACAhpB,MAAAA,IAAI,CAAC2hB,IAAL,GAAY,IAAZ;AACA3hB,MAAAA,IAAI,CAAC4hB,IAAL,GAAY,IAAZ;AACA5hB,MAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKpB,aAAL,EAAlB;AACAzgB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACA,aAAO,KAAKe,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AACD,WAAOgpB,KAAP;AACD;;AAEDC,EAAAA,yBAAyB,GAAyB;AAChD,UAAMjpB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAK0O,GAAL,CAASjM,OAAE,CAAC3Z,UAAZ;AACA,UAAMgH,IAAI,GAAG,KAAK8mB,kCAAL,EAAb;AACA/oB,IAAAA,IAAI,CAAC9H,KAAL,GAAa,CAAC+J,IAAD,CAAb;;AACA,WAAO,KAAK4e,GAAL,CAASjM,OAAE,CAAC3Z,UAAZ,CAAP,EAAgC;AAC9B+E,MAAAA,IAAI,CAAC9H,KAAL,CAAWgJ,IAAX,CAAgB,KAAK6nB,kCAAL,EAAhB;AACD;;AACD,WAAO/oB,IAAI,CAAC9H,KAAL,CAAW0I,MAAX,KAAsB,CAAtB,GACHqB,IADG,GAEH,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,4BAAtB,CAFJ;AAGD;;AAEDkpB,EAAAA,kBAAkB,GAAyB;AACzC,UAAMlpB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAK0O,GAAL,CAASjM,OAAE,CAAC7Z,SAAZ;AACA,UAAMkH,IAAI,GAAG,KAAKgnB,yBAAL,EAAb;AACAjpB,IAAAA,IAAI,CAAC9H,KAAL,GAAa,CAAC+J,IAAD,CAAb;;AACA,WAAO,KAAK4e,GAAL,CAASjM,OAAE,CAAC7Z,SAAZ,CAAP,EAA+B;AAC7BiF,MAAAA,IAAI,CAAC9H,KAAL,CAAWgJ,IAAX,CAAgB,KAAK+nB,yBAAL,EAAhB;AACD;;AACD,WAAOjpB,IAAI,CAAC9H,KAAL,CAAW0I,MAAX,KAAsB,CAAtB,GACHqB,IADG,GAEH,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAFJ;AAGD;;AAEDygB,EAAAA,aAAa,GAAyB;AACpC,UAAMH,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,SAAKtf,KAAL,CAAWsf,MAAX,GAAoB,IAApB;AACA,UAAMte,IAAI,GAAG,KAAKinB,kBAAL,EAAb;AACA,SAAKjoB,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AACA,WAAOre,IAAP;AACD;;AAED2jB,EAAAA,oCAAoC,GAAyB;AAC3D,QAAI,KAAK3kB,KAAL,CAAWgB,IAAX,KAAoB2S,OAAE,CAAC/c,IAAvB,IAA+B,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB,GAAxD,EAA6D;AAC3D,YAAMsE,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,YAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,YAAM7M,IAAI,GAAG,KAAKohB,eAAL,EAAb;AACA,aAAO,KAAKwG,oBAAL,CAA0B5U,QAA1B,EAAoCnG,QAApC,EAA8C7M,IAA9C,CAAP;AACD,KALD,MAKO;AACL,aAAO,KAAKygB,aAAL,EAAP;AACD;AACF;;AAED6C,EAAAA,uBAAuB,GAAyB;AAC9C,UAAMtjB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAK1B,wBAAL,EAAtB;AACA,WAAO,KAAK9N,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED6iB,EAAAA,kCAAkC,CAChCsG,sBADgC,EAElB;AACd,UAAMhE,KAAK,GAAGgE,sBAAsB,GAChC,KAAK/H,eAAL,EADgC,GAEhC,KAAKsC,6BAAL,EAFJ;;AAGA,QAAI,KAAKxkB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB2rB,MAAAA,KAAK,CAACrD,cAAN,GAAuB,KAAKwB,uBAAL,EAAvB;AACA,WAAKvB,gBAAL,CAAsBoD,KAAtB;AACD;;AACD,WAAOA,KAAP;AACD;;AAEDiE,EAAAA,mBAAmB,CAACppB,IAAD,EAAuB;AACxCA,IAAAA,IAAI,CAACyP,UAAL,CAAgBqS,cAAhB,GAAiC9hB,IAAI,CAAC8hB,cAAtC;AAEA,SAAKC,gBAAL,CACE/hB,IAAI,CAACyP,UADP,EAEEzP,IAAI,CAAC8hB,cAAL,CAAoBnjB,GAFtB,EAGEqB,IAAI,CAAC8hB,cAAL,CAAoB9gB,GAApB,CAAwBrC,GAH1B;AAMA,WAAOqB,IAAI,CAACyP,UAAZ;AACD;;AAEDyV,EAAAA,iBAAiB,GAAoB;AACnC,QAAID,QAAQ,GAAG,IAAf;;AACA,QAAI,KAAK/lB,KAAL,CAAW0V,OAAE,CAACvZ,OAAd,CAAJ,EAA4B;AAC1B4pB,MAAAA,QAAQ,GAAG,KAAK9S,SAAL,EAAX;;AACA,UAAI,KAAKlR,KAAL,CAAWyN,KAAX,KAAqB,GAAzB,EAA8B;AAC5BuW,QAAAA,QAAQ,CAAC7S,IAAT,GAAgB,MAAhB;AACD,OAFD,MAEO;AACL6S,QAAAA,QAAQ,CAAC7S,IAAT,GAAgB,OAAhB;AACD;;AACD,WAAKqE,IAAL;AACA,WAAKnE,UAAL,CAAgB2S,QAAhB,EAA0B,UAA1B;AACD;;AACD,WAAOA,QAAP;AACD;;AAMDpT,EAAAA,iBAAiB,CACf7R,IADe,EAEfqpB,mBAFe,EAGftX,QAAkB,GAAG,KAHN,EAIT;AACN,QAAIsX,mBAAJ,EAAyB;AACvB,aAAO,KAAKC,gCAAL,CAAsCtpB,IAAtC,EAA4C,MACjD,MAAM6R,iBAAN,CAAwB7R,IAAxB,EAA8B,IAA9B,EAAoC+R,QAApC,CADK,CAAP;AAGD;;AAED,WAAO,MAAMF,iBAAN,CAAwB7R,IAAxB,EAA8B,KAA9B,EAAqC+R,QAArC,CAAP;AACD;;AAEDwX,EAAAA,0BAA0B,CACxBvpB,IADwB,EAExBiC,IAFwB,EAGxB8P,QAAkB,GAAG,KAHG,EAIlB;AACN,QAAI,KAAK7S,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAM6nB,QAAQ,GAAG,KAAKlP,SAAL,EAAjB;AAEA,OAEEkP,QAAQ,CAACS,cAFX,EAIE9hB,IAAI,CAACghB,SAJP,IAKI,KAAKD,oCAAL,EALJ;AAOA/gB,MAAAA,IAAI,CAAC6hB,UAAL,GAAkBR,QAAQ,CAACS,cAAT,GACd,KAAKxP,UAAL,CAAgB+O,QAAhB,EAA0B,gBAA1B,CADc,GAEd,IAFJ;AAGD;;AAED,UAAMkI,0BAAN,CAAiCvpB,IAAjC,EAAuCiC,IAAvC,EAA6C8P,QAA7C;AACD;;AAGDyX,EAAAA,cAAc,CAAC3U,OAAD,EAAmB4U,QAAnB,EAAoD;AAEhE,QACE,KAAKxoB,KAAL,CAAW0U,MAAX,IACA,KAAKzW,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CADA,IAEA,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB,WAHvB,EAIE;AACA,YAAMwX,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AACA,UAAIA,SAAS,CAACjkB,IAAV,KAAmB2S,OAAE,CAAC/c,IAAtB,IAA8Bye,SAAS,CAAC4P,SAAS,CAACxX,KAAX,CAA3C,EAA8D;AAC5D,cAAM1O,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,aAAKsE,IAAL;AACA,eAAO,KAAK8N,kBAAL,CAAwBvkB,IAAxB,CAAP;AACD;AACF,KAXD,MAWO,IAAI,KAAK+f,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/D,YAAMviB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAKsE,IAAL;AACA,aAAO,KAAKiT,wBAAL,CAA8B1pB,IAA9B,CAAP;AACD;;AACD,UAAMuP,IAAI,GAAG,MAAMia,cAAN,CAAqB3U,OAArB,EAA8B4U,QAA9B,CAAb;;AAEA,QAAI,KAAK7J,UAAL,KAAoBzf,SAApB,IAAiC,CAAC,KAAKkQ,gBAAL,CAAsBd,IAAtB,CAAtC,EAAmE;AACjE,WAAKqQ,UAAL,GAAkB,IAAlB;AACD;;AACD,WAAOrQ,IAAP;AACD;;AAGDoa,EAAAA,wBAAwB,CACtB3pB,IADsB,EAEtB4pB,IAFsB,EAGC;AACvB,QAAIA,IAAI,CAAC3nB,IAAL,KAAc,YAAlB,EAAgC;AAC9B,UAAI2nB,IAAI,CAAC/xB,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YACE,KAAKqH,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,KACA,KAAKiC,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CADA,IAEA,KAAKqH,KAAL,CAAW0V,OAAE,CAACxY,SAAd,CAFA,IAGA,KAAK8C,KAAL,CAAW0V,OAAE,CAAClY,IAAd,CAHA,IAIA,KAAKwC,KAAL,CAAW0V,OAAE,CAACzX,OAAd,CALF,EAME;AACA,iBAAO,KAAK8kB,gBAAL,CAAsBjiB,IAAtB,CAAP;AACD;AACF,OAVD,MAUO,IAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AAC9B,YAAI+xB,IAAI,CAAC/xB,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAO,KAAK0sB,kBAAL,CAAwBvkB,IAAxB,CAAP;AACD,SAFD,MAEO,IAAI4pB,IAAI,CAAC/xB,IAAL,KAAc,MAAlB,EAA0B;AAC/B,iBAAO,KAAK0rB,kBAAL,CAAwBvjB,IAAxB,CAAP;AACD,SAFM,MAEA,IAAI4pB,IAAI,CAAC/xB,IAAL,KAAc,QAAlB,EAA4B;AACjC,iBAAO,KAAK2rB,mBAAL,CAAyBxjB,IAAzB,EAA+B,KAA/B,CAAP;AACD;AACF;AACF;;AAED,WAAO,MAAM2pB,wBAAN,CAA+B3pB,IAA/B,EAAqC4pB,IAArC,CAAP;AACD;;AAGDC,EAAAA,4BAA4B,GAAY;AACtC,WACE,KAAKtH,YAAL,CAAkB,MAAlB,KACA,KAAKA,YAAL,CAAkB,WAAlB,CADA,IAEA,KAAKA,YAAL,CAAkB,QAAlB,CAFA,IAGC,KAAKxC,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAH5B,IAIA,MAAMsH,4BAAN,EALF;AAOD;;AAEDC,EAAAA,wBAAwB,GAAY;AAClC,QACE,KAAK5qB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,MACC,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB,MAArB,IACC,KAAKzN,KAAL,CAAWyN,KAAX,KAAqB,WADtB,IAEC,KAAKzN,KAAL,CAAWyN,KAAX,KAAqB,QAFtB,IAGE,KAAKqR,gBAAL,MAA2B,KAAK9e,KAAL,CAAWyN,KAAX,KAAqB,MAJnD,CADF,EAME;AACA,aAAO,KAAP;AACD;;AAED,WAAO,MAAMob,wBAAN,EAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAiC;AAC3D,QAAI,KAAKhK,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AACxD,YAAMviB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAKsE,IAAL;AACA,aAAO,KAAKiT,wBAAL,CAA8B1pB,IAA9B,CAAP;AACD;;AACD,WAAO,MAAM+pB,4BAAN,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CACdJ,IADc,EAEd5W,QAFc,EAGdnG,QAHc,EAIdoG,mBAJc,EAKA;AACd,QAAI,CAAC,KAAK/T,KAAL,CAAW0V,OAAE,CAACjb,QAAd,CAAL,EAA8B,OAAOiwB,IAAP;;AAI9B,QAAI,KAAK3oB,KAAL,CAAWgpB,sBAAf,EAAuC;AACrC,YAAMC,MAAM,GAAG,KAAKC,QAAL,CAAc,MAC3B,MAAMH,gBAAN,CAAuBJ,IAAvB,EAA6B5W,QAA7B,EAAuCnG,QAAvC,CADa,CAAf;;AAIA,UAAI,CAACqd,MAAM,CAAClqB,IAAZ,EAAkB;AAChB,YAAIkqB,MAAM,CAACvc,KAAX,EAAkB;AAEhB,gBAAMyc,0BAAN,CAAiCnX,mBAAjC,EAAsDiX,MAAM,CAACvc,KAA7D;AACD;;AAED,eAAOic,IAAP;AACD;;AAED,UAAIM,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAClB,aAAOH,MAAM,CAAClqB,IAAd;AACD;;AAED,SAAKwgB,MAAL,CAAY5L,OAAE,CAACjb,QAAf;AACA,UAAMsH,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAd;AACA,UAAMC,iBAAiB,GAAG,KAAKtpB,KAAL,CAAWupB,SAArC;AACA,UAAMxqB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,QAAI;AAAE4d,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAAyB,KAAKC,6BAAL,EAA7B;AACA,QAAI,CAACC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAvB;;AAEA,QAAIC,MAAM,IAAIG,OAAO,CAACjqB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAM4pB,SAAS,GAAG,CAAC,GAAGD,iBAAJ,CAAlB;;AAEA,UAAIM,OAAO,CAACjqB,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAWupB,SAAX,GAAuBA,SAAvB;;AAEA,aAAK,IAAI7pB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkqB,OAAO,CAACjqB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC6pB,UAAAA,SAAS,CAACtpB,IAAV,CAAe2pB,OAAO,CAAClqB,CAAD,CAAP,CAAWjC,KAA1B;AACD;;AAED,SAAC;AAAE+rB,UAAAA,UAAF;AAAcC,UAAAA;AAAd,YAAyB,KAAKC,6BAAL,EAA1B;AACA,SAACC,KAAD,EAAQC,OAAR,IAAmB,KAAKC,uBAAL,CAA6BL,UAA7B,CAAnB;AACD;;AAED,UAAIC,MAAM,IAAIE,KAAK,CAAChqB,MAAN,GAAe,CAA7B,EAAgC;AAM9B,aAAKuM,KAAL,CAAWlM,KAAK,CAACvC,KAAjB,EAAwBmd,UAAU,CAACC,yBAAnC;AACD;;AAED,UAAI4O,MAAM,IAAIE,KAAK,CAAChqB,MAAN,KAAiB,CAA/B,EAAkC;AAChC,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAWupB,SAAX,GAAuBA,SAAS,CAACxZ,MAAV,CAAiB4Z,KAAK,CAAC,CAAD,CAAL,CAASlsB,KAA1B,CAAvB;AACA,SAAC;AAAE+rB,UAAAA,UAAF;AAAcC,UAAAA;AAAd,YAAyB,KAAKC,6BAAL,EAA1B;AACD;AACF;;AAED,SAAKG,uBAAL,CAA6BL,UAA7B,EAAyC,IAAzC;AAEA,SAAKxpB,KAAL,CAAWupB,SAAX,GAAuBD,iBAAvB;AACA,SAAK/J,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AAEAwG,IAAAA,IAAI,CAACuV,IAAL,GAAYqU,IAAZ;AACA5pB,IAAAA,IAAI,CAACyqB,UAAL,GAAkBA,UAAlB;AACAzqB,IAAAA,IAAI,CAAC+qB,SAAL,GAAiB,KAAKzB,gCAAL,CAAsCtpB,IAAtC,EAA4C,MAC3D,KAAKgrB,gBAAL,CAAsB7qB,SAAtB,EAAiCA,SAAjC,CADe,CAAjB;AAIA,WAAO,KAAKmS,UAAL,CAAgBtS,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED2qB,EAAAA,6BAA6B,GAG3B;AACA,SAAK1pB,KAAL,CAAWgqB,yBAAX,CAAqC/pB,IAArC,CAA0C,KAAKD,KAAL,CAAWvC,KAArD;AAEA,UAAM+rB,UAAU,GAAG,KAAKS,uBAAL,EAAnB;AACA,UAAMR,MAAM,GAAG,CAAC,KAAKxrB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAhB;AAEA,SAAKyH,KAAL,CAAWgqB,yBAAX,CAAqCnW,GAArC;AAEA,WAAO;AAAE2V,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAP;AACD;;AASDI,EAAAA,uBAAuB,CACrB9qB,IADqB,EAErBmrB,eAFqB,EAGuC;AAC5D,UAAMC,KAAK,GAAG,CAACprB,IAAD,CAAd;AACA,UAAMqrB,MAAmC,GAAG,EAA5C;;AAEA,WAAOD,KAAK,CAACxqB,MAAN,KAAiB,CAAxB,EAA2B;AACzB,YAAMZ,IAAI,GAAGorB,KAAK,CAACtW,GAAN,EAAb;;AACA,UAAI9U,IAAI,CAACiC,IAAL,KAAc,yBAAlB,EAA6C;AAC3C,YAAIjC,IAAI,CAACuR,cAAL,IAAuB,CAACvR,IAAI,CAAC6hB,UAAjC,EAA6C;AAE3C,eAAKyJ,qBAAL,CAA2BtrB,IAA3B;AACD,SAHD,MAGO;AACLqrB,UAAAA,MAAM,CAACnqB,IAAP,CAAYlB,IAAZ;AACD;;AACDorB,QAAAA,KAAK,CAAClqB,IAAN,CAAWlB,IAAI,CAAC+Q,IAAhB;AACD,OARD,MAQO,IAAI/Q,IAAI,CAACiC,IAAL,KAAc,uBAAlB,EAA2C;AAChDmpB,QAAAA,KAAK,CAAClqB,IAAN,CAAWlB,IAAI,CAACyqB,UAAhB;AACAW,QAAAA,KAAK,CAAClqB,IAAN,CAAWlB,IAAI,CAAC+qB,SAAhB;AACD;AACF;;AAED,QAAII,eAAJ,EAAqB;AACnBE,MAAAA,MAAM,CAAC7e,OAAP,CAAexM,IAAI,IAAI,KAAKsrB,qBAAL,CAA2BtrB,IAA3B,CAAvB;AACA,aAAO,CAACqrB,MAAD,EAAS,EAAT,CAAP;AACD;;AAED,WAAO9L,SAAS,CAAC8L,MAAD,EAASrrB,IAAI,IAC3BA,IAAI,CAACoC,MAAL,CAAYmpB,KAAZ,CAAkBvC,KAAK,IAAI,KAAKwC,YAAL,CAAkBxC,KAAlB,EAAyB,IAAzB,CAA3B,CADc,CAAhB;AAGD;;AAEDsC,EAAAA,qBAAqB,CAACtrB,IAAD,EAAkC;AAAA;;AACrD,SAAKyrB,gBAAL,CAGIzrB,IAAI,CAACoC,MAHT,iBAIEpC,IAAI,CAAC0P,KAJP,qBAIE,YAAYgc,aAJd,EAKc,KALd;AAQA,SAAK5Q,KAAL,CAAWF,KAAX,CAAiB9D,cAAc,GAAGC,WAAlC;AAEA,UAAM4U,WAAN,CAAkB3rB,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;AACA,SAAK8a,KAAL,CAAWD,IAAX;AACD;;AAEDyO,EAAAA,gCAAgC,CAAItpB,IAAJ,EAAkB4rB,KAAlB,EAAqC;AACnE,QAAI1B,MAAJ;;AACA,QAAI,KAAKjpB,KAAL,CAAWgqB,yBAAX,CAAqCY,OAArC,CAA6C7rB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnE,WAAKuC,KAAL,CAAWgqB,yBAAX,CAAqC/pB,IAArC,CAA0C,KAAKD,KAAL,CAAWvC,KAArD;AACAwrB,MAAAA,MAAM,GAAG0B,KAAK,EAAd;AACA,WAAK3qB,KAAL,CAAWgqB,yBAAX,CAAqCnW,GAArC;AACD,KAJD,MAIO;AACLoV,MAAAA,MAAM,GAAG0B,KAAK,EAAd;AACD;;AAED,WAAO1B,MAAP;AACD;;AAED4B,EAAAA,cAAc,CACZ9rB,IADY,EAEZgT,QAFY,EAGZnG,QAHY,EAIE;AACd7M,IAAAA,IAAI,GAAG,MAAM8rB,cAAN,CAAqB9rB,IAArB,EAA2BgT,QAA3B,EAAqCnG,QAArC,CAAP;;AACA,QAAI,KAAKgU,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzBqG,MAAAA,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AAIA,WAAKuO,gBAAL,CAAsB/hB,IAAtB;AACD;;AAED,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAMuyB,YAAY,GAAG,KAAKvc,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAArB;AACAkf,MAAAA,YAAY,CAACtc,UAAb,GAA0BzP,IAA1B;AACA+rB,MAAAA,YAAY,CAACjK,cAAb,GAA8B,KAAKwB,uBAAL,EAA9B;AAEA,aAAO,KAAKhR,UAAL,CAAgByZ,YAAhB,EAA8B,oBAA9B,CAAP;AACD;;AAED,WAAO/rB,IAAP;AACD;;AAEDgsB,EAAAA,uBAAuB,CAAChsB,IAAD,EAAe;AACpC,QACGA,IAAI,CAACiC,IAAL,KAAc,mBAAd,KACEjC,IAAI,CAACif,UAAL,KAAoB,MAApB,IAA8Bjf,IAAI,CAACif,UAAL,KAAoB,QADpD,CAAD,IAECjf,IAAI,CAACiC,IAAL,KAAc,wBAAd,IACCjC,IAAI,CAACqjB,UAAL,KAAoB,MAHtB,IAICrjB,IAAI,CAACiC,IAAL,KAAc,sBAAd,IAAwCjC,IAAI,CAACqjB,UAAL,KAAoB,MAL/D,EAME;AAGA;AACD;;AAED,UAAM2I,uBAAN,CAA8BhsB,IAA9B;AACD;;AAED4T,EAAAA,WAAW,CAAC5T,IAAD,EAA4B;AACrC,UAAMisB,IAAI,GAAG,MAAMrY,WAAN,CAAkB5T,IAAlB,CAAb;;AACA,QACEisB,IAAI,CAAChqB,IAAL,KAAc,wBAAd,IACAgqB,IAAI,CAAChqB,IAAL,KAAc,sBAFhB,EAGE;AACAgqB,MAAAA,IAAI,CAAC5I,UAAL,GAAkB4I,IAAI,CAAC5I,UAAL,IAAmB,OAArC;AACD;;AACD,WAAO4I,IAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAAClsB,IAAD,EAAiD;AACrE,QAAI,KAAKuiB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7BviB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AAEA,YAAM8I,eAAe,GAAG,KAAKha,SAAL,EAAxB;AACA,WAAKsE,IAAL;;AAEA,UAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AAEzBiH,QAAAA,IAAI,CAACqC,UAAL,GAAkB,KAAK+pB,qBAAL,EAAlB;AACA,aAAKC,eAAL,CAAqBrsB,IAArB;AACA,eAAO,IAAP;AACD,OALD,MAKO;AAEL,eAAO,KAAKujB,kBAAL,CAAwB4I,eAAxB,CAAP;AACD;AACF,KAfD,MAeO,IAAI,KAAK5J,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtCviB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AAEA,YAAM8I,eAAe,GAAG,KAAKha,SAAL,EAAxB;AACA,WAAKsE,IAAL;AAEA,aAAO,KAAK+M,mBAAL,CAAyB2I,eAAzB,EAA0C,KAA1C,CAAP;AACD,KAPM,MAOA,IAAI,KAAK5J,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzCviB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,YAAM8I,eAAe,GAAG,KAAKha,SAAL,EAAxB;AACA,WAAKsE,IAAL;AACA,aAAO,KAAK8N,kBAAL,CAAwB4H,eAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAKpM,gBAAL,MAA2B,KAAKwC,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/DviB,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,OAAlB;AACA,YAAM8I,eAAe,GAAG,KAAKha,SAAL,EAAxB;AACA,WAAKsE,IAAL;AACA,aAAO,KAAKiT,wBAAL,CAA8ByC,eAA9B,CAAP;AACD,KALM,MAKA;AACL,aAAO,MAAMD,sBAAN,CAA6BlsB,IAA7B,CAAP;AACD;AACF;;AAEDssB,EAAAA,aAAa,CAACtsB,IAAD,EAAwB;AACnC,QAAI,MAAMssB,aAAN,CAAoB,GAAGnqB,SAAvB,CAAJ,EAAuC,OAAO,IAAP;;AAEvC,QAAI,KAAKogB,YAAL,CAAkB,MAAlB,KAA6B,KAAK2D,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAACrZ,IAA9D,EAAoE;AAClEyE,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACA,WAAK5M,IAAL;AACA,WAAKA,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED8V,EAAAA,kCAAkC,CAACvsB,IAAD,EAAwB;AACxD,UAAM4M,GAAG,GAAG,KAAK3L,KAAL,CAAWvC,KAAvB;AACA,UAAM8tB,YAAY,GAAG,MAAMD,kCAAN,CAAyCvsB,IAAzC,CAArB;;AACA,QAAIwsB,YAAY,IAAIxsB,IAAI,CAACqjB,UAAL,KAAoB,MAAxC,EAAgD;AAC9C,WAAKT,UAAL,CAAgBhW,GAAhB;AACD;;AACD,WAAO4f,YAAP;AACD;;AAEDC,EAAAA,YAAY,CAACzsB,IAAD,EAAgB0sB,WAAhB,EAAsCC,UAAtC,EAA4D;AACtE,UAAMF,YAAN,CAAmBzsB,IAAnB,EAAyB0sB,WAAzB,EAAsCC,UAAtC;;AACA,QAAI,KAAKpL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD;AACF;;AAEDoL,EAAAA,gBAAgB,CACd1b,SADc,EAEd2b,MAFc,EAGd5rB,KAHc,EAIR;AACN,UAAM2L,GAAG,GAAG,KAAK3L,KAAL,CAAWvC,KAAvB;;AACA,QAAI,KAAK6jB,YAAL,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,UAAI,KAAKuK,4BAAL,CAAkC5b,SAAlC,EAA6C2b,MAA7C,CAAJ,EAA0D;AAExD;AACD;;AAEDA,MAAAA,MAAM,CAACjI,OAAP,GAAiB,IAAjB;AACD;;AAED,UAAMgI,gBAAN,CAAuB1b,SAAvB,EAAkC2b,MAAlC,EAA0C5rB,KAA1C;;AAEA,QAAI4rB,MAAM,CAACjI,OAAX,EAAoB;AAClB,UACEiI,MAAM,CAAC5qB,IAAP,KAAgB,eAAhB,IACA4qB,MAAM,CAAC5qB,IAAP,KAAgB,sBADhB,IAEA4qB,MAAM,CAAC5qB,IAAP,KAAgB,oBAHlB,EAIE;AACA,eAAKkL,KAAL,CAAWP,GAAX,EAAgBiP,UAAU,CAACI,mBAA3B;AACD,SAND,MAMO,IAAI4Q,MAAM,CAACne,KAAX,EAAkB;AACvB,aAAKvB,KAAL,CACE0f,MAAM,CAACne,KAAP,CAAahQ,KADf,EAEEmd,UAAU,CAACK,4BAFb;AAID;AACF;AACF;;AAED6Q,EAAAA,UAAU,CAAC9W,IAAD,EAAwB;AAChC,WAAOA,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,eAAvC;AACD;;AAED+W,EAAAA,YAAY,GAAS;AACnB,UAAM/W,IAAI,GAAG,MAAMgX,SAAN,EAAb;AACA,UAAMC,QAAQ,GAAG,OAAOjX,IAAxB;;AAGA,QAAI,CAAC,KAAK8W,UAAL,CAAgB9W,IAAhB,CAAD,IAA0B,CAAC,KAAKhV,KAAL,CAAWsf,MAA1C,EAAkD;AAChD,WAAKpT,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACnN,iBAAlC,EAAqD+mB,QAArD;AACD;;AAED,SAAKlN,WAAL,CAAiBpL,OAAE,CAAC/c,IAApB,EAA0Bq1B,QAA1B;AACD;;AAGDC,EAAAA,gBAAgB,CAACjvB,IAAD,EAAqB;AACnC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QAAI1O,IAAI,QAAJ,IAAqCuY,IAAI,QAA7C,EAAyE;AACvE,aAAO,KAAK2W,QAAL,CAAcxY,OAAE,CAAC5b,SAAjB,EAA4B,CAA5B,CAAP;AACD,KAFD,MAEO,IACL,KAAKiI,KAAL,CAAWsf,MAAX,KACCriB,IAAI,OAAJ,IAAkCA,IAAI,OADvC,CADK,EAGL;AACA,aAAO,KAAKkvB,QAAL,CAAcxY,OAAE,CAACzZ,UAAjB,EAA6B,CAA7B,CAAP;AACD,KALM,MAKA,IAAI,KAAK8F,KAAL,CAAWsf,MAAX,IAAqBriB,IAAI,OAA7B,EAA0D;AAC/D,UAAIuY,IAAI,OAAR,EAA4B;AAC1B,eAAO,KAAK2W,QAAL,CAAcxY,OAAE,CAAChb,WAAjB,EAA8B,CAA9B,CAAP;AACD;;AAED,aAAO,KAAKwzB,QAAL,CAAcxY,OAAE,CAACjb,QAAjB,EAA2B,CAA3B,CAAP;AACD,KANM,MAMA,IAAI4c,eAAe,CAACrY,IAAD,EAAOuY,IAAP,CAAnB,EAAiC;AACtC,WAAKxV,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,aAAO,KAAKogB,YAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAMG,gBAAN,CAAuBjvB,IAAvB,CAAP;AACD;AACF;;AAEDstB,EAAAA,YAAY,CAACxrB,IAAD,EAAeqtB,SAAf,EAA6C;AACvD,YAAQrtB,IAAI,CAACiC,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACE,eAAO,IAAP;;AAEF,WAAK,kBAAL;AAAyB;AACvB,gBAAMqrB,IAAI,GAAGttB,IAAI,CAACkC,UAAL,CAAgBtB,MAAhB,GAAyB,CAAtC;AACA,iBAAOZ,IAAI,CAACkC,UAAL,CAAgBqpB,KAAhB,CAAsB,CAAC5Y,IAAD,EAAOhS,CAAP,KAAa;AACxC,mBACEgS,IAAI,CAAC1Q,IAAL,KAAc,cAAd,KACCtB,CAAC,KAAK2sB,IAAN,IAAc3a,IAAI,CAAC1Q,IAAL,KAAc,eAD7B,KAEA,KAAKupB,YAAL,CAAkB7Y,IAAlB,CAHF;AAKD,WANM,CAAP;AAOD;;AAED,WAAK,gBAAL;AACE,eAAO,KAAK6Y,YAAL,CAAkBxrB,IAAI,CAAC0O,KAAvB,CAAP;;AAEF,WAAK,eAAL;AACE,eAAO,KAAK8c,YAAL,CAAkBxrB,IAAI,CAACqnB,QAAvB,CAAP;;AAEF,WAAK,iBAAL;AACE,eAAOrnB,IAAI,CAACQ,QAAL,CAAc+qB,KAAd,CAAoBgC,OAAO,IAAI,KAAK/B,YAAL,CAAkB+B,OAAlB,CAA/B,CAAP;;AAEF,WAAK,sBAAL;AACE,eAAOvtB,IAAI,CAACwtB,QAAL,KAAkB,GAAzB;;AAEF,WAAK,yBAAL;AACA,WAAK,oBAAL;AACE,eAAO,KAAKhC,YAAL,CAAkBxrB,IAAI,CAACyP,UAAvB,CAAP;;AAEF,WAAK,kBAAL;AACA,WAAK,0BAAL;AACE,eAAO,CAAC4d,SAAR;;AAEF;AACE,eAAO,KAAP;AAvCJ;AAyCD;;AAEDna,EAAAA,YAAY,CAAClT,IAAD,EAAemT,KAAc,GAAG,KAAhC,EAA+C;AACzD,QAAInT,IAAI,CAACiC,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMiR,YAAN,CAAmB,KAAKkW,mBAAL,CAAyBppB,IAAzB,CAAnB,EAAmDmT,KAAnD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMD,YAAN,CAAmBlT,IAAnB,EAAyBmT,KAAzB,CAAP;AACD;AACF;;AAGDsY,EAAAA,gBAAgB,CACdgC,QADc,EAEdC,gBAFc,EAGdva,KAHc,EAIa;AAC3B,SAAK,IAAIxS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8sB,QAAQ,CAAC7sB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAMipB,IAAI,GAAG6D,QAAQ,CAAC9sB,CAAD,CAArB;;AACA,UAAI,CAAAipB,IAAI,QAAJ,YAAAA,IAAI,CAAE3nB,IAAN,MAAe,oBAAnB,EAAyC;AACvCwrB,QAAAA,QAAQ,CAAC9sB,CAAD,CAAR,GAAc,KAAKyoB,mBAAL,CAAyBQ,IAAzB,CAAd;AACD;AACF;;AACD,WAAO,MAAM6B,gBAAN,CAAuBgC,QAAvB,EAAiCC,gBAAjC,EAAmDva,KAAnD,CAAP;AACD;;AAIDwa,EAAAA,gBAAgB,CACdF,QADc,EAEdG,mBAFc,EAGiB;AAC/B,SAAK,IAAIjtB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8sB,QAAQ,CAAC7sB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AAAA;;AACxC,YAAMipB,IAAI,GAAG6D,QAAQ,CAAC9sB,CAAD,CAArB;;AACA,UACEipB,IAAI,IACJA,IAAI,CAAC3nB,IAAL,KAAc,oBADd,IAEA,iBAAC2nB,IAAI,CAACla,KAAN,aAAC,YAAYY,aAAb,CAFA,KAGCmd,QAAQ,CAAC7sB,MAAT,GAAkB,CAAlB,IAAuB,CAACgtB,mBAHzB,CADF,EAKE;AACA,aAAKzgB,KAAL,CAAWyc,IAAI,CAAC9H,cAAL,CAAoBpjB,KAA/B,EAAsCmd,UAAU,CAACoC,iBAAjD;AACD;AACF;;AAED,WAAOwP,QAAP;AACD;;AAEDI,EAAAA,cAAc,CACZC,KADY,EAEZC,YAFY,EAGZC,OAHY,EAIZ/a,mBAJY,EAK2B;AACvC,UAAMjT,IAAI,GAAG,MAAM6tB,cAAN,CACXC,KADW,EAEXC,YAFW,EAGXC,OAHW,EAIX/a,mBAJW,CAAb;;AAYA,QAAI8a,YAAY,IAAI,CAAC,KAAK9sB,KAAL,CAAWgpB,sBAAhC,EAAwD;AACtD,WAAK0D,gBAAL,CAAsB3tB,IAAI,CAACQ,QAA3B;AACD;;AAED,WAAOR,IAAP;AACD;;AAEDiuB,EAAAA,SAAS,CACPrE,IADO,EAEP,GAAGlZ,IAFI,EAWD;AACN,QAAIkZ,IAAI,CAAC3nB,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMgsB,SAAN,CAAgBrE,IAAhB,EAAsB,GAAGlZ,IAAzB,CAAP;AACD;AACF;;AAGD6B,EAAAA,kBAAkB,CAACvS,IAAD,EAAyC;AACzD,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwG,MAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKwB,uBAAL,EAAtB;AACD;;AACD,WAAO,MAAM/Q,kBAAN,CAAyBvS,IAAzB,CAAP;AACD;;AAEDyS,EAAAA,yBAAyB,CACvBzS,IADuB,EAEC;AACxB,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwG,MAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKwB,uBAAL,EAAtB;AACD;;AACD,WAAO,MAAM7Q,yBAAN,CAAgCzS,IAAhC,CAAP;AACD;;AAGDkuB,EAAAA,aAAa,GAAY;AACvB,WAAO,KAAK3M,YAAL,CAAkB,GAAlB,KAA0B,MAAM2M,aAAN,EAAjC;AACD;;AAGDC,EAAAA,eAAe,GAAY;AACzB,WAAO,KAAKjvB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KAAwB,MAAM20B,eAAN,EAA/B;AACD;;AAEDC,EAAAA,sBAAsB,CAAChe,MAAD,EAAmD;AACvE,WAAO,CAAC,KAAKlR,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAD,IAAyB,MAAM40B,sBAAN,CAA6Bhe,MAA7B,CAAhC;AACD;;AAGDa,EAAAA,eAAe,CACbC,SADa,EAEbd,MAFa,EAGbe,WAHa,EAIbnB,OAJa,EAKboB,aALa,EAMbC,iBANa,EAOP;AACN,QAAKjB,MAAD,CAAqB6U,QAAzB,EAAmC;AACjC,WAAKrC,UAAL,CAAiBxS,MAAD,CAAqB6U,QAArB,CAA8BvmB,KAA9C;AACD;;AACD,WAAQ0R,MAAD,CAAqB6U,QAA5B;;AACA,QAAI,KAAK1D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnR,MAAAA,MAAM,CAACmB,cAAP,GAAwB,KAAKiQ,iCAAL,EAAxB;AACD;;AAED,UAAMvQ,eAAN,CACEC,SADF,EAEEd,MAFF,EAGEe,WAHF,EAIEnB,OAJF,EAKEoB,aALF,EAMEC,iBANF;;AASA,QAAIjB,MAAM,CAAChO,MAAP,IAAiBgP,aAArB,EAAoC;AAClC,YAAMhP,MAAM,GAAGgO,MAAM,CAAChO,MAAtB;;AACA,UAAIA,MAAM,CAACxB,MAAP,GAAgB,CAAhB,IAAqB,KAAKytB,WAAL,CAAiBjsB,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAK+K,KAAL,CAAWiD,MAAM,CAAC1R,KAAlB,EAAyBmd,UAAU,CAAC+B,4BAApC;AACD;AAEF,KAND,MAMO,IAELxN,MAAM,CAACnO,IAAP,KAAgB,kBAAhB,IACAmP,aADA,IAEAhB,MAAM,CAAC1B,KAAP,CAAatM,MAJR,EAKL;AACA,YAAMA,MAAM,GAAGgO,MAAM,CAAC1B,KAAP,CAAatM,MAA5B;;AACA,UAAIA,MAAM,CAACxB,MAAP,GAAgB,CAAhB,IAAqB,KAAKytB,WAAL,CAAiBjsB,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAK+K,KAAL,CAAWiD,MAAM,CAAC1R,KAAlB,EAAyBmd,UAAU,CAAC+B,4BAApC;AACD;AACF;AACF;;AAED0Q,EAAAA,sBAAsB,CACpBpd,SADoB,EAEpBd,MAFoB,EAGpBe,WAHoB,EAIpBnB,OAJoB,EAKd;AACN,QAAKI,MAAD,CAAqB6U,QAAzB,EAAmC;AACjC,WAAKrC,UAAL,CAAiBxS,MAAD,CAAqB6U,QAArB,CAA8BvmB,KAA9C;AACD;;AACD,WAAQ0R,MAAD,CAAqB6U,QAA5B;;AACA,QAAI,KAAK1D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnR,MAAAA,MAAM,CAACmB,cAAP,GAAwB,KAAKiQ,iCAAL,EAAxB;AACD;;AAED,UAAM8M,sBAAN,CAA6Bpd,SAA7B,EAAwCd,MAAxC,EAAgDe,WAAhD,EAA6DnB,OAA7D;AACD;;AAGDue,EAAAA,eAAe,CAACvuB,IAAD,EAAsB;AACnC,UAAMuuB,eAAN,CAAsBvuB,IAAtB;;AACA,QAAIA,IAAI,CAACkO,UAAL,IAAmB,KAAKqT,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CvhB,MAAAA,IAAI,CAACwuB,mBAAL,GAA2B,KAAKlK,mCAAL,EAA3B;AACD;;AACD,QAAI,KAAK/B,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAK9L,IAAL;AACA,YAAMgY,WAAoC,GAAIzuB,IAAI,CAAC4jB,UAAL,GAAkB,EAAhE;;AACA,SAAG;AACD,cAAM5jB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,QAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK+R,6BAAL,CAA+C,IAA/C,CAAV;;AACA,YAAI,KAAKnC,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,UAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAK+S,mCAAL,EAAtB;AACD,SAFD,MAEO;AACLtkB,UAAAA,IAAI,CAACuR,cAAL,GAAsB,IAAtB;AACD;;AACDkd,QAAAA,WAAW,CAACvtB,IAAZ,CAAiB,KAAKoR,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAjB;AACD,OATD,QASS,KAAK6gB,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CATT;AAUD;AACF;;AAEDo1B,EAAAA,uBAAuB,CAACte,MAAD,EAA+C;AACpE,UAAMse,uBAAN,CAA8Bte,MAA9B;AACA,UAAMhO,MAAM,GAAG,KAAK+N,4BAAL,CAAkCC,MAAlC,CAAf;;AACA,QAAIhO,MAAM,CAACxB,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAMooB,KAAK,GAAG5mB,MAAM,CAAC,CAAD,CAApB;;AACA,UAAI,KAAKisB,WAAL,CAAiBrF,KAAjB,KAA2B5Y,MAAM,CAACgC,IAAP,KAAgB,KAA/C,EAAsD;AACpD,aAAKjF,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAACkB,yBAAnC;AACD,OAFD,MAEO,IAAI,KAAKsR,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAClC,aAAK7b,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAAC4B,yBAAnC;AACD;AACF;AACF;;AAEDkR,EAAAA,iBAAiB,CACf3uB,IADe,EAEf4uB,oBAFe,EAGD;AACd,UAAM3J,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAM7R,GAAG,GAAG,MAAMsb,iBAAN,CAAwB3uB,IAAxB,EAA8B4uB,oBAA9B,CAAZ;AAEA5uB,IAAAA,IAAI,CAACilB,QAAL,GAAgBA,QAAhB;AACA,WAAO5R,GAAP;AACD;;AAGDwb,EAAAA,iBAAiB,CACflc,IADe,EAEfK,QAFe,EAGfnG,QAHe,EAIfsE,WAJe,EAKfnB,OALe,EAMf4C,SANe,EAOfC,UAPe,EAQfI,mBARe,EAST;AACN,QAAKN,IAAD,CAAmBsS,QAAvB,EAAiC;AAC/B,WAAKrC,UAAL,CAAiBjQ,IAAD,CAAmBsS,QAAnB,CAA4BvmB,KAA5C;AACD;;AACD,WAAQiU,IAAD,CAAmBsS,QAA1B;AAEA,QAAI1T,cAAJ;;AAGA,QAAI,KAAKgQ,YAAL,CAAkB,GAAlB,KAA0B,CAAC1O,UAA/B,EAA2C;AACzCtB,MAAAA,cAAc,GAAG,KAAKiQ,iCAAL,EAAjB;AACA,UAAI,CAAC,KAAKtiB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAL,EAA4B,KAAKwpB,UAAL;AAC7B;;AAED,UAAMiM,iBAAN,CACElc,IADF,EAEEK,QAFF,EAGEnG,QAHF,EAIEsE,WAJF,EAKEnB,OALF,EAME4C,SANF,EAOEC,UAPF,EAQEI,mBARF;;AAYA,QAAI1B,cAAJ,EAAoB;AAClB,OAACoB,IAAI,CAACjE,KAAL,IAAciE,IAAf,EAAqBpB,cAArB,GAAsCA,cAAtC;AACD;AACF;;AAEDud,EAAAA,4BAA4B,CAAC9F,KAAD,EAA8B;AACxD,QAAI,KAAKnI,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzB,UAAIqvB,KAAK,CAAC/mB,IAAN,KAAe,YAAnB,EAAiC;AAC/B,aAAKkL,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAAC2B,sBAAnC;AACD;;AACD,UAAI,KAAK6Q,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAC3B,aAAK7b,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAACgC,yBAAnC;AACD;;AAECmL,MAAAA,KAAF,CAA6BxV,QAA7B,GAAwC,IAAxC;AACD;;AACD,QAAI,KAAKtU,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwvB,MAAAA,KAAK,CAAClH,cAAN,GAAuB,KAAKwB,uBAAL,EAAvB;AACD,KAFD,MAEO,IAAI,KAAK+K,WAAL,CAAiBrF,KAAjB,CAAJ,EAA6B;AAClC,WAAK7b,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAAC8B,2BAAnC;AACD;;AAED,QAAI,KAAKze,KAAL,CAAW0V,OAAE,CAACva,EAAd,KAAqB,KAAKg0B,WAAL,CAAiBrF,KAAjB,CAAzB,EAAkD;AAChD,WAAK7b,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwBmd,UAAU,CAACkC,kBAAnC;AACD;;AAED,SAAKgE,gBAAL,CAAsBiH,KAAtB;AACA,WAAOA,KAAP;AACD;;AAED+F,EAAAA,iBAAiB,CACf/b,QADe,EAEfnG,QAFe,EAGfmiB,IAHe,EAIJ;AACX,UAAMhvB,IAAI,GAAG,MAAM+uB,iBAAN,CAAwB/b,QAAxB,EAAkCnG,QAAlC,EAA4CmiB,IAA5C,CAAb;;AAEA,QACEhvB,IAAI,CAACiC,IAAL,KAAc,mBAAd,IACAjC,IAAI,CAAC8hB,cADL,IAEA9hB,IAAI,CAAC2kB,KAAL,CAAWjmB,KAAX,GAAmBsB,IAAI,CAAC8hB,cAAL,CAAoBpjB,KAHzC,EAIE;AACA,WAAKyO,KAAL,CAAWnN,IAAI,CAAC8hB,cAAL,CAAoBpjB,KAA/B,EAAsCmd,UAAU,CAACmC,qBAAjD;AACD;;AAED,WAAOhe,IAAP;AACD;;AAEDivB,EAAAA,wBAAwB,CAACjvB,IAAD,EAAqC;AAC3D,QAAI,CAACgf,iBAAiB,CAAChf,IAAD,CAAtB,EAA8B;AAC5B,aAAO,MAAMivB,wBAAN,CAA+BjvB,IAA/B,CAAP;AACD;;AAED,WAAOkf,oBAAoB,CAAC,KAAKje,KAAN,CAA3B;AACD;;AAEDiuB,EAAAA,yBAAyB,CACvBlvB,IADuB,EAEvBmvB,SAFuB,EAGvBltB,IAHuB,EAIvBmtB,kBAJuB,EAKjB;AACND,IAAAA,SAAS,CAACE,KAAV,GAAkBrQ,iBAAiB,CAAChf,IAAD,CAAjB,GACd,KAAK0jB,6BAAL,CACgB,IADhB,EAEoB,IAFpB,CADc,GAKd,KAAKtC,eAAL,EALJ;AAOA,SAAK6M,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoDjX,YAApD;AACAnY,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAKoR,UAAL,CAAgB6c,SAAhB,EAA2BltB,IAA3B,CAArB;AACD;;AAGDqtB,EAAAA,gCAAgC,CAACtvB,IAAD,EAAqC;AACnEA,IAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;AAEA,QAAI7M,IAAI,GAAG,IAAX;;AACA,QAAI,KAAKlT,KAAL,CAAW0V,OAAE,CAAClX,OAAd,CAAJ,EAA4B;AAC1B0U,MAAAA,IAAI,GAAG,QAAP;AACD,KAFD,MAEO,IAAI,KAAKmQ,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpCnQ,MAAAA,IAAI,GAAG,MAAP;AACD;;AACD,QAAIA,IAAJ,EAAU;AACR,YAAM6V,EAAE,GAAG,KAAK/B,SAAL,EAAX;;AAGA,UAAI9T,IAAI,KAAK,MAAT,IAAmB6V,EAAE,CAAChmB,IAAH,KAAY2S,OAAE,CAACrZ,IAAtC,EAA4C;AAC1C,aAAKqnB,UAAL,CAAgBqF,EAAE,CAACvpB,KAAnB;AACD;;AAED,UACEwgB,oBAAoB,CAAC+I,EAAD,CAApB,IACAA,EAAE,CAAChmB,IAAH,KAAY2S,OAAE,CAAC7b,MADf,IAEAkvB,EAAE,CAAChmB,IAAH,KAAY2S,OAAE,CAACrZ,IAHjB,EAIE;AACA,aAAKkb,IAAL;AACAzW,QAAAA,IAAI,CAACif,UAAL,GAAkB7M,IAAlB;AACD;AACF;;AAED,WAAO,MAAMkd,gCAAN,CAAuCtvB,IAAvC,CAAP;AACD;;AAGDuvB,EAAAA,oBAAoB,CAACvvB,IAAD,EAAkC;AACpD,UAAMmvB,SAAS,GAAG,KAAKhd,SAAL,EAAlB;AACA,UAAMqd,kBAAkB,GAAG,KAAKtwB,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAA3B;AACA,UAAMk3B,UAAU,GAAG,KAAKC,qBAAL,EAAnB;AAEA,QAAIC,iBAAiB,GAAG,IAAxB;;AACA,QAAIF,UAAU,CAACxtB,IAAX,KAAoB,YAAxB,EAAsC;AACpC,UAAIwtB,UAAU,CAAC53B,IAAX,KAAoB,MAAxB,EAAgC;AAC9B83B,QAAAA,iBAAiB,GAAG,MAApB;AACD,OAFD,MAEO,IAAIF,UAAU,CAAC53B,IAAX,KAAoB,QAAxB,EAAkC;AACvC83B,QAAAA,iBAAiB,GAAG,QAApB;AACD;AACF;;AAED,QAAItC,SAAS,GAAG,KAAhB;;AACA,QAAI,KAAK9K,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKqN,qBAAL,CAA2B,IAA3B,CAAhC,EAAkE;AAChE,YAAMC,QAAQ,GAAG,KAAKzO,eAAL,CAAqB,IAArB,CAAjB;;AACA,UACEuO,iBAAiB,KAAK,IAAtB,IACA,CAAC,KAAKzwB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CADD,IAEA,CAAC,KAAKoJ,KAAL,CAAWgB,IAAX,CAAgB3K,OAHnB,EAIE;AAEA63B,QAAAA,SAAS,CAACW,QAAV,GAAqBD,QAArB;AACAV,QAAAA,SAAS,CAAClQ,UAAV,GAAuB0Q,iBAAvB;AACAR,QAAAA,SAAS,CAACE,KAAV,GAAkBQ,QAAQ,CAACE,OAAT,EAAlB;AACD,OATD,MASO;AAELZ,QAAAA,SAAS,CAACW,QAAV,GAAqBL,UAArB;AACAN,QAAAA,SAAS,CAAClQ,UAAV,GAAuB,IAAvB;AACAkQ,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKjO,eAAL,EAAlB;AACD;AACF,KAjBD,MAiBO,IACLuO,iBAAiB,KAAK,IAAtB,KACC,KAAKzwB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,KAAKoJ,KAAL,CAAWgB,IAAX,CAAgB3K,OADxC,CADK,EAGL;AAEA63B,MAAAA,SAAS,CAACW,QAAV,GAAqB,KAAK1O,eAAL,CAAqB,IAArB,CAArB;AACA+N,MAAAA,SAAS,CAAClQ,UAAV,GAAuB0Q,iBAAvB;;AACA,UAAI,KAAKvN,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B+M,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKjO,eAAL,EAAlB;AACD,OAFD,MAEO;AACLiM,QAAAA,SAAS,GAAG,IAAZ;AACA8B,QAAAA,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACW,QAAV,CAAmBC,OAAnB,EAAlB;AACD;AACF,KAbM,MAaA;AACL,UAAIP,kBAAJ,EAAwB;AAEtB,cAAM,KAAKriB,KAAL,CACJgiB,SAAS,CAACzwB,KADN,EAEJ4U,aAAM,CAAC/N,qBAFH,EAGJkqB,UAAU,CAAC/gB,KAHP,CAAN;AAKD;;AAED2e,MAAAA,SAAS,GAAG,IAAZ;AACA8B,MAAAA,SAAS,CAACW,QAAV,GAAqBL,UAArB;AACAN,MAAAA,SAAS,CAAClQ,UAAV,GAAuB,IAAvB;AACAkQ,MAAAA,SAAS,CAACE,KAAV,GAAkBF,SAAS,CAACW,QAAV,CAAmBC,OAAnB,EAAlB;AACD;;AAED,UAAMC,gBAAgB,GAAGhR,iBAAiB,CAAChf,IAAD,CAA1C;AACA,UAAMiwB,qBAAqB,GAAGjR,iBAAiB,CAACmQ,SAAD,CAA/C;;AAEA,QAAIa,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAK9iB,KAAL,CACEgiB,SAAS,CAACzwB,KADZ,EAEEmd,UAAU,CAACmB,mCAFb;AAID;;AAED,QAAIgT,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKxL,iBAAL,CACE0K,SAAS,CAACE,KAAV,CAAgBx3B,IADlB,EAEEs3B,SAAS,CAACE,KAAV,CAAgB3wB,KAFlB,EAGoB,IAHpB;AAKD;;AAED,QAAI2uB,SAAS,IAAI,CAAC2C,gBAAd,IAAkC,CAACC,qBAAvC,EAA8D;AAC5D,WAAKC,iBAAL,CACEf,SAAS,CAACE,KAAV,CAAgBx3B,IADlB,EAEEs3B,SAAS,CAACzwB,KAFZ,EAGE,IAHF,EAIE,IAJF;AAMD;;AAED,SAAKuvB,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoDlX,YAApD;AACAnY,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAKoR,UAAL,CAAgB6c,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDgB,EAAAA,gBAAgB,GAAc;AAC5B,YAAQ,KAAKlvB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC7X,KAAR;AAEE,eAAO,KAAKqkB,eAAL,CAAmC,IAAnC,CAAP;;AACF;AACE,eAAO,MAAM+O,gBAAN,EAAP;AALJ;AAOD;;AAGDC,EAAAA,mBAAmB,CAACpwB,IAAD,EAAmBqwB,cAAnB,EAAmD;AAEpE,UAAMje,IAAI,GAAGpS,IAAI,CAACoS,IAAlB;;AACA,QAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoC,KAAKmP,YAAL,CAAkB,GAAlB,CAAxC,EAAgE;AAC9DvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKiQ,iCAAL,EAAtB;AACD;;AACD,UAAM4O,mBAAN,CAA0BpwB,IAA1B,EAAgCqwB,cAAhC;AACD;;AAGDC,EAAAA,UAAU,CACRrE,IADQ,EAER7Z,IAFQ,EAGF;AACN,UAAMke,UAAN,CAAiBrE,IAAjB,EAAuB7Z,IAAvB;;AACA,QAAI,KAAKlT,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxByyB,MAAAA,IAAI,CAACta,EAAL,CAAQmQ,cAAR,GAAyB,KAAKwB,uBAAL,EAAzB;AACA,WAAKvB,gBAAL,CAAsBkK,IAAI,CAACta,EAA3B;AACD;AACF;;AAGD4e,EAAAA,iCAAiC,CAC/BvwB,IAD+B,EAE/BwwB,IAF+B,EAGJ;AAC3B,QAAI,KAAKtxB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAMisB,qBAAqB,GAAG,KAAKxkB,KAAL,CAAWykB,kBAAzC;AACA,WAAKzkB,KAAL,CAAWykB,kBAAX,GAAgC,IAAhC;AACA1lB,MAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKyB,uBAAL,EAAlB;AACA,WAAKriB,KAAL,CAAWykB,kBAAX,GAAgCD,qBAAhC;AACD;;AAED,WAAO,MAAM8K,iCAAN,CAAwCvwB,IAAxC,EAA8CwwB,IAA9C,CAAP;AACD;;AAGDC,EAAAA,qBAAqB,GAAY;AAC/B,WAAO,KAAKvxB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KAAwB,MAAMi3B,qBAAN,EAA/B;AACD;;AAYDzF,EAAAA,gBAAgB,CACd/X,mBADc,EAEdyd,cAFc,EAGA;AAAA;;AACd,QAAIzvB,KAAK,GAAG,IAAZ;AAEA,QAAI0vB,GAAJ;;AAEA,QACE,KAAKlxB,SAAL,CAAe,KAAf,MACC,KAAKP,KAAL,CAAW0V,OAAE,CAACyQ,WAAd,KAA8B,KAAK9D,YAAL,CAAkB,GAAlB,CAD/B,CADF,EAGE;AACAtgB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAR;AAEAqG,MAAAA,GAAG,GAAG,KAAKxG,QAAL,CACJ,MAAM,MAAMa,gBAAN,CAAuB/X,mBAAvB,EAA4Cyd,cAA5C,CADF,EAEJzvB,KAFI,CAAN;AAOA,UAAI,CAAC0vB,GAAG,CAAChjB,KAAT,EAAgB,OAAOgjB,GAAG,CAAC3wB,IAAX;AAKhB,YAAM;AAAE6U,QAAAA;AAAF,UAAc,KAAK5T,KAAzB;AACA,YAAM2vB,UAAU,GAAG/b,OAAO,CAACA,OAAO,CAACjU,MAAR,GAAiB,CAAlB,CAA1B;;AACA,UAAIgwB,UAAU,KAAKC,KAAE,CAACC,MAAtB,EAA8B;AAC5Bjc,QAAAA,OAAO,CAACjU,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIgwB,UAAU,KAAKC,KAAE,CAACE,MAAtB,EAA8B;AACnClc,QAAAA,OAAO,CAACjU,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,QAAA+vB,GAAG,SAAH,SAAKhjB,KAAL,IAAc,KAAK4T,YAAL,CAAkB,GAAlB,CAAlB,EAA0C;AAAA;;AACxCtgB,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWqpB,KAAX,EAAjB;AAEA,UAAI/Y,cAAJ;AAEA,YAAM1X,KAAK,GAAG,KAAKswB,QAAL,CAAc6G,KAAK,IAAI;AAAA;;AACnCzf,QAAAA,cAAc,GAAG,KAAKiQ,iCAAL,EAAjB;AAEA,cAAMyP,eAAe,GAAG,KAAK3H,gCAAL,CACtB/X,cADsB,EAEtB,MAAM;AACJ,gBAAM2Y,MAAM,GAAG,MAAMc,gBAAN,CACb/X,mBADa,EAEbyd,cAFa,CAAf;AAKA,eAAKQ,0BAAL,CAAgChH,MAAhC,EAAwC3Y,cAAxC;AAEA,iBAAO2Y,MAAP;AACD,SAXqB,CAAxB;;AAeA,YACE+G,eAAe,CAAChvB,IAAhB,KAAyB,yBAAzB,6BACAgvB,eAAe,CAACvhB,KADhB,aACA,sBAAuBY,aAFzB,EAGE;AACA0gB,UAAAA,KAAK;AACN;;AAID,cAAMpH,IAAI,GAAG,KAAKuH,6BAAL,CAAmCF,eAAnC,CAAb;AACArH,QAAAA,IAAI,CAACrY,cAAL,GAAsBA,cAAtB;AACA,aAAK2f,0BAAL,CAAgCtH,IAAhC,EAAsCrY,cAAtC;AAEA,eAAO0f,eAAP;AACD,OAhCa,EAgCXhwB,KAhCW,CAAd;AAkCA,UAAIgwB,eAGH,GAAG,IAHJ;;AAKA,UACEp3B,KAAK,CAACmG,IAAN,IACA,KAAKmxB,6BAAL,CAAmCt3B,KAAK,CAACmG,IAAzC,EAA+CiC,IAA/C,KACE,yBAHJ,EAIE;AACA,YAAI,CAACpI,KAAK,CAAC8T,KAAP,IAAgB,CAAC9T,KAAK,CAACu3B,OAA3B,EAAoC;AAElC,cAAIv3B,KAAK,CAACmG,IAAN,CAAWqxB,KAAf,EAAsB;AAEpB,iBAAKlkB,KAAL,CACEoE,cAAc,CAAC7S,KADjB,EAEEmd,UAAU,CAAC4C,+CAFb;AAID;;AAED,iBAAO5kB,KAAK,CAACmG,IAAb;AACD;;AAEDixB,QAAAA,eAAe,GAAGp3B,KAAK,CAACmG,IAAxB;AACD;;AAQD,mBAAI2wB,GAAJ,aAAI,MAAK3wB,IAAT,EAAe;AAEb,aAAKiB,KAAL,GAAa0vB,GAAG,CAACtG,SAAjB;AACA,eAAOsG,GAAG,CAAC3wB,IAAX;AACD;;AAED,UAAIixB,eAAJ,EAAqB;AAEnB,aAAKhwB,KAAL,GAAapH,KAAK,CAACwwB,SAAnB;AACA,eAAO4G,eAAP;AACD;;AAED,mBAAIN,GAAJ,aAAI,MAAKW,MAAT,EAAiB,MAAMX,GAAG,CAAChjB,KAAV;AACjB,UAAI9T,KAAK,CAACy3B,MAAV,EAAkB,MAAMz3B,KAAK,CAAC8T,KAAZ;AAGlB,YAAM,KAAKR,KAAL,CACJoE,cAAc,CAAC7S,KADX,EAEJmd,UAAU,CAAC2C,iCAFP,CAAN;AAID;;AAED,WAAO,MAAMwM,gBAAN,CAAuB/X,mBAAvB,EAA4Cyd,cAA5C,CAAP;AACD;;AAGDa,EAAAA,UAAU,CAACvxB,IAAD,EAA8D;AACtE,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAM0wB,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjC,cAAM1E,qBAAqB,GAAG,KAAKxkB,KAAL,CAAWykB,kBAAzC;AACA,aAAKzkB,KAAL,CAAWykB,kBAAX,GAAgC,IAAhC;AAEA,cAAMrE,QAAQ,GAAG,KAAKlP,SAAL,EAAjB;AAEA,SAEEkP,QAAQ,CAACS,cAFX,EAIE9hB,IAAI,CAACghB,SAJP,IAKI,KAAKD,oCAAL,EALJ;AAOA,aAAK9f,KAAL,CAAWykB,kBAAX,GAAgCD,qBAAhC;AAEA,YAAI,KAAKiD,kBAAL,EAAJ,EAA+B,KAAK9F,UAAL;AAC/B,YAAI,CAAC,KAAK1jB,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,CAAL,EAA2B,KAAK+oB,UAAL;AAE3B,eAAOvB,QAAP;AACD,OAnBc,CAAf;AAqBA,UAAI6I,MAAM,CAACoH,MAAX,EAAmB,OAAO,IAAP;AAGnB,UAAIpH,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAGlBrqB,MAAAA,IAAI,CAAC6hB,UAAL,GAAkBqI,MAAM,CAAClqB,IAAP,CAAY8hB,cAAZ,GACd,KAAKxP,UAAL,CAAgB4X,MAAM,CAAClqB,IAAvB,EAA6B,gBAA7B,CADc,GAEd,IAFJ;AAGD;;AAED,WAAO,MAAMuxB,UAAN,CAAiBvxB,IAAjB,CAAP;AACD;;AAEDwxB,EAAAA,gBAAgB,GAAY;AAC1B,WAAO,KAAKtyB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KAAwB,MAAMg4B,gBAAN,EAA/B;AACD;;AAEDC,EAAAA,0BAA0B,CACxBzxB,IADwB,EAExBoC,MAFwB,EAGlB;AACN,QAAI,KAAKnB,KAAL,CAAWgqB,yBAAX,CAAqCY,OAArC,CAA6C7rB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnEsB,MAAAA,IAAI,CAACoC,MAAL,GAAcA,MAAd;AACD,KAFD,MAEO;AACL,YAAMqvB,0BAAN,CAAiCzxB,IAAjC,EAAuCoC,MAAvC;AACD;AACF;;AAEDupB,EAAAA,WAAW,CACT3rB,IADS,EAET0xB,eAFS,EAGTC,eAHS,EAIH;AACN,QACEA,eAAe,IACf,KAAK1wB,KAAL,CAAWgqB,yBAAX,CAAqCY,OAArC,CAA6C7rB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAFhE,EAGE;AACA;AACD;;AAGD,SAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACoC,MAAL,CAAYxB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAI,KAAK0tB,WAAL,CAAiBruB,IAAI,CAACoC,MAAL,CAAYzB,CAAZ,CAAjB,KAAoCA,CAAC,GAAG,CAA5C,EAA+C;AAC7C,aAAKwM,KAAL,CAAWnN,IAAI,CAACoC,MAAL,CAAYzB,CAAZ,EAAejC,KAA1B,EAAiCmd,UAAU,CAACiC,oBAA5C;AACD;AACF;;AAED,WAAO,MAAM6N,WAAN,CAAkB,GAAGxpB,SAArB,CAAP;AACD;;AAEDyvB,EAAAA,kCAAkC,CAACC,UAAD,EAAoC;AACpE,WAAO,MAAMD,kCAAN,CACLC,UAAU,IAAI,KAAK5wB,KAAL,CAAWupB,SAAX,CAAqBqB,OAArB,CAA6B,KAAK5qB,KAAL,CAAWvC,KAAxC,MAAmD,CAAC,CAD7D,CAAP;AAGD;;AAEDozB,EAAAA,eAAe,CACb/d,IADa,EAEbf,QAFa,EAGbnG,QAHa,EAIbmH,OAJa,EAKC;AACd,QACED,IAAI,CAAC9R,IAAL,KAAc,YAAd,IACA8R,IAAI,CAAClc,IAAL,KAAc,OADd,IAEA,KAAKoJ,KAAL,CAAWupB,SAAX,CAAqBqB,OAArB,CAA6B7Y,QAA7B,MAA2C,CAAC,CAH9C,EAIE;AACA,WAAKyD,IAAL;AAEA,YAAMzW,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,MAAAA,IAAI,CAACyT,MAAL,GAAcM,IAAd;AACA/T,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CAAkCnd,OAAE,CAACvb,MAArC,EAA6C,KAA7C,CAAjB;AACA0a,MAAAA,IAAI,GAAG,KAAKzB,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD,KAXD,MAWO,IACL+T,IAAI,CAAC9R,IAAL,KAAc,YAAd,IACA8R,IAAI,CAAClc,IAAL,KAAc,OADd,IAEA,KAAK0pB,YAAL,CAAkB,GAAlB,CAHK,EAIL;AACA,YAAMtgB,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAd;AACA,YAAMzwB,KAAK,GAAG,KAAKswB,QAAL,CACZ6G,KAAK,IACH,KAAKgB,iCAAL,CAAuChf,QAAvC,EAAiDnG,QAAjD,KACAmkB,KAAK,EAHK,EAIZ/vB,KAJY,CAAd;AAQA,UAAI,CAACpH,KAAK,CAAC8T,KAAP,IAAgB,CAAC9T,KAAK,CAACu3B,OAA3B,EAAoC,OAAOv3B,KAAK,CAACmG,IAAb;AAEpC,YAAMkqB,MAAM,GAAG,KAAKC,QAAL,CACb,MAAM,MAAM2H,eAAN,CAAsB/d,IAAtB,EAA4Bf,QAA5B,EAAsCnG,QAAtC,EAAgDmH,OAAhD,CADO,EAEb/S,KAFa,CAAf;AAKA,UAAIipB,MAAM,CAAClqB,IAAP,IAAe,CAACkqB,MAAM,CAACvc,KAA3B,EAAkC,OAAOuc,MAAM,CAAClqB,IAAd;;AAElC,UAAInG,KAAK,CAACmG,IAAV,EAAgB;AACd,aAAKiB,KAAL,GAAapH,KAAK,CAACwwB,SAAnB;AACA,eAAOxwB,KAAK,CAACmG,IAAb;AACD;;AAED,UAAIkqB,MAAM,CAAClqB,IAAX,EAAiB;AACf,aAAKiB,KAAL,GAAaipB,MAAM,CAACG,SAApB;AACA,eAAOH,MAAM,CAAClqB,IAAd;AACD;;AAED,YAAMnG,KAAK,CAAC8T,KAAN,IAAeuc,MAAM,CAACvc,KAA5B;AACD;;AAED,WAAO,MAAMmkB,eAAN,CAAsB/d,IAAtB,EAA4Bf,QAA5B,EAAsCnG,QAAtC,EAAgDmH,OAAhD,CAAP;AACD;;AAEDF,EAAAA,cAAc,CACZC,IADY,EAEZf,QAFY,EAGZnG,QAHY,EAIZmH,OAJY,EAKZie,cALY,EAME;AACd,QAAI,KAAK/yB,KAAL,CAAW0V,OAAE,CAAChb,WAAd,KAA8B,KAAKs4B,mBAAL,EAAlC,EAA8D;AAC5DD,MAAAA,cAAc,CAAChe,mBAAf,GAAqC,IAArC;;AACA,UAAID,OAAJ,EAAa;AACXie,QAAAA,cAAc,CAAC9d,IAAf,GAAsB,IAAtB;AACA,eAAOJ,IAAP;AACD;;AACD,WAAK0C,IAAL;AACA,YAAMzW,IAA8B,GAAG,KAAKwP,WAAL,CACrCwD,QADqC,EAErCnG,QAFqC,CAAvC;AAIA7M,MAAAA,IAAI,CAACyT,MAAL,GAAcM,IAAd;AACA/T,MAAAA,IAAI,CAACmyB,aAAL,GAAqB,KAAK7N,mCAAL,EAArB;AACA,WAAK9D,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AAEA4G,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CAAkCnd,OAAE,CAACvb,MAArC,EAA6C,KAA7C,CAAjB;AACA2G,MAAAA,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAKD,oBAAL,CAA0BvT,IAA1B,EAA+C,IAA/C,CAAP;AACD,KAlBD,MAkBO,IACL,CAACgU,OAAD,IACA,KAAK8L,gBAAL,EADA,IAEA,KAAKyB,YAAL,CAAkB,GAAlB,CAHK,EAIL;AACA,YAAMvhB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,MAAAA,IAAI,CAACyT,MAAL,GAAcM,IAAd;AAEA,YAAMmW,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjCnqB,QAAAA,IAAI,CAACmyB,aAAL,GACE,KAAKxM,4CAAL,EADF;AAEA,aAAKnF,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA4G,QAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CAAkCnd,OAAE,CAACvb,MAArC,EAA6C,KAA7C,CAAjB;AACA,YAAI44B,cAAc,CAAChe,mBAAnB,EAAwCjU,IAAI,CAACwT,QAAL,GAAgB,KAAhB;AACxC,eAAO,KAAKD,oBAAL,CACLvT,IADK,EAELiyB,cAAc,CAAChe,mBAFV,CAAP;AAID,OAVc,CAAf;;AAYA,UAAIiW,MAAM,CAAClqB,IAAX,EAAiB;AACf,YAAIkqB,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAClB,eAAOH,MAAM,CAAClqB,IAAd;AACD;AACF;;AAED,WAAO,MAAM8T,cAAN,CACLC,IADK,EAELf,QAFK,EAGLnG,QAHK,EAILmH,OAJK,EAKLie,cALK,CAAP;AAOD;;AAEDG,EAAAA,iBAAiB,CAACpyB,IAAD,EAA8B;AAC7C,QAAIqyB,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKvS,gBAAL,MAA2B,KAAKyB,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;AACrD8Q,MAAAA,KAAK,GAAG,KAAKlI,QAAL,CAAc,MACpB,KAAKxE,4CAAL,EADM,EAEN3lB,IAFF;AAGD;;AACDA,IAAAA,IAAI,CAACmyB,aAAL,GAAqBE,KAArB;AAEA,UAAMD,iBAAN,CAAwBpyB,IAAxB;AACD;;AAEDgyB,EAAAA,iCAAiC,CAC/Bhf,QAD+B,EAE/BnG,QAF+B,EAGH;AAC5B,UAAM7M,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,SAAKujB,mBAAL,CAAyBpwB,IAAzB;AACA,QAAI,CAAC,KAAKuxB,UAAL,CAAgBvxB,IAAhB,CAAL,EAA4B;AAC5B,WAAO,KAAKsyB,oBAAL,CACLtyB,IADK,EAEQG,SAFR,EAGS,IAHT,CAAP;AAKD;;AAEDoyB,EAAAA,qBAAqB,CAACr0B,IAAD,EAAqB;AACxC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QACE1O,IAAI,OAAJ,IACAuY,IAAI,OADJ,IAEA,KAAKxV,KAAL,CAAWuxB,cAHb,EAIE;AACA,WAAKvxB,KAAL,CAAWuxB,cAAX,GAA4B,KAA5B;AACA,WAAKvxB,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,WAAK6lB,SAAL;AACA;AACD;;AAED,UAAMF,qBAAN,CAA4Br0B,IAA5B;AACD;;AAEDw0B,EAAAA,kBAAkB,CAACx0B,IAAD,EAAqB;AACrC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QACE1O,IAAI,QAAJ,IACAuY,IAAI,QAFN,EAGE;AAEA,WAAK2W,QAAL,CAAcxY,OAAE,CAACzb,SAAjB,EAA4B,CAA5B;AACA;AACD;;AAED,UAAMu5B,kBAAN,CAAyBx0B,IAAzB;AACD;;AAEDy0B,EAAAA,aAAa,CAACC,IAAD,EAAeC,OAAf,EAA2C;AACtD,UAAMC,QAAQ,GAAG,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,OAA1B,CAAjB;;AACA,QAAI,KAAK5xB,KAAL,CAAWuxB,cAAf,EAA+B;AAC7B,WAAKrlB,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2BiP,UAAU,CAAC+C,uBAAtC;AACD;;AACD,WAAOkU,QAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAA0B;AACxC,QAAI,KAAKtzB,SAAL,CAAe,cAAf,KAAkC,KAAKuzB,eAAL,EAAtC,EAA8D;AAC5D,UAAI,KAAK/xB,KAAL,CAAWuxB,cAAf,EAA+B;AAC7B,aAAK5P,UAAL,CAAgB,IAAhB,EAAsB/G,UAAU,CAAC0B,iBAAjC;AACD;;AACD,WAAK0V,wBAAL;AACA,WAAKhyB,KAAL,CAAW2L,GAAX,IAAkB,KAAKomB,eAAL,EAAlB;AACA,WAAK/xB,KAAL,CAAWuxB,cAAX,GAA4B,IAA5B;AACA;AACD;;AAED,QAAI,KAAKvxB,KAAL,CAAWuxB,cAAf,EAA+B;AAC7B,YAAM7zB,GAAG,GAAG,KAAKI,KAAL,CAAW8sB,OAAX,CAAmB,KAAnB,EAA2B,KAAK5qB,KAAL,CAAW2L,GAAX,IAAkB,CAA7C,CAAZ;;AACA,UAAIjO,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,cAAM,KAAKwO,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAX,GAAiB,CAA5B,EAA+B0G,aAAM,CAAC5H,mBAAtC,CAAN;AACD;;AACD,WAAKzK,KAAL,CAAW2L,GAAX,GAAiBjO,GAAG,GAAG,CAAvB;AACA;AACD;;AAED,WAAO,MAAMo0B,gBAAN,EAAP;AACD;;AAEDC,EAAAA,eAAe,GAAqB;AAClC,UAAM;AAAEpmB,MAAAA;AAAF,QAAU,KAAK3L,KAArB;AACA,QAAIiyB,yBAAyB,GAAG,CAAhC;;AACA,WACE,QAAiCC,QAAjC,CACE,KAAKp0B,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAGsmB,yBAA5B,CADF,CADF,EAIE;AACAA,MAAAA,yBAAyB;AAC1B;;AAED,UAAME,GAAG,GAAG,KAAKr0B,KAAL,CAAWiD,UAAX,CAAsBkxB,yBAAyB,GAAGtmB,GAAlD,CAAZ;AACA,UAAMymB,GAAG,GAAG,KAAKt0B,KAAL,CAAWiD,UAAX,CAAsBkxB,yBAAyB,GAAGtmB,GAA5B,GAAkC,CAAxD,CAAZ;;AAEA,QAAIwmB,GAAG,OAAH,IAA2BC,GAAG,OAAlC,EAAwD;AACtD,aAAOH,yBAAyB,GAAG,CAAnC;AACD;;AACD,QACE,KAAKn0B,KAAL,CAAW+Q,KAAX,CACEojB,yBAAyB,GAAGtmB,GAD9B,EAEEsmB,yBAAyB,GAAGtmB,GAA5B,GAAkC,EAFpC,MAGM,cAJR,EAKE;AACA,aAAOsmB,yBAAyB,GAAG,EAAnC;AACD;;AACD,QAAIE,GAAG,OAAH,IAA2BC,GAAG,OAAlC,EAAwD;AACtD,aAAOH,yBAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDD,EAAAA,wBAAwB,GAAS;AAC/B,UAAMt0B,GAAG,GAAG,KAAKI,KAAL,CAAW8sB,OAAX,CAAmB,IAAnB,EAAyB,KAAK5qB,KAAL,CAAW2L,GAApC,CAAZ;;AACA,QAAIjO,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,YAAM,KAAKwO,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAC5H,mBAAlC,CAAN;AACD;AACF;;AAID4nB,EAAAA,wCAAwC,CACtC1mB,GADsC,EAEtC;AAAE2mB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAFsC,EAGhC;AACN,SAAKrmB,KAAL,CACEP,GADF,EAEEiP,UAAU,CAACO,+BAFb,EAGEoX,UAHF,EAIED,QAJF;AAMD;;AAEDE,EAAAA,8BAA8B,CAC5B7mB,GAD4B,EAE5B;AAAE2mB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAF4B,EAGtB;AACN,UAAMpQ,UAAU,GAAGoQ,UAAU,CAAC,CAAD,CAAV,CAAcE,WAAd,KAA8BF,UAAU,CAAC1jB,KAAX,CAAiB,CAAjB,CAAjD;AACA,SAAK3C,KAAL,CACEP,GADF,EAEEiP,UAAU,CAACe,qBAFb,EAGE4W,UAHF,EAIEpQ,UAJF,EAKEmQ,QALF;AAOD;;AAEDI,EAAAA,gCAAgC,CAC9B/mB,GAD8B,EAE9B;AAAE2mB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAF8B,EAGxB;AACN,SAAKrmB,KAAL,CAAWP,GAAX,EAAgBiP,UAAU,CAACQ,uBAA3B,EAAoDmX,UAApD,EAAgED,QAAhE;AACD;;AAEDK,EAAAA,qCAAqC,CACnChnB,GADmC,EAEnC;AAAE2mB,IAAAA;AAAF,GAFmC,EAG7B;AACN,SAAKpmB,KAAL,CAAWP,GAAX,EAAgBiP,UAAU,CAACS,4BAA3B,EAAyDiX,QAAzD;AACD;;AAEDM,EAAAA,gCAAgC,CAC9BjnB,GAD8B,EAE9B;AACE2mB,IAAAA,QADF;AAEEO,IAAAA;AAFF,GAF8B,EAM9B;AACA,WAAO,KAAK3mB,KAAL,CACLP,GADK,EAELknB,YAAY,KAAK,IAAjB,GACIjY,UAAU,CAACW,sCADf,GAEIX,UAAU,CAACU,uBAJV,EAKLgX,QALK,EAMLO,YANK,CAAP;AAQD;;AAEDC,EAAAA,qCAAqC,CACnCnnB,GADmC,EAEnC;AAAE2mB,IAAAA,QAAF;AAAYS,IAAAA,YAAZ;AAA0BR,IAAAA;AAA1B,GAFmC,EAGnC;AACA,QAAIlmB,OAAO,GAAG,IAAd;;AACA,YAAQ0mB,YAAR;AACE,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACE1mB,QAAAA,OAAO,GAAGuO,UAAU,CAACY,uCAArB;AACA;;AACF,WAAK,QAAL;AACEnP,QAAAA,OAAO,GAAGuO,UAAU,CAACa,sCAArB;AACA;;AACF;AAEEpP,QAAAA,OAAO,GAAGuO,UAAU,CAACc,uCAArB;AAXJ;;AAaA,WAAO,KAAKxP,KAAL,CAAWP,GAAX,EAAgBU,OAAhB,EAAyBimB,QAAzB,EAAmCC,UAAnC,EAA+CQ,YAA/C,CAAP;AACD;;AAEDC,EAAAA,uCAAuC,CACrCrnB,GADqC,EAErC;AAAE2mB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAFqC,EAG/B;AACN,SAAKrmB,KAAL,CACEP,GADF,EAEEiP,UAAU,CAACgB,8BAFb,EAGE0W,QAHF,EAIEC,UAJF;AAMD;;AAEDU,EAAAA,kDAAkD,CAChDtnB,GADgD,EAEhD;AAAE2mB,IAAAA;AAAF,GAFgD,EAG1C;AACN,SAAKpmB,KAAL,CACEP,GADF,EAEEiP,UAAU,CAACiB,yCAFb,EAGEyW,QAHF;AAKD;;AAEDY,EAAAA,kBAAkB,GAAmB;AACnC,UAAMnhB,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;;AACA,UAAM01B,SAAS,GAAG,MAAM,KAAKl1B,KAAL,CAAW0V,OAAE,CAACtb,KAAd,KAAwB,KAAK4F,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAhD;;AACA,YAAQ,KAAK+H,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAACzc,GAAR;AAAa;AACX,gBAAMk8B,OAAO,GAAG,KAAKplB,mBAAL,CAAyB,KAAKhO,KAAL,CAAWyN,KAApC,CAAhB;;AACA,cAAI0lB,SAAS,EAAb,EAAiB;AACf,mBAAO;AAAEnyB,cAAAA,IAAI,EAAE,QAAR;AAAkB2K,cAAAA,GAAG,EAAEynB,OAAO,CAAC31B,KAA/B;AAAsCgQ,cAAAA,KAAK,EAAE2lB;AAA7C,aAAP;AACD;;AACD,iBAAO;AAAEpyB,YAAAA,IAAI,EAAE,SAAR;AAAmB2K,YAAAA,GAAG,EAAEoG;AAAxB,WAAP;AACD;;AACD,WAAK4B,OAAE,CAACrc,MAAR;AAAgB;AACd,gBAAM87B,OAAO,GAAG,KAAKrlB,kBAAL,CAAwB,KAAK/N,KAAL,CAAWyN,KAAnC,CAAhB;;AACA,cAAI0lB,SAAS,EAAb,EAAiB;AACf,mBAAO;AAAEnyB,cAAAA,IAAI,EAAE,QAAR;AAAkB2K,cAAAA,GAAG,EAAEynB,OAAO,CAAC31B,KAA/B;AAAsCgQ,cAAAA,KAAK,EAAE2lB;AAA7C,aAAP;AACD;;AACD,iBAAO;AAAEpyB,YAAAA,IAAI,EAAE,SAAR;AAAmB2K,YAAAA,GAAG,EAAEoG;AAAxB,WAAP;AACD;;AACD,WAAK4B,OAAE,CAACtX,KAAR;AACA,WAAKsX,OAAE,CAACrX,MAAR;AAAgB;AACd,gBAAM82B,OAAO,GAAG,KAAKllB,mBAAL,CAAyB,KAAKjQ,KAAL,CAAW0V,OAAE,CAACtX,KAAd,CAAzB,CAAhB;;AACA,cAAI82B,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLnyB,cAAAA,IAAI,EAAE,SADD;AAEL2K,cAAAA,GAAG,EAAEynB,OAAO,CAAC31B,KAFR;AAGLgQ,cAAAA,KAAK,EAAE2lB;AAHF,aAAP;AAKD;;AACD,iBAAO;AAAEpyB,YAAAA,IAAI,EAAE,SAAR;AAAmB2K,YAAAA,GAAG,EAAEoG;AAAxB,WAAP;AACD;;AACD;AACE,eAAO;AAAE/Q,UAAAA,IAAI,EAAE,SAAR;AAAmB2K,UAAAA,GAAG,EAAEoG;AAAxB,SAAP;AA5BJ;AA8BD;;AAEDshB,EAAAA,iBAAiB,GAAyC;AACxD,UAAM1nB,GAAG,GAAG,KAAK3L,KAAL,CAAWvC,KAAvB;AACA,UAAMiT,EAAE,GAAG,KAAKyP,eAAL,CAAqB,IAArB,CAAX;AACA,UAAMmT,IAAI,GAAG,KAAK1T,GAAL,CAASjM,OAAE,CAACva,EAAZ,IACT,KAAK85B,kBAAL,EADS,GAET;AAAElyB,MAAAA,IAAI,EAAE,MAAR;AAAgB2K,MAAAA;AAAhB,KAFJ;AAGA,WAAO;AAAE+E,MAAAA,EAAF;AAAM4iB,MAAAA;AAAN,KAAP;AACD;;AAEDC,EAAAA,iCAAiC,CAC/B5nB,GAD+B,EAE/BiI,OAF+B,EAG/B4f,YAH+B,EAIzB;AACN,UAAM;AAAET,MAAAA;AAAF,QAAmBnf,OAAzB;;AACA,QAAImf,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD;;AACD,QAAIA,YAAY,KAAKS,YAArB,EAAmC;AACjC,WAAKV,qCAAL,CAA2CnnB,GAA3C,EAAgDiI,OAAhD;AACD;AACF;;AAED6f,EAAAA,eAAe,CAAC;AACdnB,IAAAA,QADc;AAEdS,IAAAA;AAFc,GAAD,EAcZ;AACD,UAAMW,SAAS,GAAG,IAAI9e,GAAJ,EAAlB;AACA,UAAM+e,OAAO,GAAG;AACdC,MAAAA,cAAc,EAAE,EADF;AAEdC,MAAAA,aAAa,EAAE,EAFD;AAGdC,MAAAA,aAAa,EAAE,EAHD;AAIdC,MAAAA,gBAAgB,EAAE;AAJJ,KAAhB;AAMA,QAAIC,iBAAiB,GAAG,KAAxB;;AACA,WAAO,CAAC,KAAK/1B,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAR,EAA+B;AAC7B,UAAI,KAAK2nB,GAAL,CAASjM,OAAE,CAAC7a,QAAZ,CAAJ,EAA2B;AACzBk7B,QAAAA,iBAAiB,GAAG,IAApB;AACA;AACD;;AACD,YAAMC,UAAU,GAAG,KAAK/iB,SAAL,EAAnB;AACA,YAAM;AAAER,QAAAA,EAAF;AAAM4iB,QAAAA;AAAN,UAAe,KAAKD,iBAAL,EAArB;AACA,YAAMd,UAAU,GAAG7hB,EAAE,CAAC9Z,IAAtB;;AACA,UAAI27B,UAAU,KAAK,EAAnB,EAAuB;AACrB;AACD;;AACD,UAAI,SAASje,IAAT,CAAcie,UAAd,CAAJ,EAA+B;AAC7B,aAAKC,8BAAL,CAAoC9hB,EAAE,CAACjT,KAAvC,EAA8C;AAC5C60B,UAAAA,QAD4C;AAE5CC,UAAAA;AAF4C,SAA9C;AAID;;AACD,UAAImB,SAAS,CAACh1B,GAAV,CAAc6zB,UAAd,CAAJ,EAA+B;AAC7B,aAAKG,gCAAL,CAAsChiB,EAAE,CAACjT,KAAzC,EAAgD;AAC9C60B,UAAAA,QAD8C;AAE9CC,UAAAA;AAF8C,SAAhD;AAID;;AACDmB,MAAAA,SAAS,CAACzZ,GAAV,CAAcsY,UAAd;AACA,YAAM3e,OAAO,GAAG;AAAE0e,QAAAA,QAAF;AAAYS,QAAAA,YAAZ;AAA0BR,QAAAA;AAA1B,OAAhB;AACA0B,MAAAA,UAAU,CAACvjB,EAAX,GAAgBA,EAAhB;;AACA,cAAQ4iB,IAAI,CAACtyB,IAAb;AACE,aAAK,SAAL;AAAgB;AACd,iBAAKuyB,iCAAL,CACED,IAAI,CAAC3nB,GADP,EAEEiI,OAFF,EAGE,SAHF;AAKAqgB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAAC7lB,KAAvB;AACAkmB,YAAAA,OAAO,CAACC,cAAR,CAAuB3zB,IAAvB,CACE,KAAKoR,UAAL,CAAgB4iB,UAAhB,EAA4B,mBAA5B,CADF;AAGA;AACD;;AACD,aAAK,QAAL;AAAe;AACb,iBAAKV,iCAAL,CAAuCD,IAAI,CAAC3nB,GAA5C,EAAiDiI,OAAjD,EAA0D,QAA1D;AACAqgB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAAC7lB,KAAvB;AACAkmB,YAAAA,OAAO,CAACE,aAAR,CAAsB5zB,IAAtB,CACE,KAAKoR,UAAL,CAAgB4iB,UAAhB,EAA4B,kBAA5B,CADF;AAGA;AACD;;AACD,aAAK,QAAL;AAAe;AACb,iBAAKV,iCAAL,CAAuCD,IAAI,CAAC3nB,GAA5C,EAAiDiI,OAAjD,EAA0D,QAA1D;AACAqgB,YAAAA,UAAU,CAACX,IAAX,GAAkBA,IAAI,CAAC7lB,KAAvB;AACAkmB,YAAAA,OAAO,CAACG,aAAR,CAAsB7zB,IAAtB,CACE,KAAKoR,UAAL,CAAgB4iB,UAAhB,EAA4B,kBAA5B,CADF;AAGA;AACD;;AACD,aAAK,SAAL;AAAgB;AACd,kBAAM,KAAKnB,qCAAL,CAA2CQ,IAAI,CAAC3nB,GAAhD,EAAqDiI,OAArD,CAAN;AACD;;AACD,aAAK,MAAL;AAAa;AACX,oBAAQmf,YAAR;AACE,mBAAK,SAAL;AACE,qBAAKV,wCAAL,CACEiB,IAAI,CAAC3nB,GADP,EAEEiI,OAFF;AAIA;;AACF,mBAAK,QAAL;AACE,qBAAKof,uCAAL,CAA6CM,IAAI,CAAC3nB,GAAlD,EAAuDiI,OAAvD;AACA;;AACF;AACE+f,gBAAAA,OAAO,CAACI,gBAAR,CAAyB9zB,IAAzB,CACE,KAAKoR,UAAL,CAAgB4iB,UAAhB,EAA4B,qBAA5B,CADF;AAXJ;AAeD;AAhDH;;AAmDA,UAAI,CAAC,KAAKh2B,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAL,EAA4B;AAC1B,aAAKsnB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;AACF;;AACD,WAAO;AAAEs7B,MAAAA,OAAF;AAAWK,MAAAA;AAAX,KAAP;AACD;;AAEDE,EAAAA,qBAAqB,CACnBC,kBADmB,EAEnBJ,gBAFmB,EAGnB;AAAEzB,IAAAA;AAAF,GAHmB,EAIJ;AACf,QAAI6B,kBAAkB,CAACx0B,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,aAAOo0B,gBAAP;AACD,KAFD,MAEO,IAAIA,gBAAgB,CAACp0B,MAAjB,KAA4B,CAAhC,EAAmC;AACxC,aAAOw0B,kBAAP;AACD,KAFM,MAEA,IAAIJ,gBAAgB,CAACp0B,MAAjB,GAA0Bw0B,kBAAkB,CAACx0B,MAAjD,EAAyD;AAC9D,WAAK,MAAMisB,MAAX,IAAqBuI,kBAArB,EAAyC;AACvC,aAAKlB,kDAAL,CACErH,MAAM,CAACnuB,KADT,EAEE;AAAE60B,UAAAA;AAAF,SAFF;AAID;;AACD,aAAOyB,gBAAP;AACD,KARM,MAQA;AACL,WAAK,MAAMnI,MAAX,IAAqBmI,gBAArB,EAAuC;AACrC,aAAKd,kDAAL,CACErH,MAAM,CAACnuB,KADT,EAEE;AAAE60B,UAAAA;AAAF,SAFF;AAID;;AACD,aAAO6B,kBAAP;AACD;AACF;;AAEDC,EAAAA,yBAAyB,CAAC;AACxB9B,IAAAA;AADwB,GAAD,EAIJ;AACnB,QAAI,KAAKnR,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,UAAI,CAAC,KAAKljB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAL,EAA0B;AACxB,cAAM,KAAKg8B,gCAAL,CAAsC,KAAK5yB,KAAL,CAAWvC,KAAjD,EAAwD;AAC5D60B,UAAAA,QAD4D;AAE5DO,UAAAA,YAAY,EAAE;AAF8C,SAAxD,CAAN;AAID;;AAED,YAAM;AAAEplB,QAAAA;AAAF,UAAY,KAAKzN,KAAvB;AACA,WAAKwV,IAAL;;AAEA,UACE/H,KAAK,KAAK,SAAV,IACAA,KAAK,KAAK,QADV,IAEAA,KAAK,KAAK,QAFV,IAGAA,KAAK,KAAK,QAJZ,EAKE;AACA,aAAKmlB,gCAAL,CAAsC,KAAK5yB,KAAL,CAAWvC,KAAjD,EAAwD;AACtD60B,UAAAA,QADsD;AAEtDO,UAAAA,YAAY,EAAEplB;AAFwC,SAAxD;AAID;;AAED,aAAOA,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAED4mB,EAAAA,YAAY,CAACt1B,IAAD,EAAe;AAAEuzB,IAAAA,QAAF;AAAYgC,IAAAA;AAAZ,GAAf,EAA8C;AACxD,UAAMvB,YAAY,GAAG,KAAKqB,yBAAL,CAA+B;AAAE9B,MAAAA;AAAF,KAA/B,CAArB;AACA,SAAK/S,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AACA,UAAM;AAAE67B,MAAAA,OAAF;AAAWK,MAAAA;AAAX,QAAiC,KAAKP,eAAL,CAAqB;AAC1DnB,MAAAA,QAD0D;AAE1DS,MAAAA;AAF0D,KAArB,CAAvC;AAIAh0B,IAAAA,IAAI,CAACi1B,iBAAL,GAAyBA,iBAAzB;;AAEA,YAAQjB,YAAR;AACE,WAAK,SAAL;AACEh0B,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC40B,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,aAAKrU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,eAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;;AACF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC40B,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,aAAKtU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,eAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;;AACF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACg0B,YAAL,GAAoB,IAApB;AACAh0B,QAAAA,IAAI,CAAC40B,OAAL,GAAe,KAAKO,qBAAL,CACbP,OAAO,CAACG,aADK,EAEbH,OAAO,CAACI,gBAFK,EAGb;AAAEzB,UAAAA;AAAF,SAHa,CAAf;AAKA,aAAK/S,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,eAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;;AACF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAAC40B,OAAL,GAAeA,OAAO,CAACI,gBAAvB;AACA,aAAKxU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,eAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;;AACF;AAAS;AAEP,gBAAMw1B,KAAK,GAAG,MAAM;AAClBx1B,YAAAA,IAAI,CAAC40B,OAAL,GAAe,EAAf;AACA,iBAAKpU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,mBAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAJD;;AAKAA,UAAAA,IAAI,CAACg0B,YAAL,GAAoB,KAApB;AAEA,gBAAMyB,QAAQ,GAAGb,OAAO,CAACC,cAAR,CAAuBj0B,MAAxC;AACA,gBAAM80B,OAAO,GAAGd,OAAO,CAACE,aAAR,CAAsBl0B,MAAtC;AACA,gBAAM+0B,OAAO,GAAGf,OAAO,CAACG,aAAR,CAAsBn0B,MAAtC;AACA,gBAAMg1B,YAAY,GAAGhB,OAAO,CAACI,gBAAR,CAAyBp0B,MAA9C;;AAEA,cAAI,CAAC60B,QAAD,IAAa,CAACC,OAAd,IAAyB,CAACC,OAA1B,IAAqC,CAACC,YAA1C,EAAwD;AACtD,mBAAOJ,KAAK,EAAZ;AACD,WAFD,MAEO,IAAI,CAACC,QAAD,IAAa,CAACC,OAAlB,EAA2B;AAChC11B,YAAAA,IAAI,CAAC40B,OAAL,GAAe,KAAKO,qBAAL,CACbP,OAAO,CAACG,aADK,EAEbH,OAAO,CAACI,gBAFK,EAGb;AAAEzB,cAAAA;AAAF,aAHa,CAAf;AAKA,iBAAK/S,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,mBAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WARM,MAQA,IAAI,CAAC01B,OAAD,IAAY,CAACC,OAAb,IAAwBF,QAAQ,IAAIG,YAAxC,EAAsD;AAC3D,iBAAK,MAAM/I,MAAX,IAAqB+H,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAK1B,wCAAL,CAA8CzG,MAAM,CAACnuB,KAArD,EAA4D;AAC1D60B,gBAAAA,QAD0D;AAE1DC,gBAAAA,UAAU,EAAE3G,MAAM,CAAClb,EAAP,CAAU9Z;AAFoC,eAA5D;AAID;;AACDmI,YAAAA,IAAI,CAAC40B,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,iBAAKrU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,mBAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD,WAVM,MAUA,IAAI,CAACy1B,QAAD,IAAa,CAACE,OAAd,IAAyBD,OAAO,IAAIE,YAAxC,EAAsD;AAC3D,iBAAK,MAAM/I,MAAX,IAAqB+H,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAKf,uCAAL,CAA6CpH,MAAM,CAACnuB,KAApD,EAA2D;AACzD60B,gBAAAA,QADyD;AAEzDC,gBAAAA,UAAU,EAAE3G,MAAM,CAAClb,EAAP,CAAU9Z;AAFmC,eAA3D;AAID;;AACDmI,YAAAA,IAAI,CAAC40B,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,iBAAKtU,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,mBAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAVM,MAUA;AACL,iBAAK4zB,qCAAL,CAA2C2B,OAA3C,EAAoD;AAAEhC,cAAAA;AAAF,aAApD;AACA,mBAAOiC,KAAK,EAAZ;AACD;AACF;AAxEH;AA0ED;;AAED9L,EAAAA,wBAAwB,CAAC1pB,IAAD,EAAuB;AAC7C,UAAM2R,EAAE,GAAG,KAAKyP,eAAL,EAAX;AACAphB,IAAAA,IAAI,CAAC2R,EAAL,GAAUA,EAAV;AACA3R,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKukB,YAAL,CAAkB,KAAKnjB,SAAL,EAAlB,EAAoC;AAC9CohB,MAAAA,QAAQ,EAAE5hB,EAAE,CAAC9Z,IADiC;AAE9C09B,MAAAA,OAAO,EAAE5jB,EAAE,CAACjT;AAFkC,KAApC,CAAZ;AAIA,WAAO,KAAK4T,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAGDkyB,EAAAA,mBAAmB,GAAY;AAC7B,UAAMzb,IAAI,GAAG,KAAKof,cAAL,EAAb;;AACA,QAAI,KAAK92B,KAAL,CAAWiD,UAAX,CAAsByU,IAAtB,QAAJ,EAAwD;AACtD,YAAMqf,SAAS,GAAG,KAAK/2B,KAAL,CAAWiD,UAAX,CAAsByU,IAAI,GAAG,CAA7B,CAAlB;AACA,aACEqf,SAAS,OAAT,IAAoCA,SAAS,OAD/C;AAGD;;AACD,WAAO,KAAP;AACD;;AAED3E,EAAAA,6BAA6B,CAACnxB,IAAD,EAAe;AAC1C,WAAOA,IAAI,CAACiC,IAAL,KAAc,oBAAd,GAAqCjC,IAAI,CAACyP,UAA1C,GAAuDzP,IAA9D;AACD;;AA37GsB,CAD3B;;ACnMA,MAAM+1B,QAAoC,GAAG;AAC3CC,EAAAA,IAAI,EAAE,QADqC;AAE3CC,EAAAA,GAAG,EAAE,GAFsC;AAG3CC,EAAAA,IAAI,EAAE,QAHqC;AAI3CC,EAAAA,EAAE,EAAE,GAJuC;AAK3CC,EAAAA,EAAE,EAAE,GALuC;AAM3CC,EAAAA,IAAI,EAAE,QANqC;AAO3CC,EAAAA,KAAK,EAAE,QAPoC;AAQ3CC,EAAAA,IAAI,EAAE,QARqC;AAS3CC,EAAAA,KAAK,EAAE,QAToC;AAU3CC,EAAAA,MAAM,EAAE,QAVmC;AAW3CC,EAAAA,GAAG,EAAE,QAXsC;AAY3CC,EAAAA,MAAM,EAAE,QAZmC;AAa3CC,EAAAA,IAAI,EAAE,QAbqC;AAc3CC,EAAAA,GAAG,EAAE,QAdsC;AAe3CC,EAAAA,IAAI,EAAE,QAfqC;AAgB3CC,EAAAA,IAAI,EAAE,QAhBqC;AAiB3CC,EAAAA,KAAK,EAAE,QAjBoC;AAkB3CC,EAAAA,GAAG,EAAE,QAlBsC;AAmB3CC,EAAAA,GAAG,EAAE,QAnBsC;AAoB3CC,EAAAA,GAAG,EAAE,QApBsC;AAqB3CC,EAAAA,IAAI,EAAE,QArBqC;AAsB3CC,EAAAA,GAAG,EAAE,QAtBsC;AAuB3CC,EAAAA,MAAM,EAAE,QAvBmC;AAwB3CC,EAAAA,IAAI,EAAE,QAxBqC;AAyB3CC,EAAAA,IAAI,EAAE,QAzBqC;AA0B3CC,EAAAA,KAAK,EAAE,QA1BoC;AA2B3CC,EAAAA,KAAK,EAAE,QA3BoC;AA4B3CC,EAAAA,IAAI,EAAE,QA5BqC;AA6B3CC,EAAAA,MAAM,EAAE,QA7BmC;AA8B3CC,EAAAA,KAAK,EAAE,QA9BoC;AA+B3CC,EAAAA,IAAI,EAAE,QA/BqC;AAgC3CC,EAAAA,IAAI,EAAE,QAhCqC;AAiC3CC,EAAAA,KAAK,EAAE,QAjCoC;AAkC3CC,EAAAA,MAAM,EAAE,QAlCmC;AAmC3CC,EAAAA,MAAM,EAAE,QAnCmC;AAoC3CC,EAAAA,MAAM,EAAE,QApCmC;AAqC3CC,EAAAA,MAAM,EAAE,QArCmC;AAsC3CC,EAAAA,MAAM,EAAE,QAtCmC;AAuC3CC,EAAAA,MAAM,EAAE,QAvCmC;AAwC3CC,EAAAA,KAAK,EAAE,QAxCoC;AAyC3CC,EAAAA,MAAM,EAAE,QAzCmC;AA0C3CC,EAAAA,IAAI,EAAE,QA1CqC;AA2C3CC,EAAAA,KAAK,EAAE,QA3CoC;AA4C3CC,EAAAA,KAAK,EAAE,QA5CoC;AA6C3CC,EAAAA,MAAM,EAAE,QA7CmC;AA8C3CC,EAAAA,MAAM,EAAE,QA9CmC;AA+C3CC,EAAAA,MAAM,EAAE,QA/CmC;AAgD3CC,EAAAA,KAAK,EAAE,QAhDoC;AAiD3CC,EAAAA,IAAI,EAAE,QAjDqC;AAkD3CC,EAAAA,MAAM,EAAE,QAlDmC;AAmD3CC,EAAAA,MAAM,EAAE,QAnDmC;AAoD3CC,EAAAA,KAAK,EAAE,QApDoC;AAqD3CC,EAAAA,IAAI,EAAE,QArDqC;AAsD3CC,EAAAA,GAAG,EAAE,QAtDsC;AAuD3CC,EAAAA,MAAM,EAAE,QAvDmC;AAwD3CC,EAAAA,MAAM,EAAE,QAxDmC;AAyD3CC,EAAAA,MAAM,EAAE,QAzDmC;AA0D3CC,EAAAA,KAAK,EAAE,QA1DoC;AA2D3CC,EAAAA,MAAM,EAAE,QA3DmC;AA4D3CC,EAAAA,IAAI,EAAE,QA5DqC;AA6D3CC,EAAAA,KAAK,EAAE,QA7DoC;AA8D3CC,EAAAA,MAAM,EAAE,QA9DmC;AA+D3CC,EAAAA,MAAM,EAAE,QA/DmC;AAgE3CC,EAAAA,MAAM,EAAE,QAhEmC;AAiE3CC,EAAAA,KAAK,EAAE,QAjEoC;AAkE3CC,EAAAA,IAAI,EAAE,QAlEqC;AAmE3CC,EAAAA,MAAM,EAAE,QAnEmC;AAoE3CC,EAAAA,KAAK,EAAE,QApEoC;AAqE3CC,EAAAA,KAAK,EAAE,QArEoC;AAsE3CC,EAAAA,MAAM,EAAE,QAtEmC;AAuE3CC,EAAAA,MAAM,EAAE,QAvEmC;AAwE3CC,EAAAA,KAAK,EAAE,QAxEoC;AAyE3CC,EAAAA,MAAM,EAAE,QAzEmC;AA0E3CC,EAAAA,IAAI,EAAE,QA1EqC;AA2E3CC,EAAAA,KAAK,EAAE,QA3EoC;AA4E3CC,EAAAA,KAAK,EAAE,QA5EoC;AA6E3CC,EAAAA,MAAM,EAAE,QA7EmC;AA8E3CC,EAAAA,MAAM,EAAE,QA9EmC;AA+E3CC,EAAAA,MAAM,EAAE,QA/EmC;AAgF3CC,EAAAA,KAAK,EAAE,QAhFoC;AAiF3CC,EAAAA,IAAI,EAAE,QAjFqC;AAkF3CC,EAAAA,MAAM,EAAE,QAlFmC;AAmF3CC,EAAAA,MAAM,EAAE,QAnFmC;AAoF3CC,EAAAA,KAAK,EAAE,QApFoC;AAqF3CC,EAAAA,IAAI,EAAE,QArFqC;AAsF3CC,EAAAA,GAAG,EAAE,QAtFsC;AAuF3CC,EAAAA,MAAM,EAAE,QAvFmC;AAwF3CC,EAAAA,MAAM,EAAE,QAxFmC;AAyF3CC,EAAAA,MAAM,EAAE,QAzFmC;AA0F3CC,EAAAA,KAAK,EAAE,QA1FoC;AA2F3CC,EAAAA,MAAM,EAAE,QA3FmC;AA4F3CC,EAAAA,IAAI,EAAE,QA5FqC;AA6F3CC,EAAAA,MAAM,EAAE,QA7FmC;AA8F3CC,EAAAA,MAAM,EAAE,QA9FmC;AA+F3CC,EAAAA,MAAM,EAAE,QA/FmC;AAgG3CC,EAAAA,MAAM,EAAE,QAhGmC;AAiG3CC,EAAAA,KAAK,EAAE,QAjGoC;AAkG3CC,EAAAA,IAAI,EAAE,QAlGqC;AAmG3CC,EAAAA,MAAM,EAAE,QAnGmC;AAoG3CC,EAAAA,KAAK,EAAE,QApGoC;AAqG3CC,EAAAA,IAAI,EAAE,QArGqC;AAsG3CC,EAAAA,KAAK,EAAE,QAtGoC;AAuG3CC,EAAAA,KAAK,EAAE,QAvGoC;AAwG3CC,EAAAA,MAAM,EAAE,QAxGmC;AAyG3CC,EAAAA,MAAM,EAAE,QAzGmC;AA0G3CC,EAAAA,IAAI,EAAE,QA1GqC;AA2G3CC,EAAAA,IAAI,EAAE,QA3GqC;AA4G3CC,EAAAA,IAAI,EAAE,QA5GqC;AA6G3CjiC,EAAAA,KAAK,EAAE,QA7GoC;AA8G3CkiC,EAAAA,KAAK,EAAE,QA9GoC;AA+G3CC,EAAAA,IAAI,EAAE,QA/GqC;AAgH3CC,EAAAA,KAAK,EAAE,QAhHoC;AAiH3CC,EAAAA,KAAK,EAAE,QAjHoC;AAkH3CC,EAAAA,OAAO,EAAE,QAlHkC;AAmH3CC,EAAAA,IAAI,EAAE,QAnHqC;AAoH3CC,EAAAA,GAAG,EAAE,QApHsC;AAqH3CC,EAAAA,KAAK,EAAE,QArHoC;AAsH3CC,EAAAA,IAAI,EAAE,QAtHqC;AAuH3CC,EAAAA,KAAK,EAAE,QAvHoC;AAwH3CC,EAAAA,MAAM,EAAE,QAxHmC;AAyH3CC,EAAAA,EAAE,EAAE,QAzHuC;AA0H3CC,EAAAA,EAAE,EAAE,QA1HuC;AA2H3CC,EAAAA,EAAE,EAAE,QA3HuC;AA4H3CC,EAAAA,OAAO,EAAE,QA5HkC;AA6H3CC,EAAAA,EAAE,EAAE,QA7HuC;AA8H3CC,EAAAA,GAAG,EAAE,QA9HsC;AA+H3CC,EAAAA,KAAK,EAAE,QA/HoC;AAgI3CC,EAAAA,GAAG,EAAE,QAhIsC;AAiI3CC,EAAAA,OAAO,EAAE,QAjIkC;AAkI3CC,EAAAA,GAAG,EAAE,QAlIsC;AAmI3CC,EAAAA,GAAG,EAAE,QAnIsC;AAoI3CC,EAAAA,GAAG,EAAE,QApIsC;AAqI3CC,EAAAA,KAAK,EAAE,QArIoC;AAsI3CC,EAAAA,KAAK,EAAE,QAtIoC;AAuI3CC,EAAAA,IAAI,EAAE,QAvIqC;AAwI3CC,EAAAA,KAAK,EAAE,QAxIoC;AAyI3CC,EAAAA,KAAK,EAAE,QAzIoC;AA0I3CC,EAAAA,OAAO,EAAE,QA1IkC;AA2I3CC,EAAAA,IAAI,EAAE,QA3IqC;AA4I3CC,EAAAA,GAAG,EAAE,QA5IsC;AA6I3CC,EAAAA,KAAK,EAAE,QA7IoC;AA8I3CC,EAAAA,IAAI,EAAE,QA9IqC;AA+I3CC,EAAAA,KAAK,EAAE,QA/IoC;AAgJ3CC,EAAAA,MAAM,EAAE,QAhJmC;AAiJ3CC,EAAAA,EAAE,EAAE,QAjJuC;AAkJ3CC,EAAAA,EAAE,EAAE,QAlJuC;AAmJ3CC,EAAAA,EAAE,EAAE,QAnJuC;AAoJ3CC,EAAAA,OAAO,EAAE,QApJkC;AAqJ3CC,EAAAA,EAAE,EAAE,QArJuC;AAsJ3CC,EAAAA,GAAG,EAAE,QAtJsC;AAuJ3CC,EAAAA,MAAM,EAAE,QAvJmC;AAwJ3CC,EAAAA,KAAK,EAAE,QAxJoC;AAyJ3CC,EAAAA,GAAG,EAAE,QAzJsC;AA0J3CC,EAAAA,OAAO,EAAE,QA1JkC;AA2J3CC,EAAAA,GAAG,EAAE,QA3JsC;AA4J3CC,EAAAA,GAAG,EAAE,QA5JsC;AA6J3CC,EAAAA,GAAG,EAAE,QA7JsC;AA8J3CC,EAAAA,KAAK,EAAE,QA9JoC;AA+J3CC,EAAAA,QAAQ,EAAE,QA/JiC;AAgK3CC,EAAAA,KAAK,EAAE,QAhKoC;AAiK3CC,EAAAA,GAAG,EAAE,QAjKsC;AAkK3CC,EAAAA,IAAI,EAAE,QAlKqC;AAmK3CC,EAAAA,IAAI,EAAE,QAnKqC;AAoK3CC,EAAAA,MAAM,EAAE,QApKmC;AAqK3CC,EAAAA,IAAI,EAAE,QArKqC;AAsK3CC,EAAAA,GAAG,EAAE,QAtKsC;AAuK3CC,EAAAA,GAAG,EAAE,QAvKsC;AAwK3CC,EAAAA,GAAG,EAAE,QAxKsC;AAyK3CC,EAAAA,KAAK,EAAE,QAzKoC;AA0K3CC,EAAAA,KAAK,EAAE,QA1KoC;AA2K3CC,EAAAA,KAAK,EAAE,QA3KoC;AA4K3CC,EAAAA,KAAK,EAAE,QA5KoC;AA6K3CC,EAAAA,KAAK,EAAE,QA7KoC;AA8K3CC,EAAAA,KAAK,EAAE,QA9KoC;AA+K3CC,EAAAA,KAAK,EAAE,QA/KoC;AAgL3CC,EAAAA,KAAK,EAAE,QAhLoC;AAiL3CC,EAAAA,MAAM,EAAE,QAjLmC;AAkL3CC,EAAAA,MAAM,EAAE,QAlLmC;AAmL3CC,EAAAA,IAAI,EAAE,QAnLqC;AAoL3CC,EAAAA,MAAM,EAAE,QApLmC;AAqL3CC,EAAAA,MAAM,EAAE,QArLmC;AAsL3CC,EAAAA,KAAK,EAAE,QAtLoC;AAuL3CC,EAAAA,KAAK,EAAE,QAvLoC;AAwL3CC,EAAAA,MAAM,EAAE,QAxLmC;AAyL3CC,EAAAA,MAAM,EAAE,QAzLmC;AA0L3CC,EAAAA,KAAK,EAAE,QA1LoC;AA2L3CC,EAAAA,KAAK,EAAE,QA3LoC;AA4L3CC,EAAAA,IAAI,EAAE,QA5LqC;AA6L3CC,EAAAA,KAAK,EAAE,QA7LoC;AA8L3CC,EAAAA,MAAM,EAAE,QA9LmC;AA+L3CC,EAAAA,IAAI,EAAE,QA/LqC;AAgM3CC,EAAAA,KAAK,EAAE,QAhMoC;AAiM3CC,EAAAA,OAAO,EAAE,QAjMkC;AAkM3CC,EAAAA,IAAI,EAAE,QAlMqC;AAmM3CC,EAAAA,IAAI,EAAE,QAnMqC;AAoM3CC,EAAAA,IAAI,EAAE,QApMqC;AAqM3CC,EAAAA,IAAI,EAAE,QArMqC;AAsM3CC,EAAAA,IAAI,EAAE,QAtMqC;AAuM3CC,EAAAA,KAAK,EAAE,QAvMoC;AAwM3CC,EAAAA,IAAI,EAAE,QAxMqC;AAyM3CC,EAAAA,IAAI,EAAE,QAzMqC;AA0M3CC,EAAAA,IAAI,EAAE,QA1MqC;AA2M3CC,EAAAA,IAAI,EAAE,QA3MqC;AA4M3CC,EAAAA,IAAI,EAAE,QA5MqC;AA6M3CC,EAAAA,MAAM,EAAE,QA7MmC;AA8M3CC,EAAAA,IAAI,EAAE,QA9MqC;AA+M3CC,EAAAA,KAAK,EAAE,QA/MoC;AAgN3CrN,EAAAA,KAAK,EAAE,QAhNoC;AAiN3CsN,EAAAA,KAAK,EAAE,QAjNoC;AAkN3CC,EAAAA,IAAI,EAAE,QAlNqC;AAmN3CC,EAAAA,KAAK,EAAE,QAnNoC;AAoN3CC,EAAAA,EAAE,EAAE,QApNuC;AAqN3CC,EAAAA,IAAI,EAAE,QArNqC;AAsN3CC,EAAAA,GAAG,EAAE,QAtNsC;AAuN3CC,EAAAA,KAAK,EAAE,QAvNoC;AAwN3CC,EAAAA,MAAM,EAAE,QAxNmC;AAyN3CC,EAAAA,KAAK,EAAE,QAzNoC;AA0N3C3wB,EAAAA,IAAI,EAAE,QA1NqC;AA2N3C4wB,EAAAA,KAAK,EAAE,QA3NoC;AA4N3CC,EAAAA,GAAG,EAAE,QA5NsC;AA6N3CC,EAAAA,GAAG,EAAE,QA7NsC;AA8N3CC,EAAAA,EAAE,EAAE,QA9NuC;AA+N3CC,EAAAA,GAAG,EAAE,QA/NsC;AAgO3CC,EAAAA,GAAG,EAAE,QAhOsC;AAiO3CC,EAAAA,GAAG,EAAE,QAjOsC;AAkO3CC,EAAAA,MAAM,EAAE,QAlOmC;AAmO3CC,EAAAA,GAAG,EAAE,QAnOsC;AAoO3CC,EAAAA,IAAI,EAAE,QApOqC;AAqO3CC,EAAAA,KAAK,EAAE,QArOoC;AAsO3CC,EAAAA,EAAE,EAAE,QAtOuC;AAuO3CC,EAAAA,KAAK,EAAE,QAvOoC;AAwO3CC,EAAAA,EAAE,EAAE,QAxOuC;AAyO3CC,EAAAA,EAAE,EAAE,QAzOuC;AA0O3CC,EAAAA,GAAG,EAAE,QA1OsC;AA2O3CC,EAAAA,GAAG,EAAE,QA3OsC;AA4O3CC,EAAAA,IAAI,EAAE,QA5OqC;AA6O3CC,EAAAA,IAAI,EAAE,QA7OqC;AA8O3CC,EAAAA,IAAI,EAAE,QA9OqC;AA+O3CC,EAAAA,KAAK,EAAE,QA/OoC;AAgP3CC,EAAAA,MAAM,EAAE,QAhPmC;AAiP3CC,EAAAA,IAAI,EAAE,QAjPqC;AAkP3CC,EAAAA,IAAI,EAAE,QAlPqC;AAmP3CC,EAAAA,KAAK,EAAE,QAnPoC;AAoP3CC,EAAAA,KAAK,EAAE,QApPoC;AAqP3CC,EAAAA,MAAM,EAAE,QArPmC;AAsP3CC,EAAAA,MAAM,EAAE,QAtPmC;AAuP3CC,EAAAA,IAAI,EAAE,QAvPqC;AAwP3CC,EAAAA,IAAI,EAAE,QAxPqC;AAyP3CC,EAAAA,GAAG,EAAE,QAzPsC;AA0P3CC,EAAAA,MAAM,EAAE,QA1PmC;AA2P3CC,EAAAA,KAAK,EAAE,QA3PoC;AA4P3CC,EAAAA,MAAM,EAAE,QA5PmC;AA6P3CC,EAAAA,KAAK,EAAE;AA7PoC,CAA7C;;ACsBe,MAAMC,KAAN,CAAY;AAAA;AAAA,SACzB/vB,MADyB;AAAA,SAEzBgwB,OAFyB;AAAA,SAMzB94B,QANyB;AAAA,SAOzBG,MAPyB;AAAA,SAqBzBU,MArByB,GAqBA,EArBA;AAAA,SAwBzBk4B,gBAxByB,GAwBE,CAAC,CAxBH;AAAA,SA8BzBpb,SA9ByB,GA8BH,EA9BG;AAAA,SAsCzBS,yBAtCyB,GAsCa,EAtCb;AAAA,SAyCzBhB,sBAzCyB,GAyCS,KAzCT;AAAA,SA0CzB4b,UA1CyB,GA0CH,KA1CG;AAAA,SA2CzBtlB,MA3CyB,GA2CP,KA3CO;AAAA,SA4CzBmF,kBA5CyB,GA4CK,KA5CL;AAAA,SA6CzBogB,cA7CyB,GA6CC,KA7CD;AAAA,SA8CzBtT,cA9CyB,GA8CC,KA9CD;AAAA,SA+CzBuT,gBA/CyB,GA+CG,KA/CH;AAAA,SAgDzBC,eAhDyB,GAgDE,KAhDF;AAAA,SAmDzBC,YAnDyB,GAmDS;AAChCC,MAAAA,wBAAwB,EAAE,CADM;AAEhCC,MAAAA,aAAa,EAAE;AAFiB,KAnDT;AAAA,SAyDzBC,SAzDyB,GAyDJ,KAzDI;AAAA,SA0DzBC,0BA1DyB,GA0Da,KA1Db;AAAA,SA6DzBC,MA7DyB,GAiEpB,EAjEoB;AAAA,SAsEzBC,cAtEyB,GAsEmB,CAAC,EAAD,CAtEnB;AAAA,SAyEzBtmC,QAzEyB,GAyEI,EAzEJ;AAAA,SA4EzBmB,YA5EyB,GA4EgB,EA5EhB;AAAA,SA+EzBwL,GA/EyB,GA+EX,CA/EW;AAAA,SAgFzB3N,SAhFyB,GAgFL,CAhFK;AAAA,SAoFzBgD,IApFyB,GAoFP2S,OAAE,CAACnc,GApFI;AAAA,SAuFzBiW,KAvFyB,GAuFZ,IAvFY;AAAA,SA0FzBhQ,KA1FyB,GA0FT,CA1FS;AAAA,SA2FzBC,GA3FyB,GA2FX,CA3FW;AAAA,SA+FzBuO,aA/FyB,GA+FC,IA/FD;AAAA,SAiGzBH,eAjGyB,GAiGG,IAjGH;AAAA,SAkGzBD,YAlGyB,GAkGF,CAlGE;AAAA,SAmGzBG,UAnGyB,GAmGJ,CAnGI;AAAA,SAuGzB4H,OAvGyB,GAuGI,CAAC2xB,KAAE,CAAC7xB,KAAJ,CAvGJ;AAAA,SAyGzB8xB,WAzGyB,GAyGF,IAzGE;AAAA,SA8GzBC,WA9GyB,GA8GF,KA9GE;AAAA,SAwHzBC,YAxHyB,GAwHkB,IAAIhvC,GAAJ,EAxHlB;AAAA,SA2HzBivC,YA3HyB,GA2HF,CA3HE;AAAA;;AASzBrS,EAAAA,IAAI,CAACz8B,OAAD,EAAyB;AAC3B,SAAK6d,MAAL,GACE7d,OAAO,CAAC+uC,UAAR,KAAuB,KAAvB,GACI,KADJ,GAEI/uC,OAAO,CAAC+uC,UAAR,KAAuB,IAAvB,GACA,IADA,GAEA/uC,OAAO,CAACgvC,UAAR,KAAuB,QAL7B;AAOA,SAAKnB,OAAL,GAAe7tC,OAAO,CAACivC,SAAvB;AACA,SAAKl6B,QAAL,GAAgB,KAAKG,MAAL,GAAc,KAAKg6B,WAAL,EAA9B;AACD;;AA0GDA,EAAAA,WAAW,GAAa;AACtB,WAAO,IAAI3oC,QAAJ,CAAa,KAAKsnC,OAAlB,EAA2B,KAAK/4B,GAAL,GAAW,KAAK3N,SAA3C,CAAP;AACD;;AAEDqrB,EAAAA,KAAK,CAAC2c,UAAD,EAA8B;AACjC,UAAMhmC,KAAK,GAAG,IAAIykC,KAAJ,EAAd;AACA,UAAMn5B,IAAI,GAAG9J,MAAM,CAAC8J,IAAP,CAAY,IAAZ,CAAb;;AACA,SAAK,IAAI5L,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG2L,IAAI,CAAC3L,MAA9B,EAAsCD,CAAC,GAAGC,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAM0S,GAAG,GAAG9G,IAAI,CAAC5L,CAAD,CAAhB;AAEA,UAAIsf,GAAG,GAAG,KAAK5M,GAAL,CAAV;;AAEA,UAAI,CAAC4zB,UAAD,IAAeC,KAAK,CAACC,OAAN,CAAclnB,GAAd,CAAnB,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAACnQ,KAAJ,EAAN;AACD;;AAGD7O,MAAAA,KAAK,CAACoS,GAAD,CAAL,GAAa4M,GAAb;AACD;;AAED,WAAOhf,KAAP;AACD;;AAlJwB;;ACF3B,MAAMmmC,UAAU,GAAG,eAAnB;AACA,MAAMC,cAAc,GAAG,OAAvB;AAGA,MAAMC,SAAS,GAAGxkC,kBAAkB,CAClC;AACEykC,EAAAA,gBAAgB,EACd,8DAFJ;AAGEC,EAAAA,wBAAwB,EACtB,kDAJJ;AAKEC,EAAAA,yBAAyB,EAAE,gDAL7B;AAMEC,EAAAA,4BAA4B,EAC1B,0GAPJ;AAQEC,EAAAA,mBAAmB,EACjB,gEATJ;AAUEC,EAAAA,sBAAsB,EAAE,4BAV1B;AAWEC,EAAAA,4BAA4B,EAC1B;AAZJ,CADkC,EAevBrlC,UAAU,CAACG,WAfY,CAApC;AAqBAkuB,KAAE,CAACC,MAAH,GAAY,IAAIrc,UAAJ,CAAe,MAAf,CAAZ;AACAoc,KAAE,CAACiX,MAAH,GAAY,IAAIrzB,UAAJ,CAAe,OAAf,CAAZ;AACAoc,KAAE,CAACE,MAAH,GAAY,IAAItc,UAAJ,CAAe,gBAAf,EAAiC,IAAjC,CAAZ;AAEAG,OAAE,CAACmzB,OAAH,GAAa,IAAI7wC,SAAJ,CAAc,SAAd,CAAb;AACA0d,OAAE,CAACozB,OAAH,GAAa,IAAI9wC,SAAJ,CAAc,SAAd,EAAyB;AAAEN,EAAAA,UAAU,EAAE;AAAd,CAAzB,CAAb;AACAge,OAAE,CAACyQ,WAAH,GAAiB,IAAInuB,SAAJ,CAAc,aAAd,EAA6B;AAAEL,EAAAA,UAAU,EAAE;AAAd,CAA7B,CAAjB;AACA+d,OAAE,CAACqzB,SAAH,GAAe,IAAI/wC,SAAJ,CAAc,WAAd,CAAf;;AAEA0d,OAAE,CAACyQ,WAAH,CAAe5tB,aAAf,GAA+Bod,OAAO,IAAI;AACxCA,EAAAA,OAAO,CAAC3T,IAAR,CACE2vB,KAAE,CAACE,MADL,EAEEF,KAAE,CAACC,MAFL;AAID,CALD;;AAOA,SAASoX,UAAT,CAAoBC,MAApB,EAAoD;AAClD,SAAOA,MAAM,GACTA,MAAM,CAAClmC,IAAP,KAAgB,oBAAhB,IACEkmC,MAAM,CAAClmC,IAAP,KAAgB,oBAFT,GAGT,KAHJ;AAID;;AAID,SAASmmC,mBAAT,CACED,MADF,EAEU;AACR,MAAIA,MAAM,CAAClmC,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAOkmC,MAAM,CAACtwC,IAAd;AACD;;AAED,MAAIswC,MAAM,CAAClmC,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAOkmC,MAAM,CAACE,SAAP,CAAiBxwC,IAAjB,GAAwB,GAAxB,GAA8BswC,MAAM,CAACtwC,IAAP,CAAYA,IAAjD;AACD;;AAED,MAAIswC,MAAM,CAAClmC,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WACEmmC,mBAAmB,CAACD,MAAM,CAACA,MAAR,CAAnB,GACA,GADA,GAEAC,mBAAmB,CAACD,MAAM,CAAC3gB,QAAR,CAHrB;AAKD;;AAGD,QAAM,IAAIrH,KAAJ,CAAU,+BAA+BgoB,MAAM,CAAClmC,IAAhD,CAAN;AACD;;AAED,WAAgBiM,UAAD,IACb,cAAcA,UAAd,CAAyB;AAGvBo6B,EAAAA,YAAY,GAAS;AACnB,QAAInhB,GAAG,GAAG,EAAV;AACA,QAAIohB,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAA5B;;AACA,aAAS;AACP,UAAI,KAAK3L,KAAL,CAAW2L,GAAX,IAAkB,KAAKhM,MAA3B,EAAmC;AACjC,cAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4oC,SAAS,CAACM,sBAAvC,CAAN;AACD;;AAED,YAAMY,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;;AAEA,cAAQ47B,EAAR;AACE;AACA;AACE,cAAI,KAAKvnC,KAAL,CAAW2L,GAAX,KAAmB,KAAK3L,KAAL,CAAWvC,KAAlC,EAAyC;AACvC,gBAAI8pC,EAAE,OAAF,IAA6B,KAAKvnC,KAAL,CAAWwlC,WAA5C,EAAyD;AACvD,gBAAE,KAAKxlC,KAAL,CAAW2L,GAAb;AACA,qBAAO,KAAKoT,WAAL,CAAiBpL,OAAE,CAACyQ,WAApB,CAAP;AACD;;AACD,mBAAO,MAAM8H,gBAAN,CAAuBqb,EAAvB,CAAP;AACD;;AACDrhB,UAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACA,iBAAO,KAAKoT,WAAL,CAAiBpL,OAAE,CAACozB,OAApB,EAA6B7gB,GAA7B,CAAP;;AAEF;AACEA,UAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACAua,UAAAA,GAAG,IAAI,KAAKshB,aAAL,EAAP;AACAF,UAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACA;;AAEF;AACA;;AAaA;AACE,cAAI3O,SAAS,CAACuqC,EAAD,CAAb,EAAmB;AACjBrhB,YAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACAua,YAAAA,GAAG,IAAI,KAAKuhB,cAAL,CAAoB,IAApB,CAAP;AACAH,YAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,WAJD,MAIO;AACL,cAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;;AAxCL;AA0CD;AACF;;AAED87B,EAAAA,cAAc,CAACC,aAAD,EAAiC;AAC7C,UAAMH,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;AACA,QAAIua,GAAJ;AACA,MAAE,KAAKlmB,KAAL,CAAW2L,GAAb;;AACA,QACE47B,EAAE,OAAF,IACA,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,QAFF,EAGE;AACA,QAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACAua,MAAAA,GAAG,GAAGwhB,aAAa,GAAG,IAAH,GAAU,MAA7B;AACD,KAND,MAMO;AACLxhB,MAAAA,GAAG,GAAGtY,MAAM,CAAC2G,YAAP,CAAoBgzB,EAApB,CAAN;AACD;;AACD,MAAE,KAAKvnC,KAAL,CAAW0kC,OAAb;AACA,SAAK1kC,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW2L,GAAlC;AAEA,WAAOua,GAAP;AACD;;AAEDyhB,EAAAA,aAAa,CAACC,KAAD,EAAsB;AACjC,QAAI1hB,GAAG,GAAG,EAAV;AACA,QAAIohB,UAAU,GAAG,EAAE,KAAKtnC,KAAL,CAAW2L,GAA9B;;AACA,aAAS;AACP,UAAI,KAAK3L,KAAL,CAAW2L,GAAX,IAAkB,KAAKhM,MAA3B,EAAmC;AACjC,cAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC1H,kBAApC,CAAN;AACD;;AAED,YAAM48B,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;AACA,UAAI47B,EAAE,KAAKK,KAAX,EAAkB;;AAClB,UAAIL,EAAE,OAAN,EAAgC;AAC9BrhB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACAua,QAAAA,GAAG,IAAI,KAAKshB,aAAL,EAAP;AACAF,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OAJD,MAIO,IAAI3O,SAAS,CAACuqC,EAAD,CAAb,EAAmB;AACxBrhB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACAua,QAAAA,GAAG,IAAI,KAAKuhB,cAAL,CAAoB,KAApB,CAAP;AACAH,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OAJM,MAIA;AACL,UAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;AACF;;AACDua,IAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAX,EAA7B,CAAP;AACA,WAAO,KAAKoT,WAAL,CAAiBpL,OAAE,CAACrc,MAApB,EAA4B4uB,GAA5B,CAAP;AACD;;AAEDshB,EAAAA,aAAa,GAAW;AACtB,QAAIK,GAAG,GAAG,EAAV;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAJ;AACA,QAAIR,EAAE,GAAG,KAAKzpC,KAAL,CAAW,KAAKkC,KAAL,CAAW2L,GAAtB,CAAT;AAEA,UAAMoG,QAAQ,GAAG,EAAE,KAAK/R,KAAL,CAAW2L,GAA9B;;AACA,WAAO,KAAK3L,KAAL,CAAW2L,GAAX,GAAiB,KAAKhM,MAAtB,IAAgCmoC,KAAK,KAAK,EAAjD,EAAqD;AACnDP,MAAAA,EAAE,GAAG,KAAKzpC,KAAL,CAAW,KAAKkC,KAAL,CAAW2L,GAAX,EAAX,CAAL;;AACA,UAAI47B,EAAE,KAAK,GAAX,EAAgB;AACd,YAAIM,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,cAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AACA,gBAAI7B,UAAU,CAAC7xB,IAAX,CAAgBuzB,GAAhB,CAAJ,EAA0B;AACxBE,cAAAA,MAAM,GAAGn6B,MAAM,CAACq6B,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF,WALD,MAKO;AACLA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AACA,gBAAI5B,cAAc,CAAC9xB,IAAf,CAAoBuzB,GAApB,CAAJ,EAA8B;AAC5BE,cAAAA,MAAM,GAAGn6B,MAAM,CAACq6B,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF;AACF,SAZD,MAYO;AACLE,UAAAA,MAAM,GAAGI,QAAa,CAACN,GAAD,CAAtB;AACD;;AACD;AACD;;AACDA,MAAAA,GAAG,IAAIN,EAAP;AACD;;AACD,QAAI,CAACQ,MAAL,EAAa;AACX,WAAK/nC,KAAL,CAAW2L,GAAX,GAAiBoG,QAAjB;AACA,aAAO,GAAP;AACD;;AACD,WAAOg2B,MAAP;AACD;;AASDK,EAAAA,WAAW,GAAS;AAClB,QAAIb,EAAJ;AACA,UAAM9pC,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;;AACA,OAAG;AACD47B,MAAAA,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW2L,GAAnC,CAAL;AACD,KAFD,QAES6I,gBAAgB,CAAC+yB,EAAD,CAAhB,IAAwBA,EAAE,OAFnC;;AAGA,WAAO,KAAKxoB,WAAL,CACLpL,OAAE,CAACmzB,OADE,EAEL,KAAKhpC,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW2L,GAAnC,CAFK,CAAP;AAID;;AAID08B,EAAAA,kBAAkB,GAAoB;AACpC,UAAMtpC,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AACA,QAAI,KAAKjT,KAAL,CAAW0V,OAAE,CAACmzB,OAAd,CAAJ,EAA4B;AAC1B/nC,MAAAA,IAAI,CAACnI,IAAL,GAAY,KAAKoJ,KAAL,CAAWyN,KAAvB;AACD,KAFD,MAEO,IAAI,KAAKzN,KAAL,CAAWgB,IAAX,CAAgB3K,OAApB,EAA6B;AAClC0I,MAAAA,IAAI,CAACnI,IAAL,GAAY,KAAKoJ,KAAL,CAAWgB,IAAX,CAAgB3K,OAA5B;AACD,KAFM,MAEA;AACL,WAAKsrB,UAAL;AACD;;AACD,SAAKnM,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAIDupC,EAAAA,sBAAsB,GAAwB;AAC5C,UAAMv2B,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAMhV,IAAI,GAAG,KAAKyxC,kBAAL,EAAb;AACA,QAAI,CAAC,KAAKzoB,GAAL,CAASjM,OAAE,CAACpb,KAAZ,CAAL,EAAyB,OAAO3B,IAAP;AAEzB,UAAMmI,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,IAAAA,IAAI,CAACqoC,SAAL,GAAiBxwC,IAAjB;AACAmI,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAKyxC,kBAAL,EAAZ;AACA,WAAO,KAAKh3B,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAKDwpC,EAAAA,mBAAmB,GAGO;AACxB,UAAMx2B,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,QAAI7M,IAAI,GAAG,KAAKupC,sBAAL,EAAX;;AACA,QAAIvpC,IAAI,CAACiC,IAAL,KAAc,mBAAlB,EAAuC;AACrC,aAAOjC,IAAP;AACD;;AACD,WAAO,KAAK6gB,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAP,EAAyB;AACvB,YAAM+vC,OAAO,GAAG,KAAKj6B,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAhB;AACA48B,MAAAA,OAAO,CAACtB,MAAR,GAAiBnoC,IAAjB;AACAypC,MAAAA,OAAO,CAACjiB,QAAR,GAAmB,KAAK8hB,kBAAL,EAAnB;AACAtpC,MAAAA,IAAI,GAAG,KAAKsS,UAAL,CAAgBm3B,OAAhB,EAAyB,qBAAzB,CAAP;AACD;;AACD,WAAOzpC,IAAP;AACD;;AAID0pC,EAAAA,sBAAsB,GAAiB;AACrC,QAAI1pC,IAAJ;;AACA,YAAQ,KAAKiB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC7b,MAAR;AACEiH,QAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;AACA,aAAKsE,IAAL;AACAzW,QAAAA,IAAI,GAAG,KAAK2pC,2BAAL,CAAiC3pC,IAAjC,CAAP;;AACA,YAAIA,IAAI,CAACyP,UAAL,CAAgBxN,IAAhB,KAAyB,oBAA7B,EAAmD;AACjD,eAAKkL,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4oC,SAAS,CAACC,gBAAjC;AACD;;AACD,eAAOvnC,IAAP;;AAEF,WAAK4U,OAAE,CAACyQ,WAAR;AACA,WAAKzQ,OAAE,CAACrc,MAAR;AACE,eAAO,KAAKuqB,aAAL,EAAP;;AAEF;AACE,cAAM,KAAK3V,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4oC,SAAS,CAACK,mBAAvC,CAAN;AAfJ;AAiBD;;AAMDiC,EAAAA,uBAAuB,GAAyB;AAC9C,UAAM5pC,IAAI,GAAG,KAAKwP,WAAL,CACX,KAAKvO,KAAL,CAAWgM,UADA,EAEX,KAAKhM,KAAL,CAAWiM,aAFA,CAAb;AAIA,WAAO,KAAK2C,YAAL,CACL7P,IADK,EAEL,oBAFK,EAGL,KAAKiB,KAAL,CAAWvC,KAHN,EAIL,KAAKuC,KAAL,CAAW4L,QAJN,CAAP;AAMD;;AAIDg9B,EAAAA,mBAAmB,CAAC7pC,IAAD,EAA2C;AAC5D,SAAKyW,IAAL;AACAzW,IAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKqR,eAAL,EAAlB;AACA,SAAKN,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AAEA,WAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAID2pC,EAAAA,2BAA2B,CACzB3pC,IADyB,EAEC;AAC1B,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAJ,EAA2B;AACzB8G,MAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKm6B,uBAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAMn6B,UAAU,GAAG,KAAKqR,eAAL,EAAnB;AAcA9gB,MAAAA,IAAI,CAACyP,UAAL,GAAkBA,UAAlB;AACD;;AACD,SAAK+Q,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AAEA,WAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAID8pC,EAAAA,iBAAiB,GAAmB;AAClC,UAAM9pC,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AACA,QAAI,KAAK0O,GAAL,CAASjM,OAAE,CAAC7b,MAAZ,CAAJ,EAAyB;AACvB,WAAKynB,MAAL,CAAY5L,OAAE,CAAC7a,QAAf;AACAiG,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK6D,uBAAL,EAAhB;AACA,WAAK1K,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,aAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AACDA,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAK0xC,sBAAL,EAAZ;AACAvpC,IAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKmS,GAAL,CAASjM,OAAE,CAACva,EAAZ,IAAkB,KAAKqvC,sBAAL,EAAlB,GAAkD,IAA/D;AACA,WAAO,KAAKp3B,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAID+pC,EAAAA,wBAAwB,CACtB/2B,QADsB,EAEtBnG,QAFsB,EAGD;AACrB,UAAM7M,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;;AACA,QAAI,KAAK3N,KAAL,CAAW0V,OAAE,CAACqzB,SAAd,CAAJ,EAA8B;AAC5B,WAAKznB,MAAL,CAAY5L,OAAE,CAACqzB,SAAf;AACA,aAAO,KAAK31B,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AACDA,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAK2xC,mBAAL,EAAZ;AACA,WAAO,KAAKQ,+BAAL,CAAqChqC,IAArC,CAAP;AACD;;AAEDgqC,EAAAA,+BAA+B,CAC7BhqC,IAD6B,EAER;AACrB,UAAM0T,UAA4B,GAAG,EAArC;;AACA,WAAO,CAAC,KAAKxU,KAAL,CAAW0V,OAAE,CAACpZ,KAAd,CAAD,IAAyB,CAAC,KAAK0D,KAAL,CAAW0V,OAAE,CAACqzB,SAAd,CAAjC,EAA2D;AACzDv0B,MAAAA,UAAU,CAACxS,IAAX,CAAgB,KAAK4oC,iBAAL,EAAhB;AACD;;AACD9pC,IAAAA,IAAI,CAAC0T,UAAL,GAAkBA,UAAlB;AACA1T,IAAAA,IAAI,CAACiqC,WAAL,GAAmB,KAAKppB,GAAL,CAASjM,OAAE,CAACpZ,KAAZ,CAAnB;AACA,SAAKglB,MAAL,CAAY5L,OAAE,CAACqzB,SAAf;AACA,WAAO,KAAK31B,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAIDkqC,EAAAA,wBAAwB,CACtBl3B,QADsB,EAEtBnG,QAFsB,EAGD;AACrB,UAAM7M,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;;AACA,QAAI,KAAK3N,KAAL,CAAW0V,OAAE,CAACqzB,SAAd,CAAJ,EAA8B;AAC5B,WAAKznB,MAAL,CAAY5L,OAAE,CAACqzB,SAAf;AACA,aAAO,KAAK31B,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AACDA,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAK2xC,mBAAL,EAAZ;AACA,SAAKhpB,MAAL,CAAY5L,OAAE,CAACqzB,SAAf;AACA,WAAO,KAAK31B,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAKDmqC,EAAAA,iBAAiB,CAACn3B,QAAD,EAAmBnG,QAAnB,EAAqD;AACpE,UAAM7M,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,UAAMu9B,QAAQ,GAAG,EAAjB;AACA,UAAMC,cAAc,GAAG,KAAKN,wBAAL,CAA8B/2B,QAA9B,EAAwCnG,QAAxC,CAAvB;AACA,QAAIy9B,cAAc,GAAG,IAArB;;AAEA,QAAI,CAACD,cAAc,CAACJ,WAApB,EAAiC;AAC/BM,MAAAA,QAAQ,EAAE,SAAS;AACjB,gBAAQ,KAAKtpC,KAAL,CAAWgB,IAAnB;AACE,eAAK2S,OAAE,CAACyQ,WAAR;AACErS,YAAAA,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAAtB;AACAmO,YAAAA,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAAtB;AACA,iBAAK4J,IAAL;;AACA,gBAAI,KAAKoK,GAAL,CAASjM,OAAE,CAACpZ,KAAZ,CAAJ,EAAwB;AACtB8uC,cAAAA,cAAc,GAAG,KAAKJ,wBAAL,CACfl3B,QADe,EAEfnG,QAFe,CAAjB;AAIA,oBAAM09B,QAAN;AACD;;AACDH,YAAAA,QAAQ,CAAClpC,IAAT,CAAc,KAAKipC,iBAAL,CAAuBn3B,QAAvB,EAAiCnG,QAAjC,CAAd;AACA;;AAEF,eAAK+H,OAAE,CAACozB,OAAR;AACEoC,YAAAA,QAAQ,CAAClpC,IAAT,CAAc,KAAK4hB,aAAL,EAAd;AACA;;AAEF,eAAKlO,OAAE,CAAC7b,MAAR;AAAgB;AACd,oBAAMiH,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,mBAAKsE,IAAL;;AACA,kBAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAJ,EAA6B;AAC3BqwC,gBAAAA,QAAQ,CAAClpC,IAAT,CAAc,KAAK2oC,mBAAL,CAAyB7pC,IAAzB,CAAd;AACD,eAFD,MAEO;AACLoqC,gBAAAA,QAAQ,CAAClpC,IAAT,CAAc,KAAKyoC,2BAAL,CAAiC3pC,IAAjC,CAAd;AACD;;AAED;AACD;;AAED;AACE,kBAAM,KAAK4iB,UAAL,EAAN;AAhCJ;AAkCD;;AAED,UAAIslB,UAAU,CAACmC,cAAD,CAAV,IAA8B,CAACnC,UAAU,CAACoC,cAAD,CAA7C,EAA+D;AAC7D,aAAKn9B,KAAL,CAEEm9B,cAAc,CAAC5rC,KAFjB,EAGE4oC,SAAS,CAACG,yBAHZ;AAKD,OAND,MAMO,IAAI,CAACS,UAAU,CAACmC,cAAD,CAAX,IAA+BnC,UAAU,CAACoC,cAAD,CAA7C,EAA+D;AACpE,aAAKn9B,KAAL,CAEEm9B,cAAc,CAAC5rC,KAFjB,EAGE4oC,SAAS,CAACE,wBAHZ,EAIEY,mBAAmB,CAACiC,cAAc,CAACxyC,IAAhB,CAJrB;AAMD,OAPM,MAOA,IAAI,CAACqwC,UAAU,CAACmC,cAAD,CAAX,IAA+B,CAACnC,UAAU,CAACoC,cAAD,CAA9C,EAAgE;AACrE,YAEElC,mBAAmB,CAACkC,cAAc,CAACzyC,IAAhB,CAAnB,KACAuwC,mBAAmB,CAACiC,cAAc,CAACxyC,IAAhB,CAHrB,EAIE;AACA,eAAKsV,KAAL,CAEEm9B,cAAc,CAAC5rC,KAFjB,EAGE4oC,SAAS,CAACE,wBAHZ,EAIEY,mBAAmB,CAACiC,cAAc,CAACxyC,IAAhB,CAJrB;AAMD;AACF;AACF;;AAED,QAAIqwC,UAAU,CAACmC,cAAD,CAAd,EAAgC;AAC9BrqC,MAAAA,IAAI,CAACwqC,eAAL,GAAuBH,cAAvB;AACArqC,MAAAA,IAAI,CAACyqC,eAAL,GAAuBH,cAAvB;AACD,KAHD,MAGO;AACLtqC,MAAAA,IAAI,CAACqqC,cAAL,GAAsBA,cAAtB;AACArqC,MAAAA,IAAI,CAACsqC,cAAL,GAAsBA,cAAtB;AACD;;AACDtqC,IAAAA,IAAI,CAACoqC,QAAL,GAAgBA,QAAhB;;AACA,QAAI,KAAK7oB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM,KAAKpU,KAAL,CACJ,KAAKlM,KAAL,CAAWvC,KADP,EAEJ4oC,SAAS,CAACO,4BAFN,CAAN;AAID;;AAED,WAAOK,UAAU,CAACmC,cAAD,CAAV,GACH,KAAK/3B,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CADG,GAEH,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,YAAtB,CAFJ;AAGD;;AAID0qC,EAAAA,eAAe,GAAiB;AAC9B,UAAM13B,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,SAAK4J,IAAL;AACA,WAAO,KAAK0zB,iBAAL,CAAuBn3B,QAAvB,EAAiCnG,QAAjC,CAAP;AACD;;AAMDiW,EAAAA,aAAa,CAAC7P,mBAAD,EAAuD;AAClE,QAAI,KAAK/T,KAAL,CAAW0V,OAAE,CAACozB,OAAd,CAAJ,EAA4B;AAC1B,aAAO,KAAKj5B,YAAL,CAAkB,KAAK9N,KAAL,CAAWyN,KAA7B,EAAoC,SAApC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKxP,KAAL,CAAW0V,OAAE,CAACyQ,WAAd,CAAJ,EAAgC;AACrC,aAAO,KAAKqlB,eAAL,EAAP;AACD,KAFM,MAEA,IACL,KAAKnpB,YAAL,CAAkB,GAAlB,KACA,KAAKxiB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,QAFK,EAGL;AAGA,WAAKoT,WAAL,CAAiBpL,OAAE,CAACyQ,WAApB;AACA,aAAO,KAAKqlB,eAAL,EAAP;AACD,KARM,MAQA;AACL,aAAO,MAAM5nB,aAAN,CAAoB7P,mBAApB,CAAP;AACD;AACF;;AAED03B,EAAAA,oBAAoB,CAAC1pC,KAAD,EAAkC;AACpD,UAAM2pC,cAAc,GAAK,MAAMD,oBAAN,CACvB1pC,KADuB,CAAzB;AAGA2pC,IAAAA,cAAc,CAAC9E,cAAf,GAAgC7kC,KAAK,CAAC6kC,cAAtC;AACA,WAAO8E,cAAP;AACD;;AAEDzd,EAAAA,gBAAgB,CAACjvB,IAAD,EAAqB;AACnC,QAAI,KAAK+C,KAAL,CAAW6kC,cAAf,EAA+B,OAAO,MAAM3Y,gBAAN,CAAuBjvB,IAAvB,CAAP;AAE/B,UAAM2W,OAAO,GAAG,KAAK+b,UAAL,EAAhB;;AAEA,QAAI/b,OAAO,KAAKgc,KAAE,CAACE,MAAnB,EAA2B;AACzB,aAAO,KAAKuX,YAAL,EAAP;AACD;;AAED,QAAIzzB,OAAO,KAAKgc,KAAE,CAACC,MAAf,IAAyBjc,OAAO,KAAKgc,KAAE,CAACiX,MAA5C,EAAoD;AAClD,UAAIxyB,iBAAiB,CAACpX,IAAD,CAArB,EAA6B;AAC3B,eAAO,KAAKmrC,WAAL,EAAP;AACD;;AAED,UAAInrC,IAAI,OAAR,EAAoC;AAClC,UAAE,KAAK+C,KAAL,CAAW2L,GAAb;AACA,eAAO,KAAKoT,WAAL,CAAiBpL,OAAE,CAACqzB,SAApB,CAAP;AACD;;AAED,UACE,CAAC/pC,IAAI,OAAJ,IAAoCA,IAAI,OAAzC,KACA2W,OAAO,KAAKgc,KAAE,CAACC,MAFjB,EAGE;AACA,eAAO,KAAK8X,aAAL,CAAmB1qC,IAAnB,CAAP;AACD;AACF;;AAED,QACEA,IAAI,OAAJ,IACA,KAAK+C,KAAL,CAAWwlC,WADX,IAEA,KAAK1nC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QAHF,EAIE;AACA,QAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACA,aAAO,KAAKoT,WAAL,CAAiBpL,OAAE,CAACyQ,WAApB,CAAP;AACD;;AAED,WAAO,MAAM8H,gBAAN,CAAuBjvB,IAAvB,CAAP;AACD;;AAEDzG,EAAAA,aAAa,CAACozC,QAAD,EAA4B;AACvC,UAAMpzC,aAAN,CAAoBozC,QAApB;AACA,UAAM;AAAEh2B,MAAAA,OAAF;AAAW5S,MAAAA;AAAX,QAAoB,KAAKhB,KAA/B;;AACA,QAAIgB,IAAI,KAAK2S,OAAE,CAACpZ,KAAZ,IAAqBqvC,QAAQ,KAAKj2B,OAAE,CAACyQ,WAAzC,EAAsD;AAGpDxQ,MAAAA,OAAO,CAACjT,MAAR,CAAe,CAAC,CAAhB,EAAmB,CAAnB,EAAsBivB,KAAE,CAACiX,MAAzB;AACA,WAAK7mC,KAAL,CAAWwlC,WAAX,GAAyB,KAAzB;AACD,KALD,MAKO,IAAIxkC,IAAI,KAAK2S,OAAE,CAACqzB,SAAhB,EAA2B;AAChC,YAAM9gB,GAAG,GAAGtS,OAAO,CAACC,GAAR,EAAZ;;AACA,UAAKqS,GAAG,KAAK0J,KAAE,CAACC,MAAX,IAAqB+Z,QAAQ,KAAKj2B,OAAE,CAACpZ,KAAtC,IAAgD2rB,GAAG,KAAK0J,KAAE,CAACiX,MAA/D,EAAuE;AACrEjzB,QAAAA,OAAO,CAACC,GAAR;AACA,aAAK7T,KAAL,CAAWwlC,WAAX,GAAyB5xB,OAAO,CAACA,OAAO,CAACjU,MAAR,GAAiB,CAAlB,CAAP,KAAgCiwB,KAAE,CAACE,MAA5D;AACD,OAHD,MAGO;AACL,aAAK9vB,KAAL,CAAWwlC,WAAX,GAAyB,IAAzB;AACD;AACF,KARM,MAQA,IACLxkC,IAAI,CAAC3K,OAAL,KACCuzC,QAAQ,KAAKj2B,OAAE,CAAClb,GAAhB,IAAuBmxC,QAAQ,KAAKj2B,OAAE,CAAChb,WADxC,CADK,EAGL;AACA,WAAKqH,KAAL,CAAWwlC,WAAX,GAAyB,KAAzB;AACD,KALM,MAKA;AACL,WAAKxlC,KAAL,CAAWwlC,WAAX,GAAyBxkC,IAAI,CAACrL,UAA9B;AACD;AACF;;AAjiBsB,CAD3B;;AChFA,MAAMk0C,eAAN,SAA8BtxB,KAA9B,CAAoC;AAAA;AAAA;AAAA,SAClCthB,KADkC,GACb,IAAI2d,GAAJ,EADa;AAAA,SAIlCk1B,KAJkC,GAIb,IAAIl1B,GAAJ,EAJa;AAAA,SAOlCm1B,UAPkC,GAOR,IAAIn1B,GAAJ,EAPQ;AAAA,SAUlCo1B,OAVkC,GAUX,IAAIp1B,GAAJ,EAVW;AAAA,SAgBlCq1B,kBAhBkC,GAgBA,IAAIr1B,GAAJ,EAhBA;AAAA;;AAAA;;AAsBrB,MAAMs1B,sBAAN,SAAqCvxB,YAArC,CAAmE;AAChFe,EAAAA,WAAW,CAACtM,KAAD,EAAqC;AAC9C,WAAO,IAAIy8B,eAAJ,CAAoBz8B,KAApB,CAAP;AACD;;AAED0M,EAAAA,WAAW,CAACljB,IAAD,EAAemjB,WAAf,EAA0CpO,GAA1C,EAAuD;AAChE,UAAMkO,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AACA,QAAIM,WAAW,GAAGhD,yBAAlB,EAA6C;AAC3C,WAAKmD,kBAAL,CAAwBL,KAAxB,EAA+BjjB,IAA/B;AACAijB,MAAAA,KAAK,CAACowB,kBAAN,CAAyBhwB,GAAzB,CAA6BrjB,IAA7B;AACA;AACD;;AAED,UAAMkjB,WAAN,CAAkB,GAAG5Y,SAArB;;AAEA,QAAI6Y,WAAW,GAAGxD,cAAlB,EAAkC;AAChC,UAAI,EAAEwD,WAAW,GAAGzD,eAAhB,CAAJ,EAAsC;AAEpC,aAAK0D,yBAAL,CAA+BH,KAA/B,EAAsCjjB,IAAtC,EAA4CmjB,WAA5C,EAAyDpO,GAAzD;AACA,aAAKuO,kBAAL,CAAwBL,KAAxB,EAA+BjjB,IAA/B;AACD;;AACDijB,MAAAA,KAAK,CAAC5iB,KAAN,CAAYgjB,GAAZ,CAAgBrjB,IAAhB;AACD;;AACD,QAAImjB,WAAW,GAAGlD,kBAAlB,EAAsCgD,KAAK,CAACiwB,KAAN,CAAY7vB,GAAZ,CAAgBrjB,IAAhB;AACtC,QAAImjB,WAAW,GAAGjD,wBAAlB,EAA4C+C,KAAK,CAACkwB,UAAN,CAAiB9vB,GAAjB,CAAqBrjB,IAArB;AAC5C,QAAImjB,WAAW,GAAGnD,gBAAlB,EAAoCiD,KAAK,CAACmwB,OAAN,CAAc/vB,GAAd,CAAkBrjB,IAAlB;AACrC;;AAEDwjB,EAAAA,mBAAmB,CACjBP,KADiB,EAEjBjjB,IAFiB,EAGjBmjB,WAHiB,EAIR;AACT,QAAIF,KAAK,CAACiwB,KAAN,CAAYprC,GAAZ,CAAgB9H,IAAhB,CAAJ,EAA2B;AACzB,UAAImjB,WAAW,GAAGlD,kBAAlB,EAAsC;AAGpC,cAAMszB,OAAO,GAAG,CAAC,EAAEpwB,WAAW,GAAGjD,wBAAhB,CAAjB;AACA,cAAMszB,QAAQ,GAAGvwB,KAAK,CAACkwB,UAAN,CAAiBrrC,GAAjB,CAAqB9H,IAArB,CAAjB;AACA,eAAOuzC,OAAO,KAAKC,QAAnB;AACD;;AACD,aAAO,IAAP;AACD;;AACD,QAAIrwB,WAAW,GAAGnD,gBAAd,IAAkCiD,KAAK,CAACmwB,OAAN,CAActrC,GAAd,CAAkB9H,IAAlB,CAAtC,EAA+D;AAC7D,UAAIijB,KAAK,CAACpB,OAAN,CAAc/Z,GAAd,CAAkB9H,IAAlB,CAAJ,EAA6B;AAE3B,eAAO,CAAC,EAAEmjB,WAAW,GAAGzD,eAAhB,CAAR;AACD,OAHD,MAGO;AAEL,eAAO,KAAP;AACD;AACF;;AACD,QAAIyD,WAAW,GAAGxD,cAAd,IAAgCsD,KAAK,CAAC5iB,KAAN,CAAYyH,GAAZ,CAAgB9H,IAAhB,CAApC,EAA2D;AACzD,aAAO,IAAP;AACD;;AAED,WAAO,MAAMwjB,mBAAN,CAA0B,GAAGlZ,SAA7B,CAAP;AACD;;AAEDoZ,EAAAA,gBAAgB,CAAC5J,EAAD,EAAmB;AACjC,UAAM6J,aAAa,GAAG,KAAK3B,UAAL,CAAgB,CAAhB,CAAtB;AACA,UAAM;AAAEhiB,MAAAA;AAAF,QAAW8Z,EAAjB;;AACA,QACE,CAAC6J,aAAa,CAACtjB,KAAd,CAAoByH,GAApB,CAAwB9H,IAAxB,CAAD,IACA,CAAC2jB,aAAa,CAAC0vB,kBAAd,CAAiCvrC,GAAjC,CAAqC9H,IAArC,CAFH,EAGE;AACA,YAAM0jB,gBAAN,CAAuB5J,EAAvB;AACD;AACF;;AApE+E;;ACpC3E,MAAM25B,KAAK,GAAG,MAAd;AAAA,MACLC,WAAW,GAAG,MADT;AAAA,MAELC,WAAW,GAAG,MAFT;AAAA,MAGLC,YAAY,GAAG,MAHV;AAAA,MAILC,QAAQ,GAAG,MAJN;AAkCQ,MAAMC,0BAAN,CAAiC;AAAA;AAAA,SAC9CC,MAD8C,GACnB,EADmB;AAAA;;AAE9ChxB,EAAAA,KAAK,CAACvM,KAAD,EAAmB;AACtB,SAAKu9B,MAAL,CAAY1qC,IAAZ,CAAiBmN,KAAjB;AACD;;AAEDwM,EAAAA,IAAI,GAAG;AACL,SAAK+wB,MAAL,CAAY92B,GAAZ;AACD;;AAED+2B,EAAAA,YAAY,GAAc;AACxB,WAAO,KAAKD,MAAL,CAAY,KAAKA,MAAL,CAAYhrC,MAAZ,GAAqB,CAAjC,CAAP;AACD;;AAEW,MAARkrC,QAAQ,GAAY;AACtB,WAAO,CAAC,KAAKD,YAAL,KAAsBL,WAAvB,IAAsC,CAA7C;AACD;;AAEW,MAARO,QAAQ,GAAY;AACtB,WAAO,CAAC,KAAKF,YAAL,KAAsBN,WAAvB,IAAsC,CAA7C;AACD;;AAEY,MAATS,SAAS,GAAY;AACvB,WAAO,CAAC,KAAKH,YAAL,KAAsBJ,YAAvB,IAAuC,CAA9C;AACD;;AAEQ,MAALQ,KAAK,GAAY;AACnB,WAAO,CAAC,KAAKJ,YAAL,KAAsBH,QAAvB,IAAmC,CAA1C;AACD;;AA5B6C;AA+BzC,SAASQ,aAAT,CACLl8B,OADK,EAELmB,WAFK,EAGM;AACX,SAAO,CAACnB,OAAO,GAAGw7B,WAAH,GAAiB,CAAzB,KAA+Br6B,WAAW,GAAGo6B,WAAH,GAAiB,CAA3D,CAAP;AACD;;ACzBD,SAASY,OAAT,CAAoBC,CAApB,EAA8B;AAC5B,MAAIA,CAAC,IAAI,IAAT,EAAe;AAEb,UAAM,IAAIjsB,KAAJ,CAAW,cAAaisB,CAAE,SAA1B,CAAN;AACD;;AACD,SAAOA,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBD,CAAhB,EAAkC;AAChC,MAAI,CAACA,CAAL,EAAQ;AACN,UAAM,IAAIjsB,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAUD,MAAMmsB,QAAQ,GAAGxpC,kBAAkB,CACjC;AACEypC,EAAAA,+BAA+B,EAC7B,0EAFJ;AAGEC,EAAAA,iCAAiC,EAC/B,6DAJJ;AAKEC,EAAAA,+BAA+B,EAAE,0CALnC;AAMEC,EAAAA,qBAAqB,EAAE,mDANzB;AAOEC,EAAAA,sBAAsB,EACpB,oDARJ;AASEC,EAAAA,4BAA4B,EAC1B,6DAVJ;AAWEC,EAAAA,eAAe,EAAE,qCAXnB;AAYEC,EAAAA,+BAA+B,EAC7B,mDAbJ;AAcEC,EAAAA,gCAAgC,EAC9B,2DAfJ;AAgBEC,EAAAA,8BAA8B,EAAE,sCAhBlC;AAiBEC,EAAAA,iBAAiB,EAAE,2BAjBrB;AAkBEC,EAAAA,uBAAuB,EAAE,4BAlB3B;AAmBEC,EAAAA,kBAAkB,EAAE,qCAnBtB;AAoBEC,EAAAA,mBAAmB,EAAE,sCApBvB;AAqBEC,EAAAA,iCAAiC,EAC/B,8DAtBJ;AAuBEC,EAAAA,wBAAwB,EAAE,4CAvB5B;AAwBEC,EAAAA,qBAAqB,EAAE,kDAxBzB;AAyBEC,EAAAA,yBAAyB,EACvB,uDA1BJ;AA2BEC,EAAAA,8BAA8B,EAC5B,gEA5BJ;AA6BEC,EAAAA,wBAAwB,EACtB,sDA9BJ;AA+BEC,EAAAA,yBAAyB,EACvB,0DAhCJ;AAiCEC,EAAAA,uBAAuB,EACrB,qDAlCJ;AAmCEC,EAAAA,2BAA2B,EACzB,+CApCJ;AAqCEC,EAAAA,qBAAqB,EAAE,2CArCzB;AAsCEC,EAAAA,uBAAuB,EACrB,yDAvCJ;AAwCEC,EAAAA,gCAAgC,EAC9B,0DAzCJ;AA0CEC,EAAAA,iCAAiC,EAC/B,4DA3CJ;AA4CEC,EAAAA,wCAAwC,EACtC,kFA7CJ;AA8CEC,EAAAA,0BAA0B,EACxB,uDA/CJ;AAgDEC,EAAAA,qBAAqB,EACnB,4GAjDJ;AAkDEC,EAAAA,iBAAiB,EACf,gFAnDJ;AAoDEC,EAAAA,yBAAyB,EACvB,uDArDJ;AAsDEC,EAAAA,8BAA8B,EAC5B,gEAvDJ;AAwDEC,EAAAA,0BAA0B,EACxB,mFAzDJ;AA0DEC,EAAAA,qCAAqC,EACnC,qDA3DJ;AA4DEC,EAAAA,iCAAiC,EAC/B,8CA7DJ;AA8DEC,EAAAA,8BAA8B,EAC5B,wDA/DJ;AAgEEC,EAAAA,6BAA6B,EAC3B,+CAjEJ;AAkEEC,EAAAA,yBAAyB,EACvB,mHAnEJ;AAoEEC,EAAAA,sCAAsC,EACpC,kFArEJ;AAsEEC,EAAAA,2BAA2B,EACzB,uEAvEJ;AAwEEC,EAAAA,kBAAkB,EAChB,8EAzEJ;AA0EEC,EAAAA,wBAAwB,EAAE,wCA1E5B;AA2EEC,EAAAA,6BAA6B,EAC3B,6CA5EJ;AA6EEC,EAAAA,6BAA6B,EAC3B,qDA9EJ;AA+EEC,EAAAA,gCAAgC,EAC9B,mEAhFJ;AAiFEC,EAAAA,iCAAiC,EAC/B;AAlFJ,CADiC,EAqFtB7sC,UAAU,CAACG,WArFW,CAAnC;;AA2FA,SAAS2sC,mBAAT,CACE5gC,KADF,EAE0C;AACxC,UAAQA,KAAR;AACE,SAAK,KAAL;AACE,aAAO,cAAP;;AACF,SAAK,SAAL;AACE,aAAO,kBAAP;;AACF,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,OAAL;AACE,aAAO,gBAAP;;AACF,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,WAAL;AACE,aAAO,oBAAP;;AACF,SAAK,SAAL;AACE,aAAO,kBAAP;;AACF;AACE,aAAOvO,SAAP;AAtBJ;AAwBD;;AAED,SAASovC,kBAAT,CAA4BC,QAA5B,EAA+D;AAC7D,SACEA,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,QAAvC,IAAmDA,QAAQ,KAAK,WADlE;AAGD;;AAED,kBAAgBthC,UAAD,IACb,cAAcA,UAAd,CAAyB;AACvB2R,EAAAA,eAAe,GAAkC;AAC/C,WAAOsrB,sBAAP;AACD;;AAEDsE,EAAAA,cAAc,GAAY;AAGxB,WAAO,KAAKvwC,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAP;AACD;;AAED63C,EAAAA,wBAAwB,GAAG;AACzB,WACE,CAAC,KAAKxwC,KAAL,CAAW0V,OAAE,CAAClc,QAAd,KACC,KAAKwG,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CADD,IAEC,KAAKmG,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,CAFD,IAGC,KAAK2D,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAHD,IAIC,KAAKmF,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAJD,IAKC,KAAKm3C,qBAAL,EALF,KAMA,CAAC,KAAKC,qBAAL,EAPH;AASD;;AAEDC,EAAAA,4BAA4B,GAAG;AAK7B,SAAKp5B,IAAL;AACA,WAAO,KAAKi5B,wBAAL,EAAP;AACD;;AAGDI,EAAAA,eAAe,CAAgBC,gBAAhB,EAA2C;AACxD,QAAI,CAAC,KAAK7wC,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAL,EAA0B;AACxB,aAAOsI,SAAP;AACD;;AAED,UAAMqvC,QAAQ,GAAG,KAAKvuC,KAAL,CAAWyN,KAA5B;;AACA,QACEqhC,gBAAgB,CAAClkB,OAAjB,CAAyB2jB,QAAzB,MAAuC,CAAC,CAAxC,IACA,KAAKQ,UAAL,CAAgB,KAAKH,4BAAL,CAAkCI,IAAlC,CAAuC,IAAvC,CAAhB,CAFF,EAGE;AACA,aAAOT,QAAP;AACD;;AACD,WAAOrvC,SAAP;AACD;;AAOD+vC,EAAAA,gBAAgB,CACdC,QADc,EAKdJ,gBALc,EAMdK,mBANc,EAOdtiC,aAPc,EAQR;AACN,UAAMuiC,YAAY,GAAG,CAACzjC,GAAD,EAAM4iC,QAAN,EAAgBc,MAAhB,EAAwBC,KAAxB,KAAkC;AACrD,UAAIf,QAAQ,KAAKc,MAAb,IAAuBH,QAAQ,CAACI,KAAD,CAAnC,EAA4C;AAC1C,aAAKpjC,KAAL,CAAWP,GAAX,EAAgB0/B,QAAQ,CAACwB,qBAAzB,EAAgDwC,MAAhD,EAAwDC,KAAxD;AACD;AACF,KAJD;;AAKA,UAAMC,YAAY,GAAG,CAAC5jC,GAAD,EAAM4iC,QAAN,EAAgBiB,IAAhB,EAAsBC,IAAtB,KAA+B;AAClD,UACGP,QAAQ,CAACM,IAAD,CAAR,IAAkBjB,QAAQ,KAAKkB,IAAhC,IACCP,QAAQ,CAACO,IAAD,CAAR,IAAkBlB,QAAQ,KAAKiB,IAFlC,EAGE;AACA,aAAKtjC,KAAL,CAAWP,GAAX,EAAgB0/B,QAAQ,CAACiB,qBAAzB,EAAgDkD,IAAhD,EAAsDC,IAAtD;AACD;AACF,KAPD;;AASA,aAAS;AACP,YAAM19B,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,YAAM8wC,QAAqB,GAAG,KAAKM,eAAL,CAC5BC,gBAAgB,CAAC/+B,MAAjB,CAAwBo/B,mBAAxB,WAAwBA,mBAAxB,GAA+C,EAA/C,CAD4B,CAA9B;AAIA,UAAI,CAACZ,QAAL,EAAe;;AAEf,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,YAAIW,QAAQ,CAACQ,aAAb,EAA4B;AAC1B,eAAKxjC,KAAL,CAAW6F,QAAX,EAAqBs5B,QAAQ,CAACU,8BAA9B;AACD,SAFD,MAEO;AACLqD,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqBA,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqBA,QAArB,EAA+B,QAA/B,CAAZ;AACAa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqBA,QAArB,EAA+B,UAA/B,CAAZ;AAEAW,UAAAA,QAAQ,CAACQ,aAAT,GAAyBnB,QAAzB;AACD;AACF,OAVD,MAUO;AACL,YAAI/sC,MAAM,CAACmuC,cAAP,CAAsBpgB,IAAtB,CAA2B2f,QAA3B,EAAqCX,QAArC,CAAJ,EAAoD;AAClD,eAAKriC,KAAL,CAAW6F,QAAX,EAAqBs5B,QAAQ,CAACW,iBAA9B,EAAiDuC,QAAjD;AACD,SAFD,MAEO;AACLa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AACAa,UAAAA,YAAY,CAACr9B,QAAD,EAAWw8B,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AAEAgB,UAAAA,YAAY,CAACx9B,QAAD,EAAWw8B,QAAX,EAAqB,SAArB,EAAgC,UAAhC,CAAZ;AACAgB,UAAAA,YAAY,CAACx9B,QAAD,EAAWw8B,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACD;;AACDW,QAAAA,QAAQ,CAACX,QAAD,CAAR,GAAqB,IAArB;AACD;;AAED,UAAIY,mBAAJ,YAAIA,mBAAmB,CAAEjd,QAArB,CAA8Bqc,QAA9B,CAAJ,EAA6C;AAC3C,aAAKriC,KAAL,CACE6F,QADF,EAGElF,aAHF,EAIE0hC,QAJF;AAMD;AACF;AACF;;AAEDqB,EAAAA,kBAAkB,CAACz+B,IAAD,EAAgC;AAChD,YAAQA,IAAR;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAKlT,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAP;;AACF,WAAK,uBAAL;AACE,eAAO,KAAKgG,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAP;;AACF,WAAK,mBAAL;AACE,eAAO,KAAKmG,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAP;;AACF,WAAK,2BAAL;AACE,eAAO,KAAK0oB,YAAL,CAAkB,GAAlB,CAAP;AATJ;;AAYA,UAAM,IAAIpB,KAAJ,CAAU,aAAV,CAAN;AACD;;AAED2wB,EAAAA,WAAW,CAAY1+B,IAAZ,EAAkC2+B,YAAlC,EAA8D;AACvE,UAAM7mB,MAAW,GAAG,EAApB;;AACA,WAAO,CAAC,KAAK2mB,kBAAL,CAAwBz+B,IAAxB,CAAR,EAAuC;AAErC8X,MAAAA,MAAM,CAAChpB,IAAP,CAAY6vC,YAAY,EAAxB;AACD;;AACD,WAAO7mB,MAAP;AACD;;AAED8mB,EAAAA,oBAAoB,CAClB5+B,IADkB,EAElB2+B,YAFkB,EAGb;AACL,WAAO5E,OAAO,CACZ,KAAK8E,0BAAL,CACE7+B,IADF,EAEE2+B,YAFF,EAGsB,IAHtB,CADY,CAAd;AAOD;;AAMDE,EAAAA,0BAA0B,CACxB7+B,IADwB,EAExB2+B,YAFwB,EAGxBG,aAHwB,EAIhB;AACR,UAAMhnB,MAAM,GAAG,EAAf;;AAEA,aAAS;AACP,UAAI,KAAK2mB,kBAAL,CAAwBz+B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,YAAMmb,OAAO,GAAGwjB,YAAY,EAA5B;;AACA,UAAIxjB,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAOptB,SAAP;AACD;;AACD+pB,MAAAA,MAAM,CAAChpB,IAAP,CAAYqsB,OAAZ;;AAEA,UAAI,KAAK1M,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAJ,EAAwB;AACtB;AACD;;AAED,UAAI,KAAKu3C,kBAAL,CAAwBz+B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,UAAI8+B,aAAJ,EAAmB;AAEjB,aAAK1wB,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;;AACD,aAAO6G,SAAP;AACD;;AAED,WAAO+pB,MAAP;AACD;;AAEDinB,EAAAA,oBAAoB,CAClB/+B,IADkB,EAElB2+B,YAFkB,EAGlBK,OAHkB,EAIlBC,cAJkB,EAKb;AACL,QAAI,CAACA,cAAL,EAAqB;AACnB,UAAID,OAAJ,EAAa;AACX,aAAK5wB,MAAL,CAAY5L,OAAE,CAAClc,QAAf;AACD,OAFD,MAEO;AACL,aAAK8sB,gBAAL,CAAsB,GAAtB;AACD;AACF;;AAED,UAAM0E,MAAM,GAAG,KAAK8mB,oBAAL,CAA0B5+B,IAA1B,EAAgC2+B,YAAhC,CAAf;;AAEA,QAAIK,OAAJ,EAAa;AACX,WAAK5wB,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACD,KAFD,MAEO;AACL,WAAK2sB,gBAAL,CAAsB,GAAtB;AACD;;AAED,WAAO0E,MAAP;AACD;;AAEDonB,EAAAA,iBAAiB,GAAmB;AAClC,UAAMtxC,IAAoB,GAAG,KAAKmS,SAAL,EAA7B;AACA,SAAKqO,MAAL,CAAY5L,OAAE,CAACxX,OAAf;AACA,SAAKojB,MAAL,CAAY5L,OAAE,CAACxb,MAAf;;AACA,QAAI,CAAC,KAAK8F,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B;AAC1B,WAAK4U,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4tC,QAAQ,CAAC6C,6BAAtC;AACD;;AAGDnvC,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKvE,aAAL,EAAhB;AACA,SAAKtC,MAAL,CAAY5L,OAAE,CAACvb,MAAf;;AAEA,QAAI,KAAKwnB,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAJ,EAAsB;AACpBsG,MAAAA,IAAI,CAACuxC,SAAL,GAAiB,KAAKC,iBAAL,CAAgD,IAAhD,CAAjB;AACD;;AACD,QAAI,KAAKjwB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKkgC,oBAAL,EAAtB;AACD;;AACD,WAAO,KAAKn/B,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDwxC,EAAAA,iBAAiB,CAACE,kBAAD,EAA8C;AAC7D,QAAI1I,MAAsB,GAAG,KAAK5nB,eAAL,EAA7B;;AACA,WAAO,KAAKP,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAP,EAAyB;AACvB,YAAMsG,IAAuB,GAAG,KAAKqU,eAAL,CAAqB20B,MAArB,CAAhC;AACAhpC,MAAAA,IAAI,CAACgvB,IAAL,GAAYga,MAAZ;AACAhpC,MAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKvD,eAAL,CAAqBswB,kBAArB,CAAb;AACA1I,MAAAA,MAAM,GAAG,KAAK12B,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAT;AACD;;AACD,WAAOgpC,MAAP;AACD;;AAED2I,EAAAA,oBAAoB,GAAsB;AACxC,UAAM3xC,IAAuB,GAAG,KAAKmS,SAAL,EAAhC;AACAnS,IAAAA,IAAI,CAAC4xC,QAAL,GAAgB,KAAKJ,iBAAL,CAAgD,KAAhD,CAAhB;;AACA,QAAI,CAAC,KAAK5B,qBAAL,EAAD,IAAiC,KAAKruB,YAAL,CAAkB,GAAlB,CAArC,EAA6D;AAC3DvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKkgC,oBAAL,EAAtB;AACD;;AACD,WAAO,KAAKn/B,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6xC,EAAAA,wBAAwB,CAACC,GAAD,EAAuC;AAC7D,SAAKr7B,IAAL;AACA,UAAMzW,IAAuB,GAAG,KAAKqU,eAAL,CAAqBy9B,GAArB,CAAhC;AACA9xC,IAAAA,IAAI,CAAC+xC,aAAL,GAAqBD,GAArB;AACA9xC,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKkwB,qBAAL,CAA0C,KAA1C,CAAtB;AACAhyC,IAAAA,IAAI,CAACiyC,OAAL,GAAe,KAAf;AACA,WAAO,KAAK3/B,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDkyC,EAAAA,mBAAmB,GAAiB;AAClC,UAAMlyC,IAAkB,GAAG,KAAKmS,SAAL,EAA3B;AACA,SAAKsE,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDmyC,EAAAA,gBAAgB,GAAkB;AAChC,UAAMnyC,IAAmB,GAAG,KAAKmS,SAAL,EAA5B;AACA,SAAKqO,MAAL,CAAY5L,OAAE,CAAClX,OAAf;;AACA,QAAI,KAAKwB,KAAL,CAAW0V,OAAE,CAACxX,OAAd,CAAJ,EAA4B;AAC1B4C,MAAAA,IAAI,CAACoyC,QAAL,GAAgB,KAAKd,iBAAL,EAAhB;AACD,KAFD,MAEO;AACLtxC,MAAAA,IAAI,CAACoyC,QAAL,GAAgB,KAAKZ,iBAAL,CAAgD,IAAhD,CAAhB;AACD;;AACD,WAAO,KAAKl/B,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDqyC,EAAAA,oBAAoB,GAAsB;AACxC,UAAMryC,IAAuB,GAAG,KAAKmS,SAAL,EAAhC;AACAnS,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAKy6C,wBAAL,EAAZ;AACAtyC,IAAAA,IAAI,CAACuyC,UAAL,GAAkB,KAAKC,kBAAL,CAAwB59B,OAAE,CAAC1X,QAA3B,CAAlB;AACA8C,IAAAA,IAAI,CAACkjB,OAAL,GAAe,KAAKsvB,kBAAL,CAAwB59B,OAAE,CAACva,EAA3B,CAAf;AACA,WAAO,KAAKiY,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDyyC,EAAAA,wBAAwB,GAAkC;AACxD,QAAI,KAAKlxB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,KAAKmxB,qBAAL,EAAP;AACD;AACF;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,UAAM1yC,IAAkC,GAAG,KAAKmS,SAAL,EAA3C;;AAEA,QAAI,KAAKoP,YAAL,CAAkB,GAAlB,KAA0B,KAAKriB,KAAL,CAAW0V,OAAE,CAACyQ,WAAd,CAA9B,EAA0D;AACxD,WAAK5O,IAAL;AACD,KAFD,MAEO;AACL,WAAKmM,UAAL;AACD;;AAED5iB,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAK+uC,oBAAL,CACZ,2BADY,EAEZ,KAAKkB,oBAAL,CAA0BpC,IAA1B,CAA+B,IAA/B,CAFY,EAGE,KAHF,EAIS,IAJT,CAAd;;AAMA,QAAIjwC,IAAI,CAACoC,MAAL,CAAYxB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAKuM,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAACc,mBAAhC;AACD;;AACD,WAAO,KAAK96B,UAAL,CAAgBtS,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED2yC,EAAAA,6BAA6B,GAAuB;AAClD,QAAI,KAAKzsB,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAACjY,MAAjC,EAAyC;AACvC,WAAK8Z,IAAL;AACA,aAAO,KAAKk7B,oBAAL,EAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAIDiB,EAAAA,eAAe,CACbC,WADa,EAEbC,SAFa,EAGP;AAEN,UAAMC,mBAAmB,GAAGF,WAAW,KAAKj+B,OAAE,CAAC/a,KAA/C;AACAi5C,IAAAA,SAAS,CAACvhC,cAAV,GAA2B,KAAKkhC,wBAAL,EAA3B;AACA,SAAKjyB,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA05C,IAAAA,SAAS,CAACE,UAAV,GAAuB,KAAKC,8BAAL,EAAvB;;AACA,QAAIF,mBAAJ,EAAyB;AACvBD,MAAAA,SAAS,CAAChxB,cAAV,GACE,KAAKoxB,oCAAL,CAA0CL,WAA1C,CADF;AAED,KAHD,MAGO,IAAI,KAAK3zC,KAAL,CAAW2zC,WAAX,CAAJ,EAA6B;AAClCC,MAAAA,SAAS,CAAChxB,cAAV,GACE,KAAKoxB,oCAAL,CAA0CL,WAA1C,CADF;AAED;AACF;;AAEDI,EAAAA,8BAA8B,GAE5B;AACA,WAAO,KAAKE,gBAAL,CAAsBv+B,OAAE,CAACvb,MAAzB,MAA6DwX,GAA7D,CACLzC,OAAO,IAAI;AACT,UACEA,OAAO,CAACnM,IAAR,KAAiB,YAAjB,IACAmM,OAAO,CAACnM,IAAR,KAAiB,aADjB,IAEAmM,OAAO,CAACnM,IAAR,KAAiB,eAFjB,IAGAmM,OAAO,CAACnM,IAAR,KAAiB,cAJnB,EAKE;AACA,aAAKkL,KAAL,CACEiB,OAAO,CAAC1P,KADV,EAEE4tC,QAAQ,CAAC+C,iCAFX,EAGEjhC,OAAO,CAACnM,IAHV;AAKD;;AACD,aAAQmM,OAAR;AACD,KAfI,CAAP;AAiBD;;AAEDglC,EAAAA,0BAA0B,GAAS;AACjC,QAAI,CAAC,KAAKvyB,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAD,IAAuB,CAAC,KAAK+5C,gBAAL,EAA5B,EAAqD;AACnD,WAAK7yB,MAAL,CAAY5L,OAAE,CAACrb,IAAf;AACD;AACF;;AAED+5C,EAAAA,sBAAsB,CACpBlhC,IADoB,EAEpBpS,IAFoB,EAG8C;AAClE,SAAK4yC,eAAL,CAAqBh+B,OAAE,CAACpb,KAAxB,EAA+BwG,IAA/B;AACA,SAAKozC,0BAAL;AACA,WAAO,KAAK9gC,UAAL,CAAgBtS,IAAhB,EAAsBoS,IAAtB,CAAP;AACD;;AAEDmhC,EAAAA,+BAA+B,GAAG;AAChC,SAAK98B,IAAL;AACA,WAAO,KAAKoK,GAAL,CAASjM,OAAE,CAAC/c,IAAZ,KAAqB,KAAKqH,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAA5B;AACD;;AAEDg6C,EAAAA,wBAAwB,CAACxzC,IAAD,EAAoC;AAC1D,QACE,EACE,KAAKd,KAAL,CAAW0V,OAAE,CAAClc,QAAd,KACA,KAAK+6C,WAAL,CAAiB,KAAKF,+BAAL,CAAqCtD,IAArC,CAA0C,IAA1C,CAAjB,CAFF,CADF,EAKE;AACA,aAAO9vC,SAAP;AACD;;AAED,SAAKqgB,MAAL,CAAY5L,OAAE,CAAClc,QAAf;AACA,UAAMiZ,EAAE,GAAG,KAAKyP,eAAL,EAAX;AACAzP,IAAAA,EAAE,CAACmQ,cAAH,GAAoB,KAAKkwB,qBAAL,EAApB;AACA,SAAKjwB,gBAAL,CAAsBpQ,EAAtB;AAEA,SAAK6O,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACAmH,IAAAA,IAAI,CAACgzC,UAAL,GAAkB,CAACrhC,EAAD,CAAlB;AAEA,UAAM1P,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;AACA,QAAIzxC,IAAJ,EAAUjC,IAAI,CAAC8hB,cAAL,GAAsB7f,IAAtB;AACV,SAAKmxC,0BAAL;AACA,WAAO,KAAK9gC,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED2zC,EAAAA,gCAAgC,CAC9B3zC,IAD8B,EAE9B4zC,QAF8B,EAGe;AAC7C,QAAI,KAAK/yB,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2BqG,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AAC3B,UAAMqgC,OAAY,GAAG7zC,IAArB;;AAEA,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KAAyB,KAAKmoB,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;AACnD,UAAIqyB,QAAJ,EAAc;AACZ,aAAKzmC,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAACkC,0BAAhC;AACD;;AACD,YAAMp+B,MAA2B,GAAGyjC,OAApC;;AACA,UAAIzjC,MAAM,CAACgC,IAAP,IAAe,KAAKmP,YAAL,CAAkB,GAAlB,CAAnB,EAA2C;AACzC,aAAKpU,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0/B,QAAQ,CAACG,+BAApC;AACD;;AACD,WAAKmG,eAAL,CAAqBh+B,OAAE,CAACpb,KAAxB,EAA+B4W,MAA/B;AACA,WAAKgjC,0BAAL;;AACA,UAAIhjC,MAAM,CAACgC,IAAP,KAAgB,KAApB,EAA2B;AACzB,YAAIhC,MAAM,CAAC4iC,UAAP,CAAkBpyC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,eAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAC/P,cAAlC;;AACA,cAAI,KAAK8qB,WAAL,CAAiBje,MAAM,CAAC4iC,UAAP,CAAkB,CAAlB,CAAjB,CAAJ,EAA4C;AAC1C,iBAAK7lC,KAAL,CACE,KAAKlM,KAAL,CAAW2L,GADb,EAEE0/B,QAAQ,CAACE,iCAFX;AAID;AACF;AACF,OAVD,MAUO,IAAIp8B,MAAM,CAACgC,IAAP,KAAgB,KAApB,EAA2B;AAChC,YAAIhC,MAAM,CAAC4iC,UAAP,CAAkBpyC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,eAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAC9P,cAAlC;AACD,SAFD,MAEO;AACL,gBAAMswC,cAAc,GAAG1jC,MAAM,CAAC4iC,UAAP,CAAkB,CAAlB,CAAvB;;AACA,cAAI,KAAK3kB,WAAL,CAAiBylB,cAAjB,CAAJ,EAAsC;AACpC,iBAAK3mC,KAAL,CACE,KAAKlM,KAAL,CAAW2L,GADb,EAEE0/B,QAAQ,CAACE,iCAFX;AAID;;AACD,cACEsH,cAAc,CAAC7xC,IAAf,KAAwB,YAAxB,IACA6xC,cAAc,CAACtgC,QAFjB,EAGE;AACA,iBAAKrG,KAAL,CACE,KAAKlM,KAAL,CAAW2L,GADb,EAEE0/B,QAAQ,CAACmC,qCAFX;AAID;;AACD,cAAIqF,cAAc,CAAC7xC,IAAf,KAAwB,aAA5B,EAA2C;AACzC,iBAAKkL,KAAL,CACE,KAAKlM,KAAL,CAAW2L,GADb,EAEE0/B,QAAQ,CAACoC,iCAFX;AAID;AACF;;AACD,YAAIt+B,MAAM,CAAC0R,cAAX,EAA2B;AACzB,eAAK3U,KAAL,CACEiD,MAAM,CAAC0R,cAAP,CAAsBpjB,KADxB,EAEE4tC,QAAQ,CAACqC,8BAFX;AAID;AACF,OAjCM,MAiCA;AACLv+B,QAAAA,MAAM,CAACgC,IAAP,GAAc,QAAd;AACD;;AACD,aAAO,KAAKE,UAAL,CAAgBlC,MAAhB,EAAwB,mBAAxB,CAAP;AACD,KAzDD,MAyDO;AACL,YAAMoX,QAA+B,GAAGqsB,OAAxC;AACA,UAAID,QAAJ,EAAcpsB,QAAQ,CAACosB,QAAT,GAAoB,IAApB;AACd,YAAM3xC,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;AACA,UAAIzxC,IAAJ,EAAUulB,QAAQ,CAAC1F,cAAT,GAA0B7f,IAA1B;AACV,WAAKmxC,0BAAL;AACA,aAAO,KAAK9gC,UAAL,CAAgBkV,QAAhB,EAA0B,qBAA1B,CAAP;AACD;AACF;;AAEDusB,EAAAA,iBAAiB,GAAoB;AACnC,UAAM/zC,IAAS,GAAG,KAAKmS,SAAL,EAAlB;;AAEA,QAAI,KAAKjT,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KAAyB,KAAKmoB,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;AACnD,aAAO,KAAK+xB,sBAAL,CAA4B,4BAA5B,EAA0DtzC,IAA1D,CAAP;AACD;;AAED,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC9X,IAAd,CAAJ,EAAyB;AACvB,YAAM6U,EAAgB,GAAG,KAAKQ,SAAL,EAAzB;AACA,WAAKsE,IAAL;;AACA,UAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KAAyB,KAAKmoB,YAAL,CAAkB,GAAlB,CAA7B,EAAqD;AACnD,eAAO,KAAK+xB,sBAAL,CACL,iCADK,EAELtzC,IAFK,CAAP;AAID,OALD,MAKO;AACLA,QAAAA,IAAI,CAACqT,GAAL,GAAW,KAAKkV,gBAAL,CAAsB5W,EAAtB,EAA0B,KAA1B,CAAX;AACA,eAAO,KAAKgiC,gCAAL,CAAsC3zC,IAAtC,EAA4C,KAA5C,CAAP;AACD;AACF;;AAED,SAAKkwC,gBAAL,CACElwC,IADF,EAEE,CAAC,UAAD,CAFF,EAGE,CACE,SADF,EAEE,UAFF,EAGE,SAHF,EAIE,WAJF,EAKE,QALF,EAME,QANF,EAOE,UAPF,CAHF,EAYEssC,QAAQ,CAACuB,2BAZX;AAeA,UAAMmG,GAAG,GAAG,KAAKR,wBAAL,CAA8BxzC,IAA9B,CAAZ;;AACA,QAAIg0C,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAED,SAAKrlB,iBAAL,CAAuB3uB,IAAvB,EAAwD,KAAxD;;AACA,QACE,CAACA,IAAI,CAACqS,QAAN,IACArS,IAAI,CAACqT,GAAL,CAASpR,IAAT,KAAkB,YADlB,KAECjC,IAAI,CAACqT,GAAL,CAASxb,IAAT,KAAkB,KAAlB,IAA2BmI,IAAI,CAACqT,GAAL,CAASxb,IAAT,KAAkB,KAF9C,KAGA,KAAK63C,wBAAL,EAJF,EAKE;AACA1vC,MAAAA,IAAI,CAACoS,IAAL,GAAYpS,IAAI,CAACqT,GAAL,CAASxb,IAArB;AACA,WAAK82B,iBAAL,CAAuB3uB,IAAvB,EAAwD,KAAxD;AACD;;AACD,WAAO,KAAK2zC,gCAAL,CAAsC3zC,IAAtC,EAA4C,CAAC,CAACA,IAAI,CAAC4zC,QAAnD,CAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAoB;AACpC,UAAMj0C,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACAnS,IAAAA,IAAI,CAAC40B,OAAL,GAAe,KAAKsf,wBAAL,EAAf;AACA,WAAO,KAAK5hC,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDk0C,EAAAA,wBAAwB,GAAoC;AAC1D,SAAK1zB,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AACA,UAAM67B,OAAO,GAAG,KAAKkc,WAAL,CACd,aADc,EAEd,KAAKiD,iBAAL,CAAuB9D,IAAvB,CAA4B,IAA5B,CAFc,CAAhB;AAIA,SAAKzvB,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,WAAO07B,OAAP;AACD;;AAEDuf,EAAAA,qBAAqB,GAAY;AAC/B,SAAK19B,IAAL;;AACA,QAAI,KAAKoK,GAAL,CAASjM,OAAE,CAACvZ,OAAZ,CAAJ,EAA0B;AACxB,aAAO,KAAKknB,YAAL,CAAkB,UAAlB,CAAP;AACD;;AACD,QAAI,KAAKA,YAAL,CAAkB,UAAlB,CAAJ,EAAmC;AACjC,WAAK9L,IAAL;AACD;;AACD,QAAI,CAAC,KAAKvX,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CAAL,EAA8B;AAC5B,aAAO,KAAP;AACD;;AACD,SAAK+d,IAAL;;AACA,QAAI,CAAC,KAAKg5B,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AACD,SAAKh5B,IAAL;AACA,WAAO,KAAKvX,KAAL,CAAW0V,OAAE,CAACpX,GAAd,CAAP;AACD;;AAED42C,EAAAA,0BAA0B,GAAsB;AAC9C,UAAMp0C,IAAuB,GAAG,KAAKmS,SAAL,EAAhC;AACAnS,IAAAA,IAAI,CAACnI,IAAL,GAAY,KAAKy6C,wBAAL,EAAZ;AACAtyC,IAAAA,IAAI,CAACuyC,UAAL,GAAkB,KAAK8B,qBAAL,CAA2Bz/B,OAAE,CAACpX,GAA9B,CAAlB;AACA,WAAO,KAAK8U,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDs0C,EAAAA,iBAAiB,GAAmB;AAClC,UAAMt0C,IAAoB,GAAG,KAAKmS,SAAL,EAA7B;AAEA,SAAKqO,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;;AAEA,QAAI,KAAKmG,KAAL,CAAW0V,OAAE,CAACvZ,OAAd,CAAJ,EAA4B;AAC1B2E,MAAAA,IAAI,CAAC4zC,QAAL,GAAgB,KAAK3yC,KAAL,CAAWyN,KAA3B;AACA,WAAK+H,IAAL;AACA,WAAKmK,gBAAL,CAAsB,UAAtB;AACD,KAJD,MAIO,IAAI,KAAKwB,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;AACzCpiB,MAAAA,IAAI,CAAC4zC,QAAL,GAAgB,IAAhB;AACD;;AAED,SAAKpzB,MAAL,CAAY5L,OAAE,CAAClc,QAAf;AACAsH,IAAAA,IAAI,CAACulB,aAAL,GAAqB,KAAK6uB,0BAAL,EAArB;AACAp0C,IAAAA,IAAI,CAACu0C,QAAL,GAAgB,KAAKnyB,aAAL,CAAmB,IAAnB,IAA2B,KAAKoyB,WAAL,EAA3B,GAAgD,IAAhE;AAEA,SAAKh0B,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;;AAEA,QAAI,KAAKqG,KAAL,CAAW0V,OAAE,CAACvZ,OAAd,CAAJ,EAA4B;AAC1B2E,MAAAA,IAAI,CAACwT,QAAL,GAAgB,KAAKvS,KAAL,CAAWyN,KAA3B;AACA,WAAK+H,IAAL;AACA,WAAK+J,MAAL,CAAY5L,OAAE,CAACjb,QAAf;AACD,KAJD,MAIO,IAAI,KAAKknB,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AAChCqG,MAAAA,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AACD;;AAEDxT,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAK2yB,cAAL,EAAtB;AACA,SAAKzyB,SAAL;AACA,SAAKxB,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AAEA,WAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED00C,EAAAA,gBAAgB,GAAkB;AAChC,UAAM10C,IAAmB,GAAG,KAAKmS,SAAL,EAA5B;AACAnS,IAAAA,IAAI,CAAC20C,YAAL,GAAoB,KAAKxD,oBAAL,CAClB,mBADkB,EAElB,KAAKyD,uBAAL,CAA6B3E,IAA7B,CAAkC,IAAlC,CAFkB,EAGJ,IAHI,EAIG,KAJH,CAApB;AASA,QAAI4E,mBAAmB,GAAG,KAA1B;AACA,QAAIC,eAAe,GAAG,IAAtB;AACA90C,IAAAA,IAAI,CAAC20C,YAAL,CAAkBnoC,OAAlB,CAA0BuoC,WAAW,IAAI;AAAA;;AACvC,UAAI;AAAE9yC,QAAAA;AAAF,UAAW8yC,WAAf;;AAEA,UACEF,mBAAmB,IACnB5yC,IAAI,KAAK,YADT,IAEAA,IAAI,KAAK,gBAFT,IAGA,EAAEA,IAAI,KAAK,oBAAT,IAAiC8yC,WAAW,CAACvhC,QAA/C,CAJF,EAKE;AACA,aAAKrG,KAAL,CAAW4nC,WAAW,CAACr2C,KAAvB,EAA8B4tC,QAAQ,CAAC6B,0BAAvC;AACD;;AAGD0G,MAAAA,mBAAmB,GACjBA,mBAAmB,IAClB5yC,IAAI,KAAK,oBAAT,IAAiC8yC,WAAW,CAACvhC,QAD9C,IAEAvR,IAAI,KAAK,gBAHX;;AAMA,UAAIA,IAAI,KAAK,YAAb,EAA2B;AACzB8yC,QAAAA,WAAW,GAAGA,WAAW,CAACjzB,cAA1B;AACA7f,QAAAA,IAAI,GAAG8yC,WAAW,CAAC9yC,IAAnB;AACD;;AAED,YAAM+yC,SAAS,GAAG/yC,IAAI,KAAK,oBAA3B;AAEA6yC,MAAAA,eAAe,uBAAGA,eAAH,+BAAsBE,SAArC;;AACA,UAAIF,eAAe,KAAKE,SAAxB,EAAmC;AACjC,aAAK7nC,KAAL,CACE4nC,WAAW,CAACr2C,KADd,EAEE4tC,QAAQ,CAAC0B,gCAFX;AAID;AACF,KAjCD;AAmCA,WAAO,KAAK17B,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED40C,EAAAA,uBAAuB,GAAoC;AAGzD,UAAM;AAAEl2C,MAAAA,KAAK,EAAEsU,QAAT;AAAmBnG,MAAAA;AAAnB,QAAgC,KAAK5L,KAA3C;AAEA,UAAM0gB,IAAI,GAAG,KAAKd,GAAL,CAASjM,OAAE,CAAC7a,QAAZ,CAAb;AACA,QAAIkI,IAAI,GAAG,KAAKuyC,WAAL,EAAX;AACA,UAAMhhC,QAAQ,GAAG,KAAKqN,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAjB;AACA,UAAMs7C,OAAO,GAAG,KAAKp0B,GAAL,CAASjM,OAAE,CAACpb,KAAZ,CAAhB;;AAEA,QAAIy7C,OAAJ,EAAa;AACX,YAAMC,WAAiC,GAAG,KAAK7gC,eAAL,CAAqBpS,IAArB,CAA1C;AACAizC,MAAAA,WAAW,CAAC1hC,QAAZ,GAAuBA,QAAvB;;AAEA,UACEvR,IAAI,CAACA,IAAL,KAAc,iBAAd,IACA,CAACA,IAAI,CAACsP,cADN,IAEAtP,IAAI,CAAC2vC,QAAL,CAAc3vC,IAAd,KAAuB,YAHzB,EAIE;AACAizC,QAAAA,WAAW,CAAC99C,KAAZ,GAAqB6K,IAAI,CAAC2vC,QAA1B;AACD,OAND,MAMO;AACL,aAAKzkC,KAAL,CAAWlL,IAAI,CAACvD,KAAhB,EAAuB4tC,QAAQ,CAACyB,uBAAhC;AAIAmH,QAAAA,WAAW,CAAC99C,KAAZ,GAAoB6K,IAApB;AACD;;AAEDizC,MAAAA,WAAW,CAACvsB,WAAZ,GAA0B,KAAK6rB,WAAL,EAA1B;AACAvyC,MAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgB4iC,WAAhB,EAA6B,oBAA7B,CAAP;AACD,KApBD,MAoBO,IAAI1hC,QAAJ,EAAc;AACnB,YAAM2hC,gBAAkC,GAAG,KAAK9gC,eAAL,CAAqBpS,IAArB,CAA3C;AACAkzC,MAAAA,gBAAgB,CAACrzB,cAAjB,GAAkC7f,IAAlC;AACAA,MAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgB6iC,gBAAhB,EAAkC,gBAAlC,CAAP;AACD;;AAED,QAAIxzB,IAAJ,EAAU;AACR,YAAMyzB,QAAsB,GAAG,KAAK5lC,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAA/B;AACAuoC,MAAAA,QAAQ,CAACtzB,cAAT,GAA0B7f,IAA1B;AACAA,MAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgB8iC,QAAhB,EAA0B,YAA1B,CAAP;AACD;;AAED,WAAOnzC,IAAP;AACD;;AAEDozC,EAAAA,wBAAwB,GAA0B;AAChD,UAAMr1C,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKqO,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA4G,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAK0yB,WAAL,EAAtB;AACA,SAAKh0B,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA,WAAO,KAAKiZ,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDs1C,EAAAA,gCAAgC,CAC9BrzC,IAD8B,EAE9BszC,QAF8B,EAGC;AAC/B,UAAMv1C,IAAmC,GAAG,KAAKmS,SAAL,EAA5C;;AACA,QAAIlQ,IAAI,KAAK,mBAAb,EAAkC;AAEhCjC,MAAAA,IAAI,CAACu1C,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACA,UAAIA,QAAJ,EAAc,KAAK9+B,IAAL;AACd,WAAKA,IAAL;AACD;;AACD,SAAKm8B,eAAL,CAAqBh+B,OAAE,CAAC/a,KAAxB,EAA+BmG,IAA/B;AACA,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDuzC,EAAAA,sBAAsB,GAAoB;AACxC,UAAMx1C,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;;AACAnS,IAAAA,IAAI,CAACq0B,OAAL,GAAe,CAAC,MAAM;AACpB,cAAQ,KAAKpzB,KAAL,CAAWgB,IAAnB;AACE,aAAK2S,OAAE,CAACzc,GAAR;AACA,aAAKyc,OAAE,CAACxc,MAAR;AACA,aAAKwc,OAAE,CAACrc,MAAR;AACA,aAAKqc,OAAE,CAACtX,KAAR;AACA,aAAKsX,OAAE,CAACrX,MAAR;AAEE,iBAAO,KAAKulB,aAAL,EAAP;;AACF;AACE,gBAAM,KAAKF,UAAL,EAAN;AATJ;AAWD,KAZc,GAAf;;AAaA,WAAO,KAAKtQ,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDy1C,EAAAA,0BAA0B,GAAa;AACrC,UAAMz1C,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACAnS,IAAAA,IAAI,CAACq0B,OAAL,GAAe,KAAKqhB,aAAL,CAAmB,KAAnB,CAAf;AACA,WAAO,KAAKpjC,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED21C,EAAAA,yBAAyB,GAAa;AACpC,QAAI,KAAK10C,KAAL,CAAWsf,MAAf,EAAuB,OAAO,KAAKi0B,WAAL,EAAP;AACvB,WAAO,MAAMmB,yBAAN,EAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAqC;AACrE,UAAMC,WAAW,GAAG,KAAK3D,mBAAL,EAApB;;AACA,QAAI,KAAK3vB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKqtB,qBAAL,EAAhC,EAA8D;AAC5D,aAAO,KAAKiC,wBAAL,CAA8BgE,WAA9B,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,WAAP;AACD;AACF;;AAEDC,EAAAA,mBAAmB,GAAa;AAC9B,YAAQ,KAAK70C,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC/c,IAAR;AACA,WAAK+c,OAAE,CAACjX,KAAR;AACA,WAAKiX,OAAE,CAACvX,KAAR;AAAe;AACb,gBAAM4E,IAAI,GAAG,KAAK/C,KAAL,CAAW0V,OAAE,CAACjX,KAAd,IACT,eADS,GAET,KAAKuB,KAAL,CAAW0V,OAAE,CAACvX,KAAd,IACA,eADA,GAEAiyC,mBAAmB,CAAC,KAAKruC,KAAL,CAAWyN,KAAZ,CAJvB;;AAKA,cACEzM,IAAI,KAAK9B,SAAT,IACA,KAAK41C,iBAAL,SAFF,EAGE;AACA,kBAAM/1C,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACA,iBAAKsE,IAAL;AACA,mBAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AACD,iBAAO,KAAK0vC,oBAAL,EAAP;AACD;;AACD,WAAK/8B,OAAE,CAACrc,MAAR;AACA,WAAKqc,OAAE,CAACzc,GAAR;AACA,WAAKyc,OAAE,CAACxc,MAAR;AACA,WAAKwc,OAAE,CAACtX,KAAR;AACA,WAAKsX,OAAE,CAACrX,MAAR;AACE,eAAO,KAAKi4C,sBAAL,EAAP;;AACF,WAAK5gC,OAAE,CAACvZ,OAAR;AACE,YAAI,KAAK4F,KAAL,CAAWyN,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,gBAAM1O,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACA,gBAAMsgB,SAAS,GAAG,KAAKvM,SAAL,EAAlB;;AACA,cAAIuM,SAAS,CAACxwB,IAAV,KAAmB2S,OAAE,CAACzc,GAAtB,IAA6Bs6B,SAAS,CAACxwB,IAAV,KAAmB2S,OAAE,CAACxc,MAAvD,EAA+D;AAC7D,kBAAM,KAAKwqB,UAAL,EAAN;AACD;;AACD5iB,UAAAA,IAAI,CAACq0B,OAAL,GAAe,KAAK2hB,eAAL,EAAf;AACA,iBAAO,KAAK1jC,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AACD;;AACF,WAAK4U,OAAE,CAAC7X,KAAR;AACE,eAAO,KAAK64C,kCAAL,EAAP;;AACF,WAAKhhC,OAAE,CAAClX,OAAR;AACE,eAAO,KAAKy0C,gBAAL,EAAP;;AACF,WAAKv9B,OAAE,CAACxX,OAAR;AACE,eAAO,KAAKk0C,iBAAL,EAAP;;AACF,WAAK18B,OAAE,CAAC7b,MAAR;AACE,eAAO,KAAK06C,WAAL,CAAiB,KAAKU,qBAAL,CAA2BlE,IAA3B,CAAgC,IAAhC,CAAjB,IACH,KAAKqE,iBAAL,EADG,GAEH,KAAKL,kBAAL,EAFJ;;AAGF,WAAKr/B,OAAE,CAAClc,QAAR;AACE,eAAO,KAAKg8C,gBAAL,EAAP;;AACF,WAAK9/B,OAAE,CAACxb,MAAR;AAaE,eAAO,KAAKi8C,wBAAL,EAAP;;AACF,WAAKzgC,OAAE,CAAC5a,SAAR;AACE,eAAO,KAAKy7C,0BAAL,EAAP;AA/DJ;;AAkEA,UAAM,KAAK7yB,UAAL,EAAN;AACD;;AAEDqzB,EAAAA,wBAAwB,GAAa;AACnC,QAAIh0C,IAAI,GAAG,KAAK6zC,mBAAL,EAAX;;AACA,WAAO,CAAC,KAAKlG,qBAAL,EAAD,IAAiC,KAAK/uB,GAAL,CAASjM,OAAE,CAAClc,QAAZ,CAAxC,EAA+D;AAC7D,UAAI,KAAKwG,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAJ,EAA6B;AAC3B,cAAMmH,IAAmB,GAAG,KAAKqU,eAAL,CAAqBpS,IAArB,CAA5B;AACAjC,QAAAA,IAAI,CAAC2oB,WAAL,GAAmB1mB,IAAnB;AACA,aAAKue,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACAoJ,QAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD,OALD,MAKO;AACL,cAAMA,IAA2B,GAAG,KAAKqU,eAAL,CAAqBpS,IAArB,CAApC;AACAjC,QAAAA,IAAI,CAAC4oB,UAAL,GAAkB3mB,IAAlB;AACAjC,QAAAA,IAAI,CAAC6oB,SAAL,GAAiB,KAAK2rB,WAAL,EAAjB;AACA,aAAKh0B,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACAoJ,QAAAA,IAAI,GAAG,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;AACF;;AACD,WAAOiC,IAAP;AACD;;AAEDi0C,EAAAA,mBAAmB,CACjB1oB,QADiB,EAEC;AAClB,UAAMxtB,IAAsB,GAAG,KAAKmS,SAAL,EAA/B;AACA,SAAKyO,gBAAL,CAAsB4M,QAAtB;AACAxtB,IAAAA,IAAI,CAACwtB,QAAL,GAAgBA,QAAhB;AACAxtB,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKq0B,2BAAL,EAAtB;;AAEA,QAAI3oB,QAAQ,KAAK,UAAjB,EAA6B;AAC3B,WAAK4oB,gCAAL,CAAsCp2C,IAAtC;AACD;;AAED,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDo2C,EAAAA,gCAAgC,CAACp2C,IAAD,EAAe;AAC7C,YAAQA,IAAI,CAAC8hB,cAAL,CAAoB7f,IAA5B;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE;;AACF;AACE,aAAKkL,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAAC0C,kBAAhC;AALJ;AAOD;;AAEDqH,EAAAA,gBAAgB,GAAkB;AAChC,UAAMr2C,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKyO,gBAAL,CAAsB,OAAtB;AACA,UAAM2E,aAAa,GAAG,KAAKpT,SAAL,EAAtB;AACAoT,IAAAA,aAAa,CAAC1tB,IAAd,GAAqB,KAAKy6C,wBAAL,EAArB;AACAtyC,IAAAA,IAAI,CAACulB,aAAL,GAAqB,KAAKjT,UAAL,CAAgBiT,aAAhB,EAA+B,iBAA/B,CAArB;AACA,WAAO,KAAKjT,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDm2C,EAAAA,2BAA2B,GAAa;AACtC,UAAM3oB,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC8oB,IAAhC,CAAqCC,EAAE,IACtD,KAAKh0B,YAAL,CAAkBg0B,EAAlB,CADe,CAAjB;AAGA,WAAO/oB,QAAQ,GACX,KAAK0oB,mBAAL,CAAyB1oB,QAAzB,CADW,GAEX,KAAKjL,YAAL,CAAkB,OAAlB,IACA,KAAK8zB,gBAAL,EADA,GAEA,KAAKJ,wBAAL,EAJJ;AAKD;;AAEDO,EAAAA,8BAA8B,CAC5BpkC,IAD4B,EAE5BqkC,oBAF4B,EAG5BjpB,QAH4B,EAIlB;AACV,UAAMxtB,IAA0C,GAAG,KAAKmS,SAAL,EAAnD;AACA,UAAMukC,kBAAkB,GAAG,KAAK71B,GAAL,CAAS2M,QAAT,CAA3B;AACA,UAAMt1B,KAAK,GAAG,EAAd;;AACA,OAAG;AACDA,MAAAA,KAAK,CAACgJ,IAAN,CAAWu1C,oBAAoB,EAA/B;AACD,KAFD,QAES,KAAK51B,GAAL,CAAS2M,QAAT,CAFT;;AAGA,QAAIt1B,KAAK,CAAC0I,MAAN,KAAiB,CAAjB,IAAsB,CAAC81C,kBAA3B,EAA+C;AAC7C,aAAOx+C,KAAK,CAAC,CAAD,CAAZ;AACD;;AACD8H,IAAAA,IAAI,CAAC9H,KAAL,GAAaA,KAAb;AACA,WAAO,KAAKoa,UAAL,CAAgBtS,IAAhB,EAAsBoS,IAAtB,CAAP;AACD;;AAEDukC,EAAAA,+BAA+B,GAAa;AAC1C,WAAO,KAAKH,8BAAL,CACL,oBADK,EAEL,KAAKL,2BAAL,CAAiClG,IAAjC,CAAsC,IAAtC,CAFK,EAGLr7B,OAAE,CAAC3Z,UAHE,CAAP;AAKD;;AAED27C,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKJ,8BAAL,CACL,aADK,EAEL,KAAKG,+BAAL,CAAqC1G,IAArC,CAA0C,IAA1C,CAFK,EAGLr7B,OAAE,CAAC7Z,SAHE,CAAP;AAKD;;AAED87C,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAKt1B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD;;AACD,WACE,KAAKriB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KACA,KAAKq6C,WAAL,CAAiB,KAAKqD,oCAAL,CAA0C7G,IAA1C,CAA+C,IAA/C,CAAjB,CAFF;AAID;;AAED8G,EAAAA,oBAAoB,GAAY;AAC9B,QAAI,KAAK73C,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,KAAKqH,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAA3B,EAAiD;AAC/C,WAAK0Z,IAAL;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AACzB,UAAIi+C,iBAAiB,GAAG,CAAxB;AACA,WAAKvgC,IAAL;;AAEA,aAAOugC,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK93C,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AACzB,YAAEi+C,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK93C,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAJ,EAA2B;AAChC,YAAE89C,iBAAF;AACD;;AACD,aAAKvgC,IAAL;AACD;;AACD,aAAO,IAAP;AACD;;AAED,QAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CAAJ,EAA6B;AAC3B,UAAIs+C,iBAAiB,GAAG,CAAxB;AACA,WAAKvgC,IAAL;;AAEA,aAAOugC,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK93C,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CAAJ,EAA6B;AAC3B,YAAEs+C,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK93C,KAAL,CAAW0V,OAAE,CAAC/b,QAAd,CAAJ,EAA6B;AAClC,YAAEm+C,iBAAF;AACD;;AACD,aAAKvgC,IAAL;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDqgC,EAAAA,oCAAoC,GAAY;AAC9C,SAAKrgC,IAAL;;AACA,QAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAACvb,MAAd,KAAyB,KAAK6F,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAA7B,EAAsD;AAGpD,aAAO,IAAP;AACD;;AACD,QAAI,KAAKg9C,oBAAL,EAAJ,EAAiC;AAC/B,UACE,KAAK73C,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KACA,KAAK0F,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CADA,IAEA,KAAK4F,KAAL,CAAW0V,OAAE,CAACjb,QAAd,CAFA,IAGA,KAAKuF,KAAL,CAAW0V,OAAE,CAACva,EAAd,CAJF,EAKE;AAKA,eAAO,IAAP;AACD;;AACD,UAAI,KAAK6E,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAJ,EAA2B;AACzB,aAAKod,IAAL;;AACA,YAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,CAAJ,EAA0B;AAExB,iBAAO,IAAP;AACD;AACF;AACF;;AACD,WAAO,KAAP;AACD;;AAEDq5C,EAAAA,oCAAoC,CAClCL,WADkC,EAEd;AACpB,WAAO,KAAKoE,QAAL,CAAc,MAAM;AACzB,YAAMC,CAAqB,GAAG,KAAK/kC,SAAL,EAA9B;AACA,WAAKqO,MAAL,CAAYqyB,WAAZ;AAEA,YAAM7yC,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAEA,YAAM8/B,OAAO,GAAG,CAAC,CAAC,KAAKjC,UAAL,CAChB,KAAKmH,2BAAL,CAAiClH,IAAjC,CAAsC,IAAtC,CADgB,CAAlB;;AAIA,UAAIgC,OAAO,IAAI,KAAK/yC,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAAf,EAAqC;AAGnC,YAAIq6C,iBAAiB,GAAG,KAAKxB,kCAAL,EAAxB;;AAGA,YAAIwB,iBAAiB,CAACn1C,IAAlB,KAA2B,YAA/B,EAA6C;AAC3CjC,UAAAA,IAAI,CAAC+xC,aAAL,GAAsBqF,iBAAtB;AACAp3C,UAAAA,IAAI,CAACiyC,OAAL,GAAe,IAAf;AACCjyC,UAAAA,IAAD,CAA0B8hB,cAA1B,GAA2C,IAA3C;AACAs1B,UAAAA,iBAAiB,GAAG,KAAK9kC,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAApB;AACD,SALD,MAKO;AACL,eAAKkxB,0BAAL,CAAgCkmB,iBAAhC,EAAmDp3C,IAAnD;AACCo3C,UAAAA,iBAAD,CAAuCnF,OAAvC,GAAiD,IAAjD;AACD;;AACDiF,QAAAA,CAAC,CAACp1B,cAAF,GAAmBs1B,iBAAnB;AACA,eAAO,KAAK9kC,UAAL,CAAgB4kC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAMG,qBAAqB,GACzB,KAAK5H,cAAL,MACA,KAAKO,UAAL,CAAgB,KAAKsH,0BAAL,CAAgCrH,IAAhC,CAAqC,IAArC,CAAhB,CAFF;;AAIA,UAAI,CAACoH,qBAAL,EAA4B;AAC1B,YAAI,CAACpF,OAAL,EAAc;AAEZ,iBAAO,KAAKD,qBAAL,CAA0C,KAA1C,EAAiDkF,CAAjD,CAAP;AACD;;AAGDl3C,QAAAA,IAAI,CAAC+xC,aAAL,GAAqB,KAAK3wB,eAAL,EAArB;AACAphB,QAAAA,IAAI,CAACiyC,OAAL,GAAeA,OAAf;AACCjyC,QAAAA,IAAD,CAA0B8hB,cAA1B,GAA2C,IAA3C;AACAo1B,QAAAA,CAAC,CAACp1B,cAAF,GAAmB,KAAKxP,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,eAAO,KAAKsS,UAAL,CAAgB4kC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAGD,YAAMj1C,IAAI,GAAG,KAAK+vC,qBAAL,CAA0C,KAA1C,CAAb;AACAhyC,MAAAA,IAAI,CAAC+xC,aAAL,GAAqBsF,qBAArB;AACAr3C,MAAAA,IAAI,CAAC8hB,cAAL,GAAsB7f,IAAtB;AACAjC,MAAAA,IAAI,CAACiyC,OAAL,GAAeA,OAAf;AACAiF,MAAAA,CAAC,CAACp1B,cAAF,GAAmB,KAAKxP,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,aAAO,KAAKsS,UAAL,CAAgB4kC,CAAhB,EAAmB,kBAAnB,CAAP;AACD,KAtDM,CAAP;AAuDD;;AAEDK,EAAAA,uCAAuC,GAAwB;AAC7D,WAAO,KAAKr4C,KAAL,CAAW0V,OAAE,CAACpb,KAAd,IACH,KAAK05C,oCAAL,CAA0Ct+B,OAAE,CAACpb,KAA7C,CADG,GAEH2G,SAFJ;AAGD;;AAEDuzC,EAAAA,wBAAwB,GAAwB;AAC9C,WAAO,KAAKx0C,KAAL,CAAW0V,OAAE,CAACpb,KAAd,IAAuB,KAAKw4C,qBAAL,EAAvB,GAAsD7xC,SAA7D;AACD;;AAEDs0C,EAAAA,cAAc,GAAc;AAC1B,WAAO,KAAKjC,kBAAL,CAAwB59B,OAAE,CAACpb,KAA3B,CAAP;AACD;;AAED89C,EAAAA,0BAA0B,GAAkB;AAC1C,UAAM3lC,EAAE,GAAG,KAAKyP,eAAL,EAAX;;AACA,QAAI,KAAKmB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKqtB,qBAAL,EAAhC,EAA8D;AAC5D,WAAKn5B,IAAL;AACA,aAAO9E,EAAP;AACD;AACF;;AAEDwlC,EAAAA,2BAA2B,GAAY;AACrC,QACE,CAAC,KAAKj4C,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAD,IACA,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB,SADrB,IAEA,KAAKkhC,qBAAL,EAHF,EAIE;AACA,aAAO,KAAP;AACD;;AACD,UAAMlJ,WAAW,GAAG,KAAKzlC,KAAL,CAAWylC,WAA/B;AACA,SAAKjwB,IAAL;;AACA,QAAI,CAAC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAD,IAAwB,CAAC,KAAKqH,KAAL,CAAW0V,OAAE,CAAC7X,KAAd,CAA7B,EAAmD;AACjD,aAAO,KAAP;AACD;;AAED,QAAI2pC,WAAJ,EAAiB;AACf,WAAKv5B,KAAL,CACE,KAAKlM,KAAL,CAAW6L,YADb,EAEEwG,aAAM,CAACpN,0BAFT,EAGE,SAHF;AAKD;;AAED,WAAO,IAAP;AACD;;AAED8rC,EAAAA,qBAAqB,CACnBwF,QAAQ,GAAG,IADQ,EAEnBN,CAAqB,GAAG,KAAK/kC,SAAL,EAFL,EAGC;AACpB,SAAK8kC,QAAL,CAAc,MAAM;AAClB,UAAIO,QAAJ,EAAc,KAAKh3B,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AACd09C,MAAAA,CAAC,CAACp1B,cAAF,GAAmB,KAAK0yB,WAAL,EAAnB;AACD,KAHD;AAIA,WAAO,KAAKliC,UAAL,CAAgB4kC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAGD1C,EAAAA,WAAW,GAAa;AAEtBnI,IAAAA,MAAM,CAAC,KAAKprC,KAAL,CAAWsf,MAAZ,CAAN;AACA,UAAMte,IAAI,GAAG,KAAKw1C,yBAAL,EAAb;;AACA,QAAI,KAAK7H,qBAAL,MAAgC,CAAC,KAAK/uB,GAAL,CAASjM,OAAE,CAAC1X,QAAZ,CAArC,EAA4D;AAC1D,aAAO+E,IAAP;AACD;;AACD,UAAMjC,IAAyB,GAAG,KAAKqU,eAAL,CAAqBpS,IAArB,CAAlC;AACAjC,IAAAA,IAAI,CAAC03C,SAAL,GAAiBz1C,IAAjB;AACAjC,IAAAA,IAAI,CAAC23C,WAAL,GAAmB,KAAKF,yBAAL,EAAnB;AACA,SAAKj3B,MAAL,CAAY5L,OAAE,CAACjb,QAAf;AACAqG,IAAAA,IAAI,CAAC43C,QAAL,GAAgB,KAAKpD,WAAL,EAAhB;AACA,SAAKh0B,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AACAwG,IAAAA,IAAI,CAAC63C,SAAL,GAAiB,KAAKrD,WAAL,EAAjB;AACA,WAAO,KAAKliC,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED83C,EAAAA,8BAA8B,GAAY;AACxC,WAAO,KAAKv1B,YAAL,CAAkB,UAAlB,KAAiC,KAAK2D,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAAC9X,IAArE;AACD;;AAED26C,EAAAA,yBAAyB,GAAa;AACpC,QAAI,KAAKZ,uBAAL,EAAJ,EAAoC;AAClC,aAAO,KAAKvB,gCAAL,CAAsC,gBAAtC,CAAP;AACD;;AACD,QAAI,KAAKp2C,KAAL,CAAW0V,OAAE,CAAC9X,IAAd,CAAJ,EAAyB;AAEvB,aAAO,KAAKw4C,gCAAL,CAAsC,mBAAtC,CAAP;AACD,KAHD,MAGO,IAAI,KAAKwC,8BAAL,EAAJ,EAA2C;AAEhD,aAAO,KAAKxC,gCAAL,CACL,mBADK,EAEU,IAFV,CAAP;AAID;;AACD,WAAO,KAAKsB,wBAAL,EAAP;AACD;;AAEDmB,EAAAA,oBAAoB,GAAsB;AACxC,UAAM/3C,IAAuB,GAAG,KAAKmS,SAAL,EAAhC;;AACA,UAAMxV,MAAM,GAAG,KAAKg2C,6BAAL,EAAf;;AACA3yC,IAAAA,IAAI,CAAC8hB,cAAL,GAAsBnlB,MAAM,IAAI,KAAKq7C,mBAAL,EAAhC;AACA,SAAKxyB,gBAAL,CAAsB,GAAtB;AACAxlB,IAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKumC,eAAL,EAAlB;AACA,WAAO,KAAK1jC,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDi4C,EAAAA,qBAAqB,CACnBC,UADmB,EAE8B;AACjD,UAAMC,aAAa,GAAG,KAAKl3C,KAAL,CAAWvC,KAAjC;AAEA,UAAM05C,aAAa,GAAG,KAAKpH,oBAAL,CACpB,uBADoB,EAEpB,KAAKqH,kCAAL,CAAwCpI,IAAxC,CAA6C,IAA7C,CAFoB,CAAtB;;AAKA,QAAI,CAACmI,aAAa,CAACx3C,MAAnB,EAA2B;AACzB,WAAKuM,KAAL,CAAWgrC,aAAX,EAA0B7L,QAAQ,CAACY,uBAAnC,EAA4DgL,UAA5D;AACD;;AAED,WAAOE,aAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAoC;AACpE,UAAMr4C,IAAqC,GAAG,KAAKmS,SAAL,EAA9C;AAGAnS,IAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAK+hC,iBAAL,CAAgD,KAAhD,CAAlB;;AACA,QAAI,KAAKjwB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvhB,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKkgC,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKn/B,UAAL,CAAgBtS,IAAhB,EAAsB,+BAAtB,CAAP;AACD;;AAEDs4C,EAAAA,2BAA2B,CACzBt4C,IADyB,EAEC;AAC1BA,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACA,SAAK6M,SAAL,CACEjuB,IAAI,CAAC2R,EADP,EAEE,kCAFF,EAGE2G,iBAHF;AAKAtY,IAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKkhC,wBAAL,EAAtB;;AACA,QAAI,KAAK5xB,GAAL,CAASjM,OAAE,CAAC1X,QAAZ,CAAJ,EAA2B;AACzB8C,MAAAA,IAAI,CAAC2jB,OAAL,GAAe,KAAKs0B,qBAAL,CAA2B,SAA3B,CAAf;AACD;;AACD,UAAMlnC,IAAuB,GAAG,KAAKoB,SAAL,EAAhC;AACApB,IAAAA,IAAI,CAACA,IAAL,GAAY,KAAKkmC,QAAL,CAAc,KAAK/C,wBAAL,CAA8BjE,IAA9B,CAAmC,IAAnC,CAAd,CAAZ;AACAjwC,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKuB,UAAL,CAAgBvB,IAAhB,EAAsB,iBAAtB,CAAZ;AACA,WAAO,KAAKuB,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDu4C,EAAAA,2BAA2B,CACzBv4C,IADyB,EAEC;AAC1BA,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACA,SAAK6M,SAAL,CAAejuB,IAAI,CAAC2R,EAApB,EAAwB,uBAAxB,EAAiD4G,YAAjD;AAEAvY,IAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKkhC,wBAAL,EAAtB;AACAzyC,IAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKm1B,QAAL,CAAc,MAAM;AACxC,WAAKz2B,MAAL,CAAY5L,OAAE,CAACva,EAAf;;AAEA,UACE,KAAKkoB,YAAL,CAAkB,WAAlB,KACA,KAAK2D,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAAClb,GAF/B,EAGE;AACA,cAAMsG,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACA,aAAKsE,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,aAAO,KAAKw0C,WAAL,EAAP;AACD,KAbqB,CAAtB;AAeA,SAAKxyB,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDw4C,EAAAA,aAAa,CAAIC,EAAJ,EAAoB;AAC/B,UAAMC,UAAU,GAAG,KAAKz3C,KAAL,CAAW4T,OAA9B;AACA,SAAK5T,KAAL,CAAW4T,OAAX,GAAqB,CAAC6jC,UAAU,CAAC,CAAD,CAAX,CAArB;;AACA,QAAI;AACF,aAAOD,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKx3C,KAAL,CAAW4T,OAAX,GAAqB6jC,UAArB;AACD;AACF;;AAODzB,EAAAA,QAAQ,CAAIwB,EAAJ,EAAoB;AAC1B,UAAMn4B,SAAS,GAAG,KAAKrf,KAAL,CAAWsf,MAA7B;AACA,SAAKtf,KAAL,CAAWsf,MAAX,GAAoB,IAApB;;AACA,QAAI;AACF,aAAOk4B,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKx3C,KAAL,CAAWsf,MAAX,GAAoBD,SAApB;AACD;AACF;;AAEDkyB,EAAAA,kBAAkB,CAACz6C,KAAD,EAAgD;AAChE,WAAO,CAAC,KAAKmH,KAAL,CAAWnH,KAAX,CAAD,GAAqBoI,SAArB,GAAiC,KAAK63C,mBAAL,EAAxC;AACD;;AAED3D,EAAAA,qBAAqB,CAACt8C,KAAD,EAA6B;AAChD,WAAO,KAAK4gD,iBAAL,CAAuB,MAAM,KAAKn4B,MAAL,CAAYzoB,KAAZ,CAA7B,CAAP;AACD;;AAEDigD,EAAAA,mBAAmB,GAAa;AAC9B,WAAO,KAAKW,iBAAL,CAAuB,MAAM,KAAKliC,IAAL,EAA7B,CAAP;AACD;;AAEDkiC,EAAAA,iBAAiB,CAACF,EAAD,EAA2B;AAC1C,WAAO,KAAKxB,QAAL,CAAc,MAAM;AACzBwB,MAAAA,EAAE;AACF,aAAO,KAAKjE,WAAL,EAAP;AACD,KAHM,CAAP;AAID;;AAEDoE,EAAAA,iBAAiB,GAAmB;AAClC,UAAM54C,IAAoB,GAAG,KAAKmS,SAAL,EAA7B;AAEAnS,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKzS,KAAL,CAAW0V,OAAE,CAACrc,MAAd,IACN,KAAKuqB,aAAL,EADM,GAEN,KAAK1B,eAAL,CAAmC,IAAnC,CAFJ;;AAGA,QAAI,KAAKP,GAAL,CAASjM,OAAE,CAACva,EAAZ,CAAJ,EAAqB;AACnB2F,MAAAA,IAAI,CAAC64C,WAAL,GAAmB,KAAK3tB,uBAAL,EAAnB;AACD;;AACD,WAAO,KAAK5Y,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED84C,EAAAA,sBAAsB,CACpB94C,IADoB,EAEpBorC,OAFoB,EAGC;AACrB,QAAIA,OAAJ,EAAaprC,IAAI,CAACof,KAAL,GAAa,IAAb;AACbpf,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACA,SAAK6M,SAAL,CACEjuB,IAAI,CAAC2R,EADP,EAEE,6BAFF,EAGEy5B,OAAO,GAAGxyB,kBAAH,GAAwBJ,YAHjC;AAMA,SAAKgI,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AACAiH,IAAAA,IAAI,CAAC40B,OAAL,GAAe,KAAKoc,oBAAL,CACb,aADa,EAEb,KAAK4H,iBAAL,CAAuB3I,IAAvB,CAA4B,IAA5B,CAFa,CAAf;AAIA,SAAKzvB,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA,WAAO,KAAKoZ,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED+4C,EAAAA,kBAAkB,GAAoB;AACpC,UAAM/4C,IAAqB,GAAG,KAAKmS,SAAL,EAA9B;AACA,SAAK2I,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AAEA,SAAK4J,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AAEA,SAAKigD,2BAAL,CACGh5C,IAAI,CAAC+Q,IAAL,GAAY,EADf,EAEmB5Q,SAFnB,EAGiB,IAHjB,EAIYyU,OAAE,CAAC1b,MAJf;AAMA,SAAK4hB,KAAL,CAAWD,IAAX;AACA,WAAO,KAAKvI,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDi5C,EAAAA,mCAAmC,CACjCj5C,IADiC,EAEjCk5C,MAAgB,GAAG,KAFc,EAGV;AACvBl5C,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;;AAEA,QAAI,CAAC83B,MAAL,EAAa;AACX,WAAKjrB,SAAL,CACEjuB,IAAI,CAAC2R,EADP,EAEE,iCAFF,EAGEkH,iBAHF;AAKD;;AAED,QAAI,KAAKgI,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAJ,EAAsB;AACpB,YAAMy/C,KAAK,GAAG,KAAKhnC,SAAL,EAAd;AACA,WAAK8mC,mCAAL,CAAyCE,KAAzC,EAAgD,IAAhD;AACAn5C,MAAAA,IAAI,CAAC+Q,IAAL,GAAYooC,KAAZ;AACD,KAJD,MAIO;AACL,WAAKr+B,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,WAAK+hC,SAAL,CAAex+B,KAAf,CAAqB0wB,KAArB;AACAtrC,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKgoC,kBAAL,EAAZ;AACA,WAAKK,SAAL,CAAev+B,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD;;AACD,WAAO,KAAKvI,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDq5C,EAAAA,uCAAuC,CACrCr5C,IADqC,EAEd;AACvB,QAAI,KAAKuiB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/BviB,MAAAA,IAAI,CAACs5C,MAAL,GAAc,IAAd;AACAt5C,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACD,KAHD,MAGO,IAAI,KAAKliB,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAJ,EAA2B;AAChCyH,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKmR,aAAL,EAAV;AACD,KAFM,MAEA;AACL,WAAKF,UAAL;AACD;;AACD,QAAI,KAAK1jB,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AACzB,WAAK+hB,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,WAAK+hC,SAAL,CAAex+B,KAAf,CAAqB0wB,KAArB;AACAtrC,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKgoC,kBAAL,EAAZ;AACA,WAAKK,SAAL,CAAev+B,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD,KAND,MAMO;AACL,WAAKmH,SAAL;AACD;;AAED,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDu5C,EAAAA,8BAA8B,CAC5Bv5C,IAD4B,EAE5Bw5C,QAF4B,EAGC;AAC7Bx5C,IAAAA,IAAI,CAACw5C,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AACAx5C,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACA,SAAK6M,SAAL,CAAejuB,IAAI,CAAC2R,EAApB,EAAwB,2BAAxB,EAAqDwG,YAArD;AACA,SAAKqI,MAAL,CAAY5L,OAAE,CAACva,EAAf;AACA,UAAMo/C,eAAe,GAAG,KAAKC,sBAAL,EAAxB;;AACA,QACE15C,IAAI,CAACif,UAAL,KAAoB,MAApB,IACAw6B,eAAe,CAACx3C,IAAhB,KAAyB,2BAF3B,EAGE;AACA,WAAKkL,KAAL,CAAWssC,eAAe,CAAC/6C,KAA3B,EAAkC4tC,QAAQ,CAACgB,wBAA3C;AACD;;AACDttC,IAAAA,IAAI,CAACy5C,eAAL,GAAuBA,eAAvB;AACA,SAAKz3B,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAED25C,EAAAA,2BAA2B,GAAY;AACrC,WACE,KAAKp3B,YAAL,CAAkB,SAAlB,KACA,KAAKwzB,iBAAL,SAFF;AAID;;AAED2D,EAAAA,sBAAsB,GAAwB;AAC5C,WAAO,KAAKC,2BAAL,KACH,KAAKC,8BAAL,EADG,GAEH,KAAKpI,iBAAL,CAAgD,KAAhD,CAFJ;AAGD;;AAEDoI,EAAAA,8BAA8B,GAAgC;AAC5D,UAAM55C,IAAiC,GAAG,KAAKmS,SAAL,EAA1C;AACA,SAAKyO,gBAAL,CAAsB,SAAtB;AACA,SAAKJ,MAAL,CAAY5L,OAAE,CAACxb,MAAf;;AACA,QAAI,CAAC,KAAK8F,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B;AAC1B,YAAM,KAAKqqB,UAAL,EAAN;AACD;;AAED5iB,IAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKqT,aAAL,EAAlB;AACA,SAAKtC,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA,WAAO,KAAKiZ,UAAL,CAAgBtS,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAIDyzC,EAAAA,WAAW,CAAIoG,CAAJ,EAAmB;AAC5B,UAAM54C,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAd;AACA,UAAMwvB,GAAG,GAAGD,CAAC,EAAb;AACA,SAAK54C,KAAL,GAAaA,KAAb;AACA,WAAO64C,GAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAAiBF,CAAjB,EAAiC;AACjD,UAAM3vB,MAAM,GAAG,KAAKC,QAAL,CAAc6G,KAAK,IAAI6oB,CAAC,MAAM7oB,KAAK,EAAnC,CAAf;AAEA,QAAI9G,MAAM,CAACkH,OAAP,IAAkB,CAAClH,MAAM,CAAClqB,IAA9B,EAAoC,OAAOG,SAAP;AACpC,QAAI+pB,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAClB,WAAOH,MAAM,CAAClqB,IAAd;AACD;;AAEDgwC,EAAAA,UAAU,CAAI6J,CAAJ,EAAqB;AAC7B,UAAM54C,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAd;AACA,UAAMJ,MAAM,GAAG2vB,CAAC,EAAhB;;AACA,QAAI3vB,MAAM,KAAK/pB,SAAX,IAAwB+pB,MAAM,KAAK,KAAvC,EAA8C;AAC5C,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,WAAKjpB,KAAL,GAAaA,KAAb;AACA,aAAOd,SAAP;AACD;AACF;;AAED65C,EAAAA,iBAAiB,CAACC,IAAD,EAA4B;AAC3C,QAAI,KAAK5G,gBAAL,EAAJ,EAA6B;AAC3B;AACD;;AACD,QAAI6G,SAAS,GAAG,KAAKj5C,KAAL,CAAWgB,IAA3B;AACA,QAAImQ,IAAJ;;AAEA,QAAI,KAAKmQ,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B23B,MAAAA,SAAS,GAAGtlC,OAAE,CAAClY,IAAf;AACA0V,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,WAAO,KAAK+nC,kBAAL,CAAwB,MAAM;AACnC,cAAQD,SAAR;AACE,aAAKtlC,OAAE,CAACxY,SAAR;AACE69C,UAAAA,IAAI,CAACr1B,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKw1B,sBAAL,CACLH,IADK,EAEO,KAFP,EAGqB,IAHrB,CAAP;;AAKF,aAAKrlC,OAAE,CAAC3X,MAAR;AAGEg9C,UAAAA,IAAI,CAACr1B,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKy1B,UAAL,CACLJ,IADK,EAEa,IAFb,EAGY,KAHZ,CAAP;;AAKF,aAAKrlC,OAAE,CAACjY,MAAR;AACE,cAAI,KAAKuC,KAAL,CAAW0V,OAAE,CAACjY,MAAd,KAAyB,KAAKizB,qBAAL,CAA2B,MAA3B,CAA7B,EAAiE;AAE/D,iBAAKpP,MAAL,CAAY5L,OAAE,CAACjY,MAAf;AACA,iBAAKikB,gBAAL,CAAsB,MAAtB;AACA,mBAAO,KAAKk4B,sBAAL,CAA4BmB,IAA5B,EAAgD,IAAhD,CAAP;AACD;;AAEH,aAAKrlC,OAAE,CAAClY,IAAR;AACE0V,UAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKnR,KAAL,CAAWyN,KAA1B;AACA,iBAAO,KAAK4rC,iBAAL,CAAuBL,IAAvB,EAA6B7nC,IAA7B,CAAP;;AACF,aAAKwC,OAAE,CAAC/c,IAAR;AAAc;AACZ,kBAAM6W,KAAK,GAAG,KAAKzN,KAAL,CAAWyN,KAAzB;;AACA,gBAAIA,KAAK,KAAK,QAAd,EAAwB;AACtB,qBAAO,KAAK2qC,uCAAL,CAA6CY,IAA7C,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAKM,kBAAL,CAAwBN,IAAxB,EAA8BvrC,KAA9B,EAAgD,IAAhD,CAAP;AACD;AACF;AAnCH;AAqCD,KAtCM,CAAP;AAuCD;;AAGD8rC,EAAAA,2BAA2B,GAAmB;AAC5C,WAAO,KAAKD,kBAAL,CACL,KAAKpoC,SAAL,EADK,EAEL,KAAKlR,KAAL,CAAWyN,KAFN,EAGM,IAHN,CAAP;AAKD;;AAED+rC,EAAAA,0BAA0B,CAACz6C,IAAD,EAAY4pB,IAAZ,EAAgD;AACxE,YAAQA,IAAI,CAAC/xB,IAAb;AACE,WAAK,SAAL;AAAgB;AACd,gBAAMknB,WAAW,GAAG,KAAKi7B,iBAAL,CAAuBh6C,IAAvB,CAApB;;AACA,cAAI+e,WAAJ,EAAiB;AACfA,YAAAA,WAAW,CAAC6F,OAAZ,GAAsB,IAAtB;AACA,mBAAO7F,WAAP;AACD;;AACD;AACD;;AACD,WAAK,QAAL;AAGE,YAAI,KAAK7f,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AACzB,eAAK+hB,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,eAAK+hC,SAAL,CAAex+B,KAAf,CAAqB0wB,KAArB;AACA,gBAAMoP,GAA0B,GAAG16C,IAAnC;AACA06C,UAAAA,GAAG,CAACpB,MAAJ,GAAa,IAAb;AACAoB,UAAAA,GAAG,CAAC/oC,EAAJ,GAASiY,IAAT;AACA8wB,UAAAA,GAAG,CAAC3pC,IAAJ,GAAW,KAAKgoC,kBAAL,EAAX;AACA,eAAKj+B,KAAL,CAAWD,IAAX;AACA,eAAKu+B,SAAL,CAAev+B,IAAf;AACA,iBAAO,KAAKvI,UAAL,CAAgBooC,GAAhB,EAAqB,qBAArB,CAAP;AACD;;AACD;;AAEF;AACE,eAAO,KAAKH,kBAAL,CAAwBv6C,IAAxB,EAA8B4pB,IAAI,CAAC/xB,IAAnC,EAAoD,KAApD,CAAP;AA1BJ;AA4BD;;AAGD0iD,EAAAA,kBAAkB,CAChBv6C,IADgB,EAEhB0O,KAFgB,EAGhB+H,IAHgB,EAIA;AAEhB,YAAQ/H,KAAR;AACE,WAAK,UAAL;AACE,YACE,KAAKisC,qBAAL,CAA2BlkC,IAA3B,MACC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,KAAyB,KAAKiC,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAD1B,CADF,EAGE;AACA,iBAAO,KAAK+iD,0BAAL,CAAgC56C,IAAhC,CAAP;AACD;;AACD;;AAEF,WAAK,MAAL;AACE,YAAIyW,IAAI,IAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAZ,EAAiC;AAC/B,cAAI4e,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAKqiC,sBAAL,CAA4B94C,IAA5B,EAAgD,KAAhD,CAAP;AACD;;AACD;;AAEF,WAAK,WAAL;AACE,YAAI,KAAK26C,qBAAL,CAA2BlkC,IAA3B,KAAoC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAxC,EAA6D;AAC3D,iBAAO,KAAKygD,2BAAL,CAAiCt4C,IAAjC,CAAP;AACD;;AACD;;AAEF,WAAK,QAAL;AACE,YAAI,KAAK26C,qBAAL,CAA2BlkC,IAA3B,CAAJ,EAAsC;AACpC,cAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAJ,EAA2B;AACzB,mBAAO,KAAK8gD,uCAAL,CAA6Cr5C,IAA7C,CAAP;AACD,WAFD,MAEO,IAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AAC9B,mBAAO,KAAKohD,mCAAL,CAAyCj5C,IAAzC,CAAP;AACD;AACF;;AACD;;AAEF,WAAK,WAAL;AACE,YAAI,KAAK26C,qBAAL,CAA2BlkC,IAA3B,KAAoC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAxC,EAA6D;AAC3D,iBAAO,KAAKohD,mCAAL,CAAyCj5C,IAAzC,CAAP;AACD;;AACD;;AAEF,WAAK,MAAL;AACE,YAAI,KAAK26C,qBAAL,CAA2BlkC,IAA3B,KAAoC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAxC,EAA6D;AAC3D,iBAAO,KAAK0gD,2BAAL,CAAiCv4C,IAAjC,CAAP;AACD;;AACD;AA3CJ;AA6CD;;AAED26C,EAAAA,qBAAqB,CAAClkC,IAAD,EAAgB;AACnC,QAAIA,IAAJ,EAAU;AACR,UAAI,KAAKokC,qBAAL,EAAJ,EAAkC,OAAO,KAAP;AAClC,WAAKpkC,IAAL;AACA,aAAO,IAAP;AACD;;AACD,WAAO,CAAC,KAAK48B,gBAAL,EAAR;AACD;;AAEDyH,EAAAA,mCAAmC,CACjC9nC,QADiC,EAEjCnG,QAFiC,EAGL;AAC5B,QAAI,CAAC,KAAK0U,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAOphB,SAAP;AACD;;AAED,UAAM46C,yBAAyB,GAAG,KAAK95C,KAAL,CAAWgpB,sBAA7C;AACA,SAAKhpB,KAAL,CAAWgpB,sBAAX,GAAoC,IAApC;AAEA,UAAM6vB,GAA+B,GAAG,KAAKC,kBAAL,CAAwB,MAAM;AACpE,YAAM/5C,IAA+B,GAAG,KAAKwP,WAAL,CACtCwD,QADsC,EAEtCnG,QAFsC,CAAxC;AAIA7M,MAAAA,IAAI,CAACuR,cAAL,GAAsB,KAAKmhC,qBAAL,EAAtB;AAEA,YAAMtiB,mBAAN,CAA0BpwB,IAA1B;AACAA,MAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAK01B,uCAAL,EAAlB;AACA,WAAK/2B,MAAL,CAAY5L,OAAE,CAAC/a,KAAf;AACA,aAAOmG,IAAP;AACD,KAXuC,CAAxC;AAaA,SAAKiB,KAAL,CAAWgpB,sBAAX,GAAoC8wB,yBAApC;;AAEA,QAAI,CAACjB,GAAL,EAAU;AACR,aAAO35C,SAAP;AACD;;AAED,WAAO,KAAKmyB,oBAAL,CACLwnB,GADK,EAEwB,IAFxB,EAGO,IAHP,CAAP;AAKD;;AAEDrI,EAAAA,oBAAoB,GAAmC;AACrD,UAAMzxC,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAK60C,QAAL,CAAc,MAE1B,KAAKuB,aAAL,CAAmB,MAAM;AACvB,WAAKhzB,gBAAL,CAAsB,GAAtB;AACA,aAAO,KAAKwrB,oBAAL,CACL,2BADK,EAEL,KAAKwD,WAAL,CAAiBvE,IAAjB,CAAsB,IAAtB,CAFK,CAAP;AAID,KAND,CAFY,CAAd;;AAUA,QAAIjwC,IAAI,CAACoC,MAAL,CAAYxB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAKuM,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAACa,kBAAhC;AACD;;AACD,SAAK3nB,gBAAL,CAAsB,GAAtB;AACA,WAAO,KAAKlT,UAAL,CAAgBtS,IAAhB,EAAsB,8BAAtB,CAAP;AACD;;AAEDg7C,EAAAA,oBAAoB,GAAY;AAC9B,QAAI,KAAK97C,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AACvB,cAAQ,KAAKoJ,KAAL,CAAWyN,KAAnB;AACE,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACA,aAAK,WAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACA,aAAK,MAAL;AACE,iBAAO,IAAP;AARJ;AAUD;;AAED,WAAO,KAAP;AACD;;AAMDob,EAAAA,wBAAwB,GAAY;AAClC,QAAI,KAAKkxB,oBAAL,EAAJ,EAAiC,OAAO,KAAP;AACjC,WAAO,MAAMlxB,wBAAN,EAAP;AACD;;AAEDmxB,EAAAA,uBAAuB,CACrB5qB,cADqB,EAErB6qB,UAFqB,EAGc;AAEnC,UAAMloC,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AAEA,QAAI8jC,aAAJ;AACA,QAAIiD,QAAQ,GAAG,KAAf;AACA,QAAIuH,QAAQ,GAAG,KAAf;;AACA,QAAI9qB,cAAc,KAAKlwB,SAAvB,EAAkC;AAChC,YAAMgwC,QAAQ,GAAG,EAAjB;AACA,WAAKD,gBAAL,CAAsBC,QAAtB,EAAgC,CAC9B,QAD8B,EAE9B,SAF8B,EAG9B,WAH8B,EAI9B,UAJ8B,EAK9B,UAL8B,CAAhC;AAOAQ,MAAAA,aAAa,GAAGR,QAAQ,CAACQ,aAAzB;AACAwK,MAAAA,QAAQ,GAAGhL,QAAQ,CAACgL,QAApB;AACAvH,MAAAA,QAAQ,GAAGzD,QAAQ,CAACyD,QAApB;;AACA,UACEvjB,cAAc,KAAK,KAAnB,KACCsgB,aAAa,IAAIiD,QAAjB,IAA6BuH,QAD9B,CADF,EAGE;AACA,aAAKhuC,KAAL,CAAW6F,QAAX,EAAqBs5B,QAAQ,CAACyC,2BAA9B;AACD;AACF;;AAED,UAAM/f,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMosB,GAAG,GAAG,KAAKrsB,iBAAL,CAAuBC,IAAI,CAACtwB,KAA5B,EAAmCswB,IAAI,CAAChuB,GAAL,CAAStC,KAA5C,EAAmDswB,IAAnD,CAAZ;;AACA,QAAI2hB,aAAa,IAAIiD,QAAjB,IAA6BuH,QAAjC,EAA2C;AACzC,YAAME,EAAyB,GAAG,KAAK7rC,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAlC;;AACA,UAAIquC,UAAU,CAACt6C,MAAf,EAAuB;AACrBy6C,QAAAA,EAAE,CAACH,UAAH,GAAgBA,UAAhB;AACD;;AACD,UAAIvK,aAAJ,EAAmB0K,EAAE,CAAC1K,aAAH,GAAmBA,aAAnB;AACnB,UAAIiD,QAAJ,EAAcyH,EAAE,CAACzH,QAAH,GAAcA,QAAd;AACd,UAAIuH,QAAJ,EAAcE,EAAE,CAACF,QAAH,GAAcA,QAAd;;AACd,UAAIC,GAAG,CAACn5C,IAAJ,KAAa,YAAb,IAA6Bm5C,GAAG,CAACn5C,IAAJ,KAAa,mBAA9C,EAAmE;AACjE,aAAKkL,KAAL,CAAWkuC,EAAE,CAAC38C,KAAd,EAAqB4tC,QAAQ,CAAC8C,gCAA9B;AACD;;AACDiM,MAAAA,EAAE,CAACC,SAAH,GAAiBF,GAAjB;AACA,aAAO,KAAK9oC,UAAL,CAAgB+oC,EAAhB,EAAoB,qBAApB,CAAP;AACD;;AAED,QAAIH,UAAU,CAACt6C,MAAf,EAAuB;AACrBouB,MAAAA,IAAI,CAACksB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOE,GAAP;AACD;;AAED7xB,EAAAA,0BAA0B,CACxBvpB,IADwB,EAExBiC,IAFwB,EAGxB8P,QAAkB,GAAG,KAHG,EAIlB;AACN,QAAI,KAAK7S,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwG,MAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKqxB,oCAAL,CAA0Ct+B,OAAE,CAACpb,KAA7C,CAAlB;AACD;;AAED,UAAM+hD,YAAY,GAChBt5C,IAAI,KAAK,qBAAT,GACI,mBADJ,GAEIA,IAAI,KAAK,aAAT,GACA,iBADA,GAEA9B,SALN;;AAMA,QAAIo7C,YAAY,IAAI,CAAC,KAAKr8C,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAjB,IAA0C,KAAKs6C,gBAAL,EAA9C,EAAuE;AACrE,WAAK/gC,UAAL,CAAgBtS,IAAhB,EAAsBu7C,YAAtB;AACA;AACD;;AACD,QAAIA,YAAY,KAAK,mBAAjB,IAAwC,KAAKt6C,KAAL,CAAW8kC,gBAAvD,EAAyE;AACvE,WAAK54B,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAACS,gCAAhC;;AACA,UAEE/sC,IAAI,CAAC4kB,OAFP,EAGE;AACA,cAAM2E,0BAAN,CAAiCvpB,IAAjC,EAAuCu7C,YAAvC,EAAqDxpC,QAArD;AACA;AACD;AACF;;AAED,UAAMwX,0BAAN,CAAiCvpB,IAAjC,EAAuCiC,IAAvC,EAA6C8P,QAA7C;AACD;;AAEDypC,EAAAA,2BAA2B,CAACx7C,IAAD,EAAyB;AAClD,QAAI,CAACA,IAAI,CAAC+Q,IAAN,IAAc/Q,IAAI,CAAC2R,EAAvB,EAA2B;AAGzB,WAAKsc,SAAL,CAAejuB,IAAI,CAAC2R,EAApB,EAAwB,eAAxB,EAAyC8G,eAAzC;AACD,KAJD,MAIO;AACL,YAAM+iC,2BAAN,CAAkC,GAAGr5C,SAArC;AACD;AACF;;AAEDs5C,EAAAA,0BAA0B,CAACC,KAAD,EAAuC;AAC/DA,IAAAA,KAAK,CAAClvC,OAAN,CAAcxM,IAAI,IAAI;AACpB,UAAI,CAAAA,IAAI,QAAJ,YAAAA,IAAI,CAAEiC,IAAN,MAAe,sBAAnB,EAA2C;AACzC,aAAKkL,KAAL,CACEnN,IAAI,CAAC8hB,cAAL,CAAoBpjB,KADtB,EAEE4tC,QAAQ,CAAC2C,wBAFX;AAID;AACF,KAPD;AAQD;;AAEDthB,EAAAA,gBAAgB,CACdF,QADc,EAEdkuB,UAFc,EAGiB;AAK/B,SAAKF,0BAAL,CAAgChuB,QAAhC;AACA,WAAOA,QAAP;AACD;;AAEDI,EAAAA,cAAc,CAAC,GAAGnd,IAAJ,EAAiD;AAC7D,UAAM1Q,IAAI,GAAG,MAAM6tB,cAAN,CAAqB,GAAGnd,IAAxB,CAAb;;AAEA,QAAI1Q,IAAI,CAACiC,IAAL,KAAc,iBAAlB,EAAqC;AACnC,WAAKw5C,0BAAL,CAAgCz7C,IAAI,CAACQ,QAArC;AACD;;AAED,WAAOR,IAAP;AACD;;AAED8T,EAAAA,cAAc,CACZC,IADY,EAEZf,QAFY,EAGZnG,QAHY,EAIZmH,OAJY,EAKZ/S,KALY,EAME;AACd,QAAI,CAAC,KAAK2uC,qBAAL,EAAD,IAAiC,KAAK1wC,KAAL,CAAW0V,OAAE,CAACna,IAAd,CAArC,EAA0D;AAIxD,WAAKwG,KAAL,CAAWwlC,WAAX,GAAyB,KAAzB;AACA,WAAKhwB,IAAL;AAEA,YAAMmlC,iBAAwC,GAAG,KAAKpsC,WAAL,CAC/CwD,QAD+C,EAE/CnG,QAF+C,CAAjD;AAIA+uC,MAAAA,iBAAiB,CAACnsC,UAAlB,GAA+BsE,IAA/B;AACA,aAAO,KAAKzB,UAAL,CAAgBspC,iBAAhB,EAAmC,qBAAnC,CAAP;AACD;;AAED,QAAI,KAAKr6B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAI1B,YAAM2I,MAAM,GAAG,KAAK6vB,kBAAL,CAAwB,MAAM;AAC3C,YAAI,CAAC/lC,OAAD,IAAY,KAAK6nC,oBAAL,CAA0B9nC,IAA1B,CAAhB,EAAiD;AAG/C,gBAAM+nC,YAAY,GAAG,KAAKhB,mCAAL,CACnB9nC,QADmB,EAEnBnG,QAFmB,CAArB;;AAIA,cAAIivC,YAAJ,EAAkB;AAChB,mBAAOA,YAAP;AACD;AACF;;AAED,cAAM97C,IAAsB,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAA/B;AACA7M,QAAAA,IAAI,CAACyT,MAAL,GAAcM,IAAd;AAEA,cAAMoe,aAAa,GAAG,KAAKsf,oBAAL,EAAtB;;AAEA,YAAItf,aAAJ,EAAmB;AACjB,cAAI,CAACne,OAAD,IAAY,KAAK6M,GAAL,CAASjM,OAAE,CAACxb,MAAZ,CAAhB,EAAqC;AAGnC4G,YAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CACfnd,OAAE,CAACvb,MADY,EAEK,KAFL,CAAjB;AAMA,iBAAKoiD,0BAAL,CAAgCz7C,IAAI,CAACmC,SAArC;AAEAnC,YAAAA,IAAI,CAACuR,cAAL,GAAsB4gB,aAAtB;;AACA,gBAAIlxB,KAAK,CAACgT,mBAAV,EAA+B;AAE7BjU,cAAAA,IAAI,CAACwT,QAAL,GAAgB,KAAhB;AACD;;AACD,mBAAO,KAAKD,oBAAL,CAA0BvT,IAA1B,EAAgCiB,KAAK,CAACgT,mBAAtC,CAAP;AACD,WAjBD,MAiBO,IAAI,KAAK/U,KAAL,CAAW0V,OAAE,CAAC5a,SAAd,CAAJ,EAA8B;AACnC,kBAAMkwB,MAAM,GAAG,KAAK6xB,6BAAL,CACbhoC,IADa,EAEbf,QAFa,EAGbnG,QAHa,EAIb5L,KAJa,CAAf;AAMAipB,YAAAA,MAAM,CAAC3Y,cAAP,GAAwB4gB,aAAxB;AACA,mBAAOjI,MAAP;AACD;AACF;;AAED,aAAKtH,UAAL;AACD,OAjDc,CAAf;AAmDA,UAAIsH,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMpW,cAAN,CAAqBC,IAArB,EAA2Bf,QAA3B,EAAqCnG,QAArC,EAA+CmH,OAA/C,EAAwD/S,KAAxD,CAAP;AACD;;AAEDmxB,EAAAA,iBAAiB,CAACpyB,IAAD,EAA8B;AAC7C,QAAI,KAAKuhB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAG1B,YAAMhQ,cAAc,GAAG,KAAKwoC,kBAAL,CAAwB,MAAM;AACnD,cAAMrpC,IAAI,GAAG,KAAK+gC,oBAAL,EAAb;AACA,YAAI,CAAC,KAAKvyC,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAL,EAA4B,KAAKwpB,UAAL;AAC5B,eAAOlS,IAAP;AACD,OAJsB,CAAvB;;AAKA,UAAIa,cAAJ,EAAoB;AAClBvR,QAAAA,IAAI,CAACuR,cAAL,GAAsBA,cAAtB;AACD;AACF;;AAED,UAAM6gB,iBAAN,CAAwBpyB,IAAxB;AACD;;AAEDg8C,EAAAA,WAAW,CACThtB,IADS,EAETitB,YAFS,EAGTC,YAHS,EAITC,OAJS,EAKT;AACA,QACEhQ,OAAO,CAACv3B,OAAE,CAACpX,GAAH,CAAOhG,KAAR,CAAP,GAAwB2kD,OAAxB,IACA,CAAC,KAAKvM,qBAAL,EADD,IAEA,KAAKrtB,YAAL,CAAkB,IAAlB,CAHF,EAIE;AACA,YAAMviB,IAAsB,GAAG,KAAKwP,WAAL,CAC7BysC,YAD6B,EAE7BC,YAF6B,CAA/B;AAIAl8C,MAAAA,IAAI,CAACyP,UAAL,GAAkBuf,IAAlB;;AACA,YAAMryB,MAAM,GAAG,KAAKg2C,6BAAL,EAAf;;AACA,UAAIh2C,MAAJ,EAAY;AACVqD,QAAAA,IAAI,CAAC8hB,cAAL,GAAsBnlB,MAAtB;AACD,OAFD,MAEO;AACLqD,QAAAA,IAAI,CAAC8hB,cAAL,GAAsB,KAAKk2B,mBAAL,EAAtB;AACD;;AACD,WAAK1lC,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB;AAEA,WAAKo8C,YAAL;AACA,aAAO,KAAKJ,WAAL,CAAiBh8C,IAAjB,EAAuBi8C,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;;AAED,WAAO,MAAMH,WAAN,CAAkBhtB,IAAlB,EAAwBitB,YAAxB,EAAsCC,YAAtC,EAAoDC,OAApD,CAAP;AACD;;AAEDjsB,EAAAA,iBAAiB,CACfja,IADe,EAEfpJ,QAFe,EAGfwvC,aAHe,EAKfhvB,SALe,EAMT;;AAeRivB,EAAAA,qBAAqB,GAAG;;AAExBt5B,EAAAA,WAAW,CAAChjB,IAAD,EAA4B;AACrCA,IAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;;AACA,QAAI,KAAK/f,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,KAAKqH,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,CAAvB,IAA8C,KAAK2D,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAlD,EAAyE;AACvE,UAAIwjD,KAAK,GAAG,KAAKr2B,SAAL,EAAZ;;AAEA,UACE,KAAK3D,YAAL,CAAkB,MAAlB,KAEAg6B,KAAK,CAACt6C,IAAN,KAAe2S,OAAE,CAACtb,KAFlB,IAIA,EAAEijD,KAAK,CAACt6C,IAAN,KAAe2S,OAAE,CAAC/c,IAAlB,IAA0B0kD,KAAK,CAAC7tC,KAAN,KAAgB,MAA5C,CAJA,IAMA6tC,KAAK,CAACt6C,IAAN,KAAe2S,OAAE,CAACva,EAPpB,EAQE;AACA2F,QAAAA,IAAI,CAACif,UAAL,GAAkB,MAAlB;AACA,aAAKxI,IAAL;AACA8lC,QAAAA,KAAK,GAAG,KAAKr2B,SAAL,EAAR;AACD;;AAED,UAAI,KAAKhnB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB0kD,KAAK,CAACt6C,IAAN,KAAe2S,OAAE,CAACva,EAA7C,EAAiD;AAC/C,eAAO,KAAKk/C,8BAAL,CAAoCv5C,IAApC,CAAP;AACD;AACF;;AAED,UAAMw8C,UAAU,GAAG,MAAMx5B,WAAN,CAAkBhjB,IAAlB,CAAnB;;AAKA,QACEw8C,UAAU,CAACv9B,UAAX,KAA0B,MAA1B,IACAu9B,UAAU,CAACn6C,UAAX,CAAsBzB,MAAtB,GAA+B,CAD/B,IAEA47C,UAAU,CAACn6C,UAAX,CAAsB,CAAtB,EAAyBJ,IAAzB,KAAkC,wBAHpC,EAIE;AACA,WAAKkL,KAAL,CACEqvC,UAAU,CAAC99C,KADb,EAEE4tC,QAAQ,CAACwC,sCAFX;AAID;;AAED,WAAO0N,UAAP;AACD;;AAED5oC,EAAAA,WAAW,CAAC5T,IAAD,EAA4B;AACrC,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACxX,OAAd,CAAJ,EAA4B;AAE1B,WAAKqZ,IAAL;;AACA,UACE,KAAK8L,YAAL,CAAkB,MAAlB,KACA,KAAKwzB,iBAAL,SAFF,EAGE;AACA/1C,QAAAA,IAAI,CAACif,UAAL,GAAkB,MAAlB;AACA,aAAKxI,IAAL;AACD,OAND,MAMO;AACLzW,QAAAA,IAAI,CAACif,UAAL,GAAkB,OAAlB;AACD;;AACD,aAAO,KAAKs6B,8BAAL,CAAoCv5C,IAApC,EAAyD,IAAzD,CAAP;AACD,KAbD,MAaO,IAAI,KAAK6gB,GAAL,CAASjM,OAAE,CAACva,EAAZ,CAAJ,EAAqB;AAE1B,YAAMC,MAA4B,GAAG0F,IAArC;AACA1F,MAAAA,MAAM,CAACmV,UAAP,GAAoB,KAAKqR,eAAL,EAApB;AACA,WAAKkB,SAAL;AACA,aAAO,KAAK1P,UAAL,CAAgBhY,MAAhB,EAAwB,oBAAxB,CAAP;AACD,KANM,MAMA,IAAI,KAAK8nB,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAEnC,YAAM6J,IAAoC,GAAGjsB,IAA7C;AAEA,WAAK4gB,gBAAL,CAAsB,WAAtB;AACAqL,MAAAA,IAAI,CAACta,EAAL,GAAU,KAAKyP,eAAL,EAAV;AACA,WAAKY,SAAL;AACA,aAAO,KAAK1P,UAAL,CAAgB2Z,IAAhB,EAAsB,8BAAtB,CAAP;AACD,KARM,MAQA;AACL,UAAI,KAAK1J,YAAL,CAAkB,MAAlB,KAA6B,KAAK2D,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAAC7b,MAA9D,EAAsE;AACpE,aAAK0d,IAAL;AACAzW,QAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACD,OAHD,MAGO;AACLrjB,QAAAA,IAAI,CAACqjB,UAAL,GAAkB,OAAlB;AACD;;AAED,aAAO,MAAMzP,WAAN,CAAkB5T,IAAlB,CAAP;AACD;AACF;;AAEDy8C,EAAAA,eAAe,GAAY;AACzB,WACE,KAAKl6B,YAAL,CAAkB,UAAlB,KAAiC,KAAK2D,SAAL,GAAiBjkB,IAAjB,KAA0B2S,OAAE,CAAC3X,MADhE;AAGD;;AAED8sB,EAAAA,4BAA4B,GAAiC;AAC3D,QAAI,KAAK0yB,eAAL,EAAJ,EAA4B;AAC1B,YAAMC,GAAG,GAAG,KAAKvqC,SAAL,EAAZ;AACA,WAAKsE,IAAL;AACAimC,MAAAA,GAAG,CAACnH,QAAJ,GAAe,IAAf;AACA,WAAK8E,UAAL,CAAgBqC,GAAhB,EAAqB,IAArB,EAA2B,IAA3B;AACA,aAAOA,GAAP;AACD;;AAID,QAAI,KAAKz7C,KAAL,CAAWyN,KAAX,KAAqB,WAAzB,EAAsC;AACpC,YAAMwb,MAAM,GAAG,KAAKqwB,kBAAL,CACb,KAAKpoC,SAAL,EADa,EAEb,KAAKlR,KAAL,CAAWyN,KAFE,EAGb,IAHa,CAAf;AAMA,UAAIwb,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMH,4BAAN,EAAP;AACD;;AAED4yB,EAAAA,qBAAqB,CAAC9nC,OAAD,EAAmB4U,QAAnB,EAAoD;AACvE,QAAI,KAAKxoB,KAAL,CAAWgB,IAAX,KAAoB2S,OAAE,CAACjY,MAA3B,EAAmC;AACjC,YAAM4/C,KAAK,GAAG,KAAKr2B,SAAL,EAAd;;AACA,UAAIq2B,KAAK,CAACt6C,IAAN,KAAe2S,OAAE,CAAC/c,IAAlB,IAA0B0kD,KAAK,CAAC7tC,KAAN,KAAgB,MAA9C,EAAsD;AACpD,cAAM1O,IAAyB,GAAG,KAAKmS,SAAL,EAAlC;AACA,aAAKqO,MAAL,CAAY5L,OAAE,CAACjY,MAAf;AACA,aAAKikB,gBAAL,CAAsB,MAAtB;AACA,eAAO,KAAKk4B,sBAAL,CAA4B94C,IAA5B,EAAgD,IAAhD,CAAP;AACD;AACF;;AACD,WAAO,MAAM28C,qBAAN,CAA4B9nC,OAA5B,EAAqC4U,QAArC,CAAP;AACD;;AAEDmzB,EAAAA,mBAAmB,GAAqB;AACtC,WAAO,KAAK9M,eAAL,CAAqB,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAArB,CAAP;AACD;;AAED+M,EAAAA,kBAAkB,CAAChwB,MAAD,EAAciwB,SAAd,EAAgD;AAChE,WAAOA,SAAS,CAACC,IAAV,CAAevN,QAAQ,IAAI;AAChC,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,eAAO3iB,MAAM,CAAC8jB,aAAP,KAAyBnB,QAAhC;AACD;;AACD,aAAO,CAAC,CAAC3iB,MAAM,CAAC2iB,QAAD,CAAf;AACD,KALM,CAAP;AAMD;;AAED5iB,EAAAA,gBAAgB,CACd1b,SADc,EAEd2b,MAFc,EAGd5rB,KAHc,EAIR;AACN,UAAM+7C,8BAA8B,GAAG,CACrC,SADqC,EAErC,SAFqC,EAGrC,QAHqC,EAIrC,WAJqC,EAKrC,UALqC,EAMrC,UANqC,EAOrC,UAPqC,CAAvC;AASA,SAAK9M,gBAAL,CACErjB,MADF,EAEEmwB,8BAA8B,CAAChsC,MAA/B,CAAsC,CAAC,QAAD,CAAtC,CAFF;;AAKA,UAAMisC,gCAAgC,GAAG,MAAM;AAC7C,YAAMj3B,QAAQ,GAAG,CAAC,CAAC6G,MAAM,CAAC5G,MAA1B;;AACA,UAAID,QAAQ,IAAI,KAAKnF,GAAL,CAASjM,OAAE,CAAC7b,MAAZ,CAAhB,EAAqC;AACnC,YAAI,KAAK8jD,kBAAL,CAAwBhwB,MAAxB,EAAgCmwB,8BAAhC,CAAJ,EAAqE;AACnE,eAAK7vC,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0/B,QAAQ,CAACsC,6BAApC;AACD;;AACD,aAAKsO,qBAAL,CAA2BhsC,SAA3B,EAAwC2b,MAAxC;AACD,OALD,MAKO;AACL,aAAKswB,4BAAL,CAAkCjsC,SAAlC,EAA6C2b,MAA7C,EAAqD5rB,KAArD,EAA4D+kB,QAA5D;AACD;AACF,KAVD;;AAWA,QAAI6G,MAAM,CAACjI,OAAX,EAAoB;AAClB,WAAKu1B,kBAAL,CAAwB8C,gCAAxB;AACD,KAFD,MAEO;AACLA,MAAAA,gCAAgC;AACjC;AACF;;AAEDE,EAAAA,4BAA4B,CAC1BjsC,SAD0B,EAE1B2b,MAF0B,EAG1B5rB,KAH0B,EAI1B+kB,QAJ0B,EAKpB;AACN,UAAMguB,GAAG,GAAG,KAAKR,wBAAL,CAA8B3mB,MAA9B,CAAZ;;AACA,QAAImnB,GAAJ,EAAS;AACP9iC,MAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoB8yC,GAApB;;AAEA,UAAKnnB,MAAD,CAAc0oB,QAAlB,EAA4B;AAC1B,aAAKpoC,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4tC,QAAQ,CAACkB,yBAAlC;AACD;;AACD,UAAK3gB,MAAD,CAAc8jB,aAAlB,EAAiC;AAC/B,aAAKxjC,KAAL,CACE0f,MAAM,CAACnuB,KADT,EAEE4tC,QAAQ,CAACmB,8BAFX,EAGG5gB,MAAD,CAAc8jB,aAHhB;AAKD;;AACD,UAAK9jB,MAAD,CAAcjI,OAAlB,EAA2B;AACzB,aAAKzX,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4tC,QAAQ,CAACoB,wBAAlC;AACD;;AACD,UAAK7gB,MAAD,CAAcsuB,QAAlB,EAA4B;AAC1B,aAAKhuC,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4tC,QAAQ,CAACqB,yBAAlC;AACD;;AAED;AACD;;AAED,QAAI,CAAC,KAAK1sC,KAAL,CAAW+kC,eAAZ,IAAgCnZ,MAAD,CAAc0oB,QAAjD,EAA2D;AACzD,WAAKpoC,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4tC,QAAQ,CAAC2B,iCAAlC;AACD;;AAED,QAAKphB,MAAD,CAAcsuB,QAAlB,EAA4B;AAC1B,UAAI,CAACl6C,KAAK,CAACm8C,aAAX,EAA0B;AACxB,aAAKjwC,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4tC,QAAQ,CAAC8B,qBAAlC;AACD;AACF;;AAID,UAAM+O,4BAAN,CAAmCjsC,SAAnC,EAA8C2b,MAA9C,EAAsD5rB,KAAtD,EAA6D+kB,QAA7D;AACD;;AAEDq3B,EAAAA,4BAA4B,CAC1BC,YAD0B,EAEpB;AACN,UAAM9pC,QAAQ,GAAG,KAAKqN,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAjB;AACA,QAAI6Z,QAAJ,EAAc8pC,YAAY,CAAC9pC,QAAb,GAAwB,IAAxB;;AAEd,QAAK8pC,YAAD,CAAoB1J,QAApB,IAAgC,KAAK10C,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAApC,EAA2D;AACzD,WAAK+T,KAAL,CAAWmwC,YAAY,CAAC5+C,KAAxB,EAA+B4tC,QAAQ,CAACK,sBAAxC;AACD;;AAED,QAAK2Q,YAAD,CAAoB14B,OAApB,IAA+B,KAAK1lB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAnC,EAA0D;AACxD,WAAK+T,KAAL,CAAWmwC,YAAY,CAAC5+C,KAAxB,EAA+B4tC,QAAQ,CAACI,qBAAxC;AACD;AACF;;AAMD/iB,EAAAA,wBAAwB,CACtB3pB,IADsB,EAEtB4pB,IAFsB,EAGT;AACb,UAAMqC,IAAI,GACRrC,IAAI,CAAC3nB,IAAL,KAAc,YAAd,GACI,KAAKw4C,0BAAL,CAAgCz6C,IAAhC,EAAsC4pB,IAAtC,CADJ,GAEIzpB,SAHN;AAIA,WAAO8rB,IAAI,IAAI,MAAMtC,wBAAN,CAA+B3pB,IAA/B,EAAqC4pB,IAArC,CAAf;AACD;;AAIDC,EAAAA,4BAA4B,GAAY;AACtC,QAAI,KAAKmxB,oBAAL,EAAJ,EAAiC,OAAO,IAAP;AACjC,WAAO,MAAMnxB,4BAAN,EAAP;AACD;;AAGDG,EAAAA,gBAAgB,CACdJ,IADc,EAEd5W,QAFc,EAGdnG,QAHc,EAIdoG,mBAJc,EAKA;AAGd,QAAI,CAAC,KAAKhS,KAAL,CAAWgpB,sBAAZ,IAAsC,CAAC,KAAK/qB,KAAL,CAAW0V,OAAE,CAACjb,QAAd,CAA3C,EAAoE;AAClE,aAAO,MAAMqwB,gBAAN,CACLJ,IADK,EAEL5W,QAFK,EAGLnG,QAHK,EAILoG,mBAJK,CAAP;AAMD;;AAED,UAAMiX,MAAM,GAAG,KAAKC,QAAL,CAAc,MAC3B,MAAMH,gBAAN,CAAuBJ,IAAvB,EAA6B5W,QAA7B,EAAuCnG,QAAvC,CADa,CAAf;;AAIA,QAAI,CAACqd,MAAM,CAAClqB,IAAZ,EAAkB;AAChB,UAAIkqB,MAAM,CAACvc,KAAX,EAAkB;AAEhB,cAAMyc,0BAAN,CAAiCnX,mBAAjC,EAAsDiX,MAAM,CAACvc,KAA7D;AACD;;AAED,aAAOic,IAAP;AACD;;AACD,QAAIM,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAClB,WAAOH,MAAM,CAAClqB,IAAd;AACD;;AAID8rB,EAAAA,cAAc,CACZ9rB,IADY,EAEZgT,QAFY,EAGZnG,QAHY,EAIE;AACd7M,IAAAA,IAAI,GAAG,MAAM8rB,cAAN,CAAqB9rB,IAArB,EAA2BgT,QAA3B,EAAqCnG,QAArC,CAAP;;AACA,QAAI,KAAKgU,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzBqG,MAAAA,IAAI,CAACwT,QAAL,GAAgB,IAAhB;AAIA,WAAKuO,gBAAL,CAAsB/hB,IAAtB;AACD;;AAED,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAMuyB,YAAoC,GAAG,KAAKvc,WAAL,CAC3CwD,QAD2C,EAE3CnG,QAF2C,CAA7C;AAIAkf,MAAAA,YAAY,CAACtc,UAAb,GAA0BzP,IAA1B;AACA+rB,MAAAA,YAAY,CAACjK,cAAb,GAA8B,KAAKkwB,qBAAL,EAA9B;AAEA,aAAO,KAAK1/B,UAAL,CAAgByZ,YAAhB,EAA8B,sBAA9B,CAAP;AACD;;AAED,WAAO/rB,IAAP;AACD;;AAEDksB,EAAAA,sBAAsB,CAAClsB,IAAD,EAAiD;AAErE,UAAMgT,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AAGA,UAAM0wC,SAAS,GAAG,KAAKn7B,aAAL,CAAmB,SAAnB,CAAlB;;AAEA,QACEm7B,SAAS,KACR,KAAKh7B,YAAL,CAAkB,SAAlB,KAAgC,CAAC,KAAKsH,4BAAL,EADzB,CADX,EAGE;AACA,YAAM,KAAK1c,KAAL,CACJ,KAAKlM,KAAL,CAAWvC,KADP,EAEJ4tC,QAAQ,CAACe,iCAFL,CAAN;AAID;;AAED,QAAItuB,WAAJ;;AAEA,QAAI,KAAK7f,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AACvBknB,MAAAA,WAAW,GAAG,KAAKy7B,2BAAL,EAAd;AACD;;AACD,QAAI,CAACz7B,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,MAAMmN,sBAAN,CAA6BlsB,IAA7B,CAAd;AACD;;AACD,QACE+e,WAAW,KACVA,WAAW,CAAC9c,IAAZ,KAAqB,wBAArB,IACC8c,WAAW,CAAC9c,IAAZ,KAAqB,wBADtB,IAECs7C,SAHS,CADb,EAKE;AACAv9C,MAAAA,IAAI,CAACqjB,UAAL,GAAkB,MAAlB;AACD;;AAED,QAAItE,WAAW,IAAIw+B,SAAnB,EAA8B;AAE5B,WAAKC,kBAAL,CAAwBz+B,WAAxB,EAAqC/L,QAArC,EAA+CnG,QAA/C;AAEAkS,MAAAA,WAAW,CAAC6F,OAAZ,GAAsB,IAAtB;AACD;;AAED,WAAO7F,WAAP;AACD;;AAED0N,EAAAA,YAAY,CACVzsB,IADU,EAEV0sB,WAFU,EAGVC,UAHU,EAIJ;AACN,QAAI,CAAC,CAACD,WAAD,IAAgBC,UAAjB,KAAgC,KAAKpK,YAAL,CAAkB,YAAlB,CAApC,EAAqE;AACnE;AACD;;AAED,UAAMkK,YAAN,CACEzsB,IADF,EAEE0sB,WAFF,EAGEC,UAHF,EAIG3sB,IAAD,CAAY4kB,OAAZ,GAAsBnM,eAAtB,GAAwCP,UAJ1C;AAMA,UAAM3G,cAAc,GAAG,KAAKkhC,wBAAL,EAAvB;AACA,QAAIlhC,cAAJ,EAAoBvR,IAAI,CAACuR,cAAL,GAAsBA,cAAtB;AACrB;;AAEDksC,EAAAA,4BAA4B,CAC1Bz9C,IAD0B,EAEpB;AACN,QAAI,CAACA,IAAI,CAACwT,QAAN,IAAkB,KAAKqN,GAAL,CAASjM,OAAE,CAACna,IAAZ,CAAtB,EAAyC;AACvCuF,MAAAA,IAAI,CAAC09C,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMz7C,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;AACA,QAAIzxC,IAAJ,EAAUjC,IAAI,CAAC8hB,cAAL,GAAsB7f,IAAtB;AACX;;AAEDsQ,EAAAA,kBAAkB,CAACvS,IAAD,EAAyC;AACzD,SAAKy9C,4BAAL,CAAkCz9C,IAAlC;;AAEA,QAAI,KAAKiB,KAAL,CAAW8kC,gBAAX,IAA+B,KAAK7mC,KAAL,CAAW0V,OAAE,CAACva,EAAd,CAAnC,EAAsD;AACpD,WAAK8S,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4tC,QAAQ,CAACQ,+BAAtC;AACD;;AAED,WAAO,MAAMv6B,kBAAN,CAAyBvS,IAAzB,CAAP;AACD;;AAEDyS,EAAAA,yBAAyB,CACvBzS,IADuB,EAEC;AAExB,QAAIA,IAAI,CAACu1C,QAAT,EAAmB;AACjB,WAAKpoC,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4tC,QAAQ,CAACgC,yBAAhC;AACD;;AAGD,QAAItuC,IAAI,CAAC2wC,aAAT,EAAwB;AACtB,WAAKxjC,KAAL,CACEnN,IAAI,CAACtB,KADP,EAEE4tC,QAAQ,CAACiC,8BAFX,EAGEvuC,IAAI,CAAC2wC,aAHP;AAKD;;AAED,SAAK8M,4BAAL,CAAkCz9C,IAAlC;AACA,WAAO,MAAMyS,yBAAN,CAAgCzS,IAAhC,CAAP;AACD;;AAEDiR,EAAAA,eAAe,CACbC,SADa,EAEbd,MAFa,EAGbe,WAHa,EAIbnB,OAJa,EAKboB,aALa,EAMbC,iBANa,EAOP;AACN,UAAME,cAAc,GAAG,KAAKkhC,wBAAL,EAAvB;;AACA,QAAIlhC,cAAc,IAAIH,aAAtB,EAAqC;AACnC,WAAKjE,KAAL,CAAWoE,cAAc,CAAC7S,KAA1B,EAAiC4tC,QAAQ,CAACM,4BAA1C;AACD;;AAGD,QAAIx8B,MAAM,CAACwU,OAAP,KAAmBxU,MAAM,CAACgC,IAAP,KAAgB,KAAhB,IAAyBhC,MAAM,CAACgC,IAAP,KAAgB,KAA5D,CAAJ,EAAwE;AACtE,WAAKjF,KAAL,CAAWiD,MAAM,CAAC1R,KAAlB,EAAyB4tC,QAAQ,CAACO,eAAlC,EAAmDz8B,MAAM,CAACgC,IAA1D;AACD;;AACD,QAAIb,cAAJ,EAAoBnB,MAAM,CAACmB,cAAP,GAAwBA,cAAxB;AACpB,UAAMN,eAAN,CACEC,SADF,EAEEd,MAFF,EAGEe,WAHF,EAIEnB,OAJF,EAKEoB,aALF,EAMEC,iBANF;AAQD;;AAEDid,EAAAA,sBAAsB,CACpBpd,SADoB,EAEpBd,MAFoB,EAGpBe,WAHoB,EAIpBnB,OAJoB,EAKd;AACN,UAAMuB,cAAc,GAAG,KAAKkhC,wBAAL,EAAvB;AACA,QAAIlhC,cAAJ,EAAoBnB,MAAM,CAACmB,cAAP,GAAwBA,cAAxB;AACpB,UAAM+c,sBAAN,CAA6Bpd,SAA7B,EAAwCd,MAAxC,EAAgDe,WAAhD,EAA6DnB,OAA7D;AACD;;AAEDue,EAAAA,eAAe,CAACvuB,IAAD,EAAsB;AACnC,UAAMuuB,eAAN,CAAsBvuB,IAAtB;;AACA,QAAIA,IAAI,CAACkO,UAAL,IAAmB,KAAKqT,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CvhB,MAAAA,IAAI,CAACwuB,mBAAL,GAA2B,KAAKijB,oBAAL,EAA3B;AACD;;AACD,QAAI,KAAKrvB,aAAL,CAAmB,YAAnB,CAAJ,EAAsC;AACpCpiB,MAAAA,IAAI,CAAC4jB,UAAL,GAAkB,KAAKq0B,qBAAL,CAA2B,YAA3B,CAAlB;AACD;AACF;;AAEDppB,EAAAA,iBAAiB,CAAClc,IAAD,EAAuB,GAAGjC,IAA1B,EAAsC;AACrD,UAAMa,cAAc,GAAG,KAAKkhC,wBAAL,EAAvB;AACA,QAAIlhC,cAAJ,EAAoBoB,IAAI,CAACpB,cAAL,GAAsBA,cAAtB;AAEpB,UAAMsd,iBAAN,CAAwBlc,IAAxB,EAA8B,GAAGjC,IAAjC;AACD;;AAED0f,EAAAA,mBAAmB,CAACpwB,IAAD,EAAmBqwB,cAAnB,EAAmD;AACpE,UAAM9e,cAAc,GAAG,KAAKkhC,wBAAL,EAAvB;AACA,QAAIlhC,cAAJ,EAAoBvR,IAAI,CAACuR,cAAL,GAAsBA,cAAtB;AACpB,UAAM6e,mBAAN,CAA0BpwB,IAA1B,EAAgCqwB,cAAhC;AACD;;AAGDC,EAAAA,UAAU,CACRrE,IADQ,EAER7Z,IAFQ,EAGF;AACN,UAAMke,UAAN,CAAiBrE,IAAjB,EAAuB7Z,IAAvB;;AACA,QAAI6Z,IAAI,CAACta,EAAL,CAAQ1P,IAAR,KAAiB,YAAjB,IAAiC,KAAK4e,GAAL,CAASjM,OAAE,CAACna,IAAZ,CAArC,EAAwD;AACtDwxB,MAAAA,IAAI,CAACyxB,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMz7C,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;;AACA,QAAIzxC,IAAJ,EAAU;AACRgqB,MAAAA,IAAI,CAACta,EAAL,CAAQmQ,cAAR,GAAyB7f,IAAzB;AACA,WAAK8f,gBAAL,CAAsBkK,IAAI,CAACta,EAA3B;AACD;AACF;;AAGD4e,EAAAA,iCAAiC,CAC/BvwB,IAD+B,EAE/BwwB,IAF+B,EAGJ;AAC3B,QAAI,KAAKtxB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxBwG,MAAAA,IAAI,CAAC6hB,UAAL,GAAkB,KAAKmwB,qBAAL,EAAlB;AACD;;AACD,WAAO,MAAMzhB,iCAAN,CAAwCvwB,IAAxC,EAA8CwwB,IAA9C,CAAP;AACD;;AAEDxF,EAAAA,gBAAgB,CAAC,GAAGta,IAAJ,EAAwB;AAAA;;AAGtC,QAAIzP,KAAJ;AACA,QAAI0vB,GAAJ;AACA,QAAIgtB,QAAJ;;AAEA,QACE,KAAKl+C,SAAL,CAAe,KAAf,MACC,KAAKP,KAAL,CAAW0V,OAAE,CAACyQ,WAAd,KAA8B,KAAK9D,YAAL,CAAkB,GAAlB,CAD/B,CADF,EAGE;AAEAtgB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWqpB,KAAX,EAAR;AAEAqG,MAAAA,GAAG,GAAG,KAAKxG,QAAL,CAAc,MAAM,MAAMa,gBAAN,CAAuB,GAAGta,IAA1B,CAApB,EAAqDzP,KAArD,CAAN;AAIA,UAAI,CAAC0vB,GAAG,CAAChjB,KAAT,EAAgB,OAAOgjB,GAAG,CAAC3wB,IAAX;AAKhB,YAAM;AAAE6U,QAAAA;AAAF,UAAc,KAAK5T,KAAzB;;AACA,UAAI4T,OAAO,CAACA,OAAO,CAACjU,MAAR,GAAiB,CAAlB,CAAP,KAAgC4lC,KAAE,CAAC1V,MAAvC,EAA+C;AAC7Cjc,QAAAA,OAAO,CAACjU,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIiU,OAAO,CAACA,OAAO,CAACjU,MAAR,GAAiB,CAAlB,CAAP,KAAgC4lC,KAAE,CAACzV,MAAvC,EAA+C;AACpDlc,QAAAA,OAAO,CAACjU,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,UAAC+vB,GAAD,aAAC,KAAKhjB,KAAN,KAAe,CAAC,KAAK4T,YAAL,CAAkB,GAAlB,CAApB,EAA4C;AAC1C,aAAO,MAAMyJ,gBAAN,CAAuB,GAAGta,IAA1B,CAAP;AACD;;AAID,QAAIa,cAAJ;AACAtQ,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWqpB,KAAX,EAAjB;AAEA,UAAMzwB,KAAK,GAAG,KAAKswB,QAAL,CAAc6G,KAAK,IAAI;AAAA;;AAEnCzf,MAAAA,cAAc,GAAG,KAAKmhC,qBAAL,EAAjB;AACA,YAAM9oB,IAAI,GAAG,MAAMoB,gBAAN,CAAuB,GAAGta,IAA1B,CAAb;;AAEA,UACEkZ,IAAI,CAAC3nB,IAAL,KAAc,yBAAd,mBACA2nB,IAAI,CAACla,KADL,aACA,YAAYY,aAFd,EAGE;AACA0gB,QAAAA,KAAK;AACN;;AAGD,UAAI,oBAAAzf,cAAc,SAAd,4BAAgBnP,MAAhB,CAAuBxB,MAAvB,MAAkC,CAAtC,EAAyC;AACvC,aAAKswB,0BAAL,CAAgCtH,IAAhC,EAAsCrY,cAAtC;AACD;;AACDqY,MAAAA,IAAI,CAACrY,cAAL,GAAsBA,cAAtB;AACA,aAAOqY,IAAP;AACD,KAlBa,EAkBX3oB,KAlBW,CAAd;AAqBA,QAAI,CAACpH,KAAK,CAAC8T,KAAP,IAAgB,CAAC9T,KAAK,CAACu3B,OAA3B,EAAoC,OAAOv3B,KAAK,CAACmG,IAAb;;AAEpC,QAAI,CAAC2wB,GAAL,EAAU;AAIR0b,MAAAA,MAAM,CAAC,CAAC,KAAK5sC,SAAL,CAAe,KAAf,CAAF,CAAN;AAIAk+C,MAAAA,QAAQ,GAAG,KAAKxzB,QAAL,CAAc,MAAM,MAAMa,gBAAN,CAAuB,GAAGta,IAA1B,CAApB,EAAqDzP,KAArD,CAAX;AAGA,UAAI,CAAC08C,QAAQ,CAAChwC,KAAd,EAAqB,OAAOgwC,QAAQ,CAAC39C,IAAhB;AACtB;;AAED,iBAAI2wB,GAAJ,aAAI,MAAK3wB,IAAT,EAAe;AAEb,WAAKiB,KAAL,GAAa0vB,GAAG,CAACtG,SAAjB;AACA,aAAOsG,GAAG,CAAC3wB,IAAX;AACD;;AAED,QAAInG,KAAK,CAACmG,IAAV,EAAgB;AAEd,WAAKiB,KAAL,GAAapH,KAAK,CAACwwB,SAAnB;AACA,aAAOxwB,KAAK,CAACmG,IAAb;AACD;;AAED,qBAAI29C,QAAJ,aAAI,UAAU39C,IAAd,EAAoB;AAElB,WAAKiB,KAAL,GAAa08C,QAAQ,CAACtzB,SAAtB;AACA,aAAOszB,QAAQ,CAAC39C,IAAhB;AACD;;AAED,iBAAI2wB,GAAJ,aAAI,MAAKW,MAAT,EAAiB,MAAMX,GAAG,CAAChjB,KAAV;AACjB,QAAI9T,KAAK,CAACy3B,MAAV,EAAkB,MAAMz3B,KAAK,CAAC8T,KAAZ;AAClB,sBAAIgwC,QAAJ,aAAI,WAAUrsB,MAAd,EAAsB,MAAMqsB,QAAQ,CAAChwC,KAAf;AAEtB,UAAM,UAAAgjB,GAAG,SAAH,kBAAKhjB,KAAL,KAAc9T,KAAK,CAAC8T,KAApB,mBAA6BgwC,QAA7B,qBAA6B,WAAUhwC,KAAvC,CAAN;AACD;;AAGDqoC,EAAAA,eAAe,CAAC/iC,mBAAD,EAAwD;AACrE,QAAI,CAAC,KAAKxT,SAAL,CAAe,KAAf,CAAD,IAA0B,KAAK8hB,YAAL,CAAkB,GAAlB,CAA9B,EAAsD;AACpD,aAAO,KAAKw2B,oBAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAM/B,eAAN,CAAsB/iC,mBAAtB,CAAP;AACD;AACF;;AAEDse,EAAAA,UAAU,CAACvxB,IAAD,EAA8D;AACtE,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AAIxB,YAAM0wB,MAAM,GAAG,KAAKC,QAAL,CAAc6G,KAAK,IAAI;AACpC,cAAMnP,UAAU,GAAG,KAAKqxB,oCAAL,CACjBt+B,OAAE,CAACpb,KADc,CAAnB;AAGA,YAAI,KAAKkvB,kBAAL,MAA6B,CAAC,KAAKxpB,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,CAAlC,EAAwDm3B,KAAK;AAC7D,eAAOnP,UAAP;AACD,OANc,CAAf;AAQA,UAAIqI,MAAM,CAACkH,OAAX,EAAoB;;AAEpB,UAAI,CAAClH,MAAM,CAACoH,MAAZ,EAAoB;AAClB,YAAIpH,MAAM,CAACvc,KAAX,EAAkB,KAAK1M,KAAL,GAAaipB,MAAM,CAACG,SAApB;AAClBrqB,QAAAA,IAAI,CAAC6hB,UAAL,GAAkBqI,MAAM,CAAClqB,IAAzB;AACD;AACF;;AAED,WAAO,MAAMuxB,UAAN,CAAiBvxB,IAAjB,CAAP;AACD;;AAGD8uB,EAAAA,4BAA4B,CAAC9F,KAAD,EAAmB;AAC7C,QAAI,KAAKnI,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzB,UACEqvB,KAAK,CAAC/mB,IAAN,KAAe,YAAf,IACA,CAAC,KAAKhB,KAAL,CAAW8kC,gBADZ,IAEA,CAAC,KAAK9kC,KAAL,CAAWsf,MAHd,EAIE;AACA,aAAKpT,KAAL,CAAW6b,KAAK,CAACtqB,KAAjB,EAAwB4tC,QAAQ,CAAC+B,iBAAjC;AACD;;AAECrlB,MAAAA,KAAF,CAA6BxV,QAA7B,GAAwC,IAAxC;AACD;;AACD,UAAMvR,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;AACA,QAAIzxC,IAAJ,EAAU+mB,KAAK,CAAClH,cAAN,GAAuB7f,IAAvB;AACV,SAAK8f,gBAAL,CAAsBiH,KAAtB;AAEA,WAAOA,KAAP;AACD;;AAED9V,EAAAA,YAAY,CAAClT,IAAD,EAAemT,KAAc,GAAG,KAAhC,EAA+C;AACzD,YAAQnT,IAAI,CAACiC,IAAb;AACE,WAAK,sBAAL;AACE,eAAO,MAAMiR,YAAN,CAAmB,KAAKkW,mBAAL,CAAyBppB,IAAzB,CAAnB,EAAmDmT,KAAnD,CAAP;;AACF,WAAK,qBAAL;AACE,eAAO,MAAMD,YAAN,CAAmBlT,IAAnB,EAAyBmT,KAAzB,CAAP;;AACF,WAAK,yBAAL;AACE,eAAO,KAAKyqC,mCAAL,CAAyC59C,IAAzC,EAA+CmT,KAA/C,CAAP;;AACF,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACEnT,QAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKyD,YAAL,CAAkBlT,IAAI,CAACyP,UAAvB,EAAmC0D,KAAnC,CAAlB;AACA,eAAOnT,IAAP;;AACF;AACE,eAAO,MAAMkT,YAAN,CAAmBlT,IAAnB,EAAyBmT,KAAzB,CAAP;AAbJ;AAeD;;AAEDyqC,EAAAA,mCAAmC,CAAC59C,IAAD,EAAemT,KAAf,EAA+B;AAChE,YAAQnT,IAAI,CAACyP,UAAL,CAAgBxN,IAAxB;AACE,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACA,WAAK,yBAAL;AACEjC,QAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKyD,YAAL,CAAkBlT,IAAI,CAACyP,UAAvB,EAAmC0D,KAAnC,CAAlB;AACA,eAAOnT,IAAP;;AACF;AACE,eAAO,MAAMkT,YAAN,CAAmBlT,IAAnB,EAAyBmT,KAAzB,CAAP;AARJ;AAUD;;AAED8a,EAAAA,SAAS,CACPrE,IADO,EAEPwF,kBAFO,EAGP,GAAG1e,IAHI,EAMD;AAAA;;AACN,YAAQkZ,IAAI,CAAC3nB,IAAb;AACE,WAAK,sBAAL;AAIE;;AACF,WAAK,qBAAL;AACE,aAAKgsB,SAAL,CAAerE,IAAI,CAAC0xB,SAApB,EAA+B,oBAA/B,EAAqD,GAAG5qC,IAAxD;AACA;;AACF,WAAK,gBAAL;AACA,WAAK,iBAAL;AACE,YACkB,CAACA,IAAI,CAAC,CAAD,CAAL,IAChB0e,kBAAkB,KAAK,0BADP,IAEhB,kBAACxF,IAAI,CAACla,KAAN,aAAC,aAAYY,aAAb,CAHF,EAIE;AACA,eAAKnD,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4U,aAAM,CAAClN,UAA9B,EAA0CgpB,kBAA1C;AACA;AACD;;AACD,aAAKnB,SAAL,CAAerE,IAAI,CAACna,UAApB,EAAgC,0BAAhC,EAA4D,GAAGiB,IAA/D;AACA;;AACF,WAAK,qBAAL;AACE,aAAKud,SAAL,CAAerE,IAAI,CAACna,UAApB,EAAgC2f,kBAAhC,EAAoD,GAAG1e,IAAvD;AACA;;AACF;AACE,cAAMud,SAAN,CAAgBrE,IAAhB,EAAsBwF,kBAAtB,EAA0C,GAAG1e,IAA7C;AACA;AA1BJ;AA4BD;;AAEDyf,EAAAA,gBAAgB,GAAc;AAC5B,YAAQ,KAAKlvB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC7X,KAAR;AAEE,eAAO,KAAKqkB,eAAL,CAAmC,IAAnC,CAAP;;AACF;AACE,eAAO,MAAM+O,gBAAN,EAAP;AALJ;AAOD;;AAED0tB,EAAAA,4BAA4B,CAACj0B,IAAD,EAAmC;AAC7D,QAAI,KAAKrI,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM4Q,aAAa,GAAG,KAAKsf,oBAAL,EAAtB;;AAEA,UAAI,KAAKvyC,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAJ,EAA2B;AACzB,cAAMo3B,IAAI,GAAG,MAAMqtB,4BAAN,CAAmCj0B,IAAnC,CAAb;AACA4G,QAAAA,IAAI,CAACjf,cAAL,GAAsB4gB,aAAtB;AACA,eAAO3B,IAAP;AACD;;AAED,WAAK5N,UAAL,CAAgB,KAAK3hB,KAAL,CAAWvC,KAA3B,EAAkCkW,OAAE,CAACxb,MAArC;AACD;;AAED,WAAO,MAAMykD,4BAAN,CAAmCj0B,IAAnC,CAAP;AACD;;AAEDk0B,EAAAA,mBAAmB,CAAChwB,KAAD,EAAQ;AACzB,QACE,KAAK7sB,KAAL,CAAW8kC,gBAAX,IACA,KAAK7mC,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CADA,IAEA,KAAKy8C,iBAAL,OAA6BjoB,KAH/B,EAIE;AACA,WAAKrX,IAAL;AACD,KAND,MAMO;AACL,YAAMqnC,mBAAN,CAA0BhwB,KAA1B;AACD;AACF;;AAODI,EAAAA,aAAa,GAAY;AACvB,WAAO,KAAK3M,YAAL,CAAkB,GAAlB,KAA0B,MAAM2M,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAY;AACzB,WACE,KAAKjvB,KAAL,CAAW0V,OAAE,CAACna,IAAd,KAAuB,KAAKyE,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAvB,IAA+C,MAAM20B,eAAN,EADjD;AAGD;;AAEDY,EAAAA,iBAAiB,CAAC,GAAGre,IAAJ,EAAqB;AACpC,UAAM1Q,IAAI,GAAG,MAAM+uB,iBAAN,CAAwB,GAAGre,IAA3B,CAAb;;AAEA,QACE1Q,IAAI,CAACiC,IAAL,KAAc,mBAAd,IACAjC,IAAI,CAAC8hB,cADL,IAEA9hB,IAAI,CAAC2kB,KAAL,CAAWjmB,KAAX,GAAmBsB,IAAI,CAAC8hB,cAAL,CAAoBpjB,KAHzC,EAIE;AACA,WAAKyO,KAAL,CACEnN,IAAI,CAAC8hB,cAAL,CAAoBpjB,KADtB,EAEE4tC,QAAQ,CAACuC,yBAFX;AAID;;AAED,WAAO7uC,IAAP;AACD;;AAGDmtB,EAAAA,gBAAgB,CAACjvB,IAAD,EAAqB;AACnC,QACE,KAAK+C,KAAL,CAAWsf,MAAX,KACCriB,IAAI,OAAJ,IAAkCA,IAAI,OADvC,CADF,EAGE;AACA,aAAO,KAAKkvB,QAAL,CAAcxY,OAAE,CAACzZ,UAAjB,EAA6B,CAA7B,CAAP;AACD,KALD,MAKO;AACL,aAAO,MAAMgyB,gBAAN,CAAuBjvB,IAAvB,CAAP;AACD;AACF;;AAGDk+C,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKl9C,KAAL,CAAW0V,OAAE,CAACzZ,UAAd,CAAJ,EAA+B;AAC7B,YAAM+C,IAAI,GAAG,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAWvC,KAAjC,CAAb;;AACA,UAAIR,IAAI,OAAJ,IAA+BA,IAAI,OAAvC,EAAmE;AACjE,aAAK+C,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,aAAKmxC,eAAL,CAAqB7/C,IAArB;AACD;AACF;AACF;;AAEDutB,EAAAA,gBAAgB,CAACgC,QAAD,EAAsD;AACpE,SAAK,IAAI9sB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8sB,QAAQ,CAAC7sB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAMipB,IAAI,GAAG6D,QAAQ,CAAC9sB,CAAD,CAArB;AACA,UAAI,CAACipB,IAAL,EAAW;;AACX,cAAQA,IAAI,CAAC3nB,IAAb;AACE,aAAK,sBAAL;AACEwrB,UAAAA,QAAQ,CAAC9sB,CAAD,CAAR,GAAc,KAAKyoB,mBAAL,CAAyBQ,IAAzB,CAAd;AACA;;AACF,aAAK,gBAAL;AACA,aAAK,iBAAL;AACE,cAAI,CAAC,KAAK3oB,KAAL,CAAWgpB,sBAAhB,EAAwC;AACtCwD,YAAAA,QAAQ,CAAC9sB,CAAD,CAAR,GAAc,KAAKyoB,mBAAL,CAAyBQ,IAAzB,CAAd;AACD,WAFD,MAEO;AACL,iBAAKzc,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4tC,QAAQ,CAAC4C,6BAAhC;AACD;;AACD;AAXJ;AAaD;;AACD,WAAO,MAAMzjB,gBAAN,CAAuB,GAAGtpB,SAA1B,CAAP;AACD;;AAEDinB,EAAAA,mBAAmB,CAACppB,IAAD,EAAuC;AACxDA,IAAAA,IAAI,CAACyP,UAAL,CAAgBqS,cAAhB,GAAiC9hB,IAAI,CAAC8hB,cAAtC;AAEA,SAAKC,gBAAL,CACE/hB,IAAI,CAACyP,UADP,EAEEzP,IAAI,CAAC8hB,cAAL,CAAoBnjB,GAFtB,EAGEqB,IAAI,CAAC8hB,cAAL,CAAoB9gB,GAApB,CAAwBrC,GAH1B;AAMA,WAAOqB,IAAI,CAACyP,UAAZ;AACD;;AAED+hB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKtyB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KAAwB,MAAMg4B,gBAAN,EAA/B;AACD;;AAEDf,EAAAA,qBAAqB,GAAY;AAC/B,WAAO,KAAKvxB,KAAL,CAAW0V,OAAE,CAACpb,KAAd,KAAwB,MAAMi3B,qBAAN,EAA/B;AACD;;AAEDutB,EAAAA,uBAAuB,GAAG;AAExB,WAAO,MAAMA,uBAAN,MAAmC,KAAKvB,eAAL,EAA1C;AACD;;AAEDzS,EAAAA,+BAA+B,CAC7BhqC,IAD6B,EAER;AACrB,QAAI,KAAKuhB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM4Q,aAAa,GAAG,KAAK4nB,kBAAL,CAAwB,MAC5C,KAAKtI,oBAAL,EADoB,CAAtB;AAGA,UAAItf,aAAJ,EAAmBnyB,IAAI,CAACuR,cAAL,GAAsB4gB,aAAtB;AACpB;;AACD,WAAO,MAAM6X,+BAAN,CAAsChqC,IAAtC,CAAP;AACD;;AAEDi+C,EAAAA,iCAAiC,CAC/B7tC,MAD+B,EAEvB;AACR,UAAM8tC,SAAS,GAAG,MAAMD,iCAAN,CAAwC7tC,MAAxC,CAAlB;AACA,UAAMhO,MAAM,GAAG,KAAK+N,4BAAL,CAAkCC,MAAlC,CAAf;AACA,UAAM+tC,UAAU,GAAG/7C,MAAM,CAAC,CAAD,CAAzB;AACA,UAAMg8C,eAAe,GAAGD,UAAU,IAAI,KAAK9vB,WAAL,CAAiB8vB,UAAjB,CAAtC;AAEA,WAAOC,eAAe,GAAGF,SAAS,GAAG,CAAf,GAAmBA,SAAzC;AACD;;AAEDG,EAAAA,qBAAqB,GAAc;AACjC,UAAMr1B,KAAK,GAAG,MAAMq1B,qBAAN,EAAd;AACA,UAAMp8C,IAAI,GAAG,KAAKyxC,wBAAL,EAAb;;AAEA,QAAIzxC,IAAJ,EAAU;AACR+mB,MAAAA,KAAK,CAAClH,cAAN,GAAuB7f,IAAvB;AACA,WAAK8f,gBAAL,CAAsBiH,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDmxB,EAAAA,kBAAkB,CAAI1B,EAAJ,EAAoB;AACpC,UAAM6F,mBAAmB,GAAG,KAAKr9C,KAAL,CAAW8kC,gBAAvC;AACA,SAAK9kC,KAAL,CAAW8kC,gBAAX,GAA8B,IAA9B;;AACA,QAAI;AACF,aAAO0S,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKx3C,KAAL,CAAW8kC,gBAAX,GAA8BuY,mBAA9B;AACD;AACF;;AAEDjE,EAAAA,UAAU,CAAar6C,IAAb,EAAsB,GAAG0Q,IAAzB,EAAyC;AACjD,UAAM6tC,kBAAkB,GAAG,KAAKt9C,KAAL,CAAW+kC,eAAtC;AACA,SAAK/kC,KAAL,CAAW+kC,eAAX,GAA6B,CAAC,CAAEhmC,IAAD,CAAYu1C,QAA3C;;AACA,QAAI;AACF,aAAO,MAAM8E,UAAN,CAAiBr6C,IAAjB,EAAuB,GAAG0Q,IAA1B,CAAP;AACD,KAFD,SAEU;AACR,WAAKzP,KAAL,CAAW+kC,eAAX,GAA6BuY,kBAA7B;AACD;AACF;;AAED3D,EAAAA,0BAA0B,CACxB56C,IADwB,EAE0C;AAClE,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAAJ,EAA2B;AACzB+C,MAAAA,IAAI,CAACu1C,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAK8E,UAAL,CACJr6C,IADI,EAEa,IAFb,EAGY,KAHZ,CAAP;AAKD,KAPD,MAOO,IAAI,KAAKuiB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAMzC,UAAI,CAAC,KAAKs4B,qBAAL,EAAL,EAAmC;AACjC76C,QAAAA,IAAI,CAACu1C,QAAL,GAAgB,IAAhB;AACA,aAAKpoC,KAAL,CACEnN,IAAI,CAACtB,KADP,EAEE4tC,QAAQ,CAAC4B,wCAFX;AAIA,aAAKz3B,IAAL;AACA,eAAO,KAAK6hC,2BAAL,CACJt4C,IADI,CAAP;AAGD;AACF,KAjBM,MAiBA;AACL,WAAK4iB,UAAL,CAAgB,IAAhB,EAAsBhO,OAAE,CAAC3X,MAAzB;AACD;AACF;;AAEDqU,EAAAA,WAAW,CAAC,GAAGZ,IAAJ,EAAiB;AAC1B,UAAMN,MAAM,GAAG,MAAMkB,WAAN,CAAkB,GAAGZ,IAArB,CAAf;;AACA,QAAIN,MAAM,CAACmlC,QAAX,EAAqB;AACnB,YAAMiJ,OAAO,GAAG,KAAK/+C,SAAL,CAAe,QAAf,IACZ,CAAC,CAAC2Q,MAAM,CAAC1B,KAAP,CAAaqC,IADH,GAEZ,CAAC,CAACX,MAAM,CAACW,IAFb;;AAGA,UAAIytC,OAAJ,EAAa;AACX,cAAM;AAAEnrC,UAAAA;AAAF,YAAUjD,MAAhB;AACA,aAAKjD,KAAL,CACEiD,MAAM,CAAC1R,KADT,EAEE4tC,QAAQ,CAACC,+BAFX,EAGEl5B,GAAG,CAACpR,IAAJ,KAAa,YAAb,GACIoR,GAAG,CAACxb,IADR,GAEK,IAAG,KAAKkH,KAAL,CAAW+Q,KAAX,CAAiBuD,GAAG,CAAC3U,KAArB,EAA4B2U,GAAG,CAAC1U,GAAhC,CAAqC,GAL/C;AAOD;AACF;;AACD,WAAOyR,MAAP;AACD;;AAEDkiC,EAAAA,wBAAwB,GAA0B;AAChD,UAAMV,QAAsB,GAAG,KAAKxwB,eAAL,EAA/B;AACA,WAAiDwwB,QAAQ,CAAC/5C,IAA1D;AACD;;AAED4mD,EAAAA,2BAA2B,GAAY;AACrC,WAAO,CAAC,CAAC,KAAK7+C,eAAL,CAAqB,YAArB,EAAmC,KAAnC,CAAT;AACD;;AAEDgsB,EAAAA,KAAK,GAAG;AACN,QAAI,KAAK6yB,2BAAL,EAAJ,EAAwC;AACtC,WAAKx9C,KAAL,CAAW8kC,gBAAX,GAA8B,IAA9B;AACD;;AACD,WAAO,MAAMna,KAAN,EAAP;AACD;;AAED8yB,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKD,2BAAL,EAAJ,EAAwC;AACtC,WAAKx9C,KAAL,CAAW8kC,gBAAX,GAA8B,IAA9B;AACD;;AACD,WAAO,MAAM2Y,aAAN,EAAP;AACD;;AA38FsB,CAD3B;;ACzLA9pC,OAAE,CAAC+pC,WAAH,GAAiB,IAAIznD,SAAJ,CAAc,IAAd,EAAoB;AAAEL,EAAAA,UAAU,EAAE;AAAd,CAApB,CAAjB;AAyCA,MAAM+nD,iBAAiB,GAAG97C,kBAAkB,CAC1C;AACE+7C,EAAAA,mBAAmB,EAAE;AADvB,CAD0C,EAI/Br8C,UAAU,CAACG,WAJoB,CAA5C;AAOA,oBAAgBuL,UAAD,IACb,cAAcA,UAAd,CAAyB;AACvB4wC,EAAAA,gBAAgB,CACdC,YADc,EAE8B;AAC5C,QAAI,KAAK7/C,KAAL,CAAW0V,OAAE,CAAC+pC,WAAd,CAAJ,EAAgC;AAC9B,YAAM3+C,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAKsE,IAAL;AACA,WAAKuoC,aAAL,CAAmB,kCAAnB;AAIAh/C,MAAAA,IAAI,CAACnI,IAAL,GAAY,MAAMupB,eAAN,CAAoC,IAApC,CAAZ;AAEA,WAAK49B,aAAL,CAAmB,kCAAnB;AACA,WAAKx+B,MAAL,CAAY5L,OAAE,CAAC+pC,WAAf;AACA,aAAO,KAAKM,iBAAL,CAAuBj/C,IAAvB,EAA6B++C,YAA7B,CAAP;AACD;AACF;;AAEDE,EAAAA,iBAAiB,CACfj/C,IADe,EAEf++C,YAFe,EAG2B;AAC1C,UAAMG,UAAU,GAAG,CAAC,EAAEl/C,IAAI,CAAC++C,YAAL,IAAqB/+C,IAAI,CAACiC,IAAL,KAAc,aAArC,CAApB;AACAjC,IAAAA,IAAI,CAAC++C,YAAL,GAAoBA,YAApB;AAEA,WAAOG,UAAU,GAAGl/C,IAAH,GAAU,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAA3B;AACD;;AAMDmtB,EAAAA,gBAAgB,CAACjvB,IAAD,EAAe;AAC7B,QACEA,IAAI,OAAJ,IACA,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QAFF,EAGE;AACA,aAAO,KAAKwgB,QAAL,CAAcxY,OAAE,CAAC+pC,WAAjB,EAA8B,CAA9B,CAAP;AACD;;AAED,WAAO,MAAMxxB,gBAAN,CAAuB,GAAGhrB,SAA1B,CAAP;AACD;;AAMD2gB,EAAAA,aAAa,GAAmC;AAC9C,WACE,KAAKg8B,gBAAL,CAAsB,YAAtB,KAAuC,MAAMh8B,aAAN,CAAoB,GAAG3gB,SAAvB,CADzC;AAGD;;AAEDif,EAAAA,eAAe,GAAmC;AAKhD,WACE,KAAK09B,gBAAL,CAAsB,YAAtB,KACA,MAAM19B,eAAN,CAAsB,GAAGjf,SAAzB,CAFF;AAID;;AAED+tB,EAAAA,iBAAiB,CAACja,IAAD,EAAqB;AAIpC,QAAIA,IAAI,KAAK9V,SAAb,EAAwB,MAAM+vB,iBAAN,CAAwB,GAAG/tB,SAA3B;AACzB;;AAMDguB,EAAAA,gBAAgB,GAAgC;AAC9C,WACE,KAAK2uB,gBAAL,CAAsB,SAAtB,KAAoC,MAAM3uB,gBAAN,CAAuB,GAAGhuB,SAA1B,CADtC;AAGD;;AAED8rB,EAAAA,SAAS,CAACrE,IAAD,EAA2B;AAClC,QAAIA,IAAI,CAAC3nB,IAAL,KAAc,aAAlB,EAAiC,MAAMgsB,SAAN,CAAgB,GAAG9rB,SAAnB;AAClC;;AAED+Q,EAAAA,YAAY,CAAClT,IAAD,EAAuB;AACjC,QACEA,IAAI,IACJA,IAAI,CAACiC,IAAL,KAAc,aADd,IAEAjC,IAAI,CAAC++C,YAAL,KAAsB,YAHxB,EAIE;AACA/+C,MAAAA,IAAI,CAAC++C,YAAL,GAAoB,SAApB;AACA,aAAO/+C,IAAP;AACD;;AACD,WAAO,MAAMkT,YAAN,CAAmB,GAAG/Q,SAAtB,CAAP;AACD;;AAMDghB,EAAAA,KAAK,CAACtO,OAAD,EAA4B;AAC/B,QAAI,MAAMsO,KAAN,CAAYtO,OAAZ,CAAJ,EAA0B;AACxB,aAAO,IAAP;AACD;;AAID,QAAI,CAAC,KAAK0N,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AACD,QAAI1N,OAAJ,EAAa,OAAO,KAAP;AAIb,UAAM4d,SAAS,GAAG,KAAKvM,SAAL,EAAlB;;AACA,QAAIuM,SAAS,CAACxwB,IAAV,KAAmB2S,OAAE,CAAC+pC,WAA1B,EAAuC;AACrC,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDQ,EAAAA,mBAAmB,CAACn/C,IAAD,EAA+C;AAChE,QAAIA,IAAI,CAAC5I,KAAL,IAAc4I,IAAI,CAAC5I,KAAL,CAAW6K,IAAX,KAAoB,aAAtC,EAAqD;AACrD,UAAMk9C,mBAAN,CAA0B,GAAGh9C,SAA7B;AACD;;AAEDwnB,EAAAA,wBAAwB,CACtB3pB,IADsB,EAEtB4pB,IAFsB,EAGS;AAC/B,QACEA,IAAI,CAAC3nB,IAAL,KAAc,aAAd,IACC2nB,IAAI,CAACla,KAAL,IAAcka,IAAI,CAACla,KAAL,CAAWY,aAF5B,EAGE;AACA,aAAO,MAAMqZ,wBAAN,CAA+B,GAAGxnB,SAAlC,CAAP;AACD;;AAED,QAAI,KAAKjD,KAAL,CAAW0V,OAAE,CAACpb,KAAd,CAAJ,EAA0B;AACxB,YAAM+V,IAAwB,GAAGvP,IAAjC;AACAuP,MAAAA,IAAI,CAACnY,KAAL,GAAa,KAAK6nD,iBAAL,CAAuBr1B,IAAvB,EAA6B,YAA7B,CAAb;AACA,WAAKnT,IAAL;AACAlH,MAAAA,IAAI,CAACwB,IAAL,GAAY,KAAKyY,cAAL,CAAoB,OAApB,CAAZ;AACA,aAAO,KAAKlX,UAAL,CAAgB/C,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,SAAKyS,SAAL;AAEAhiB,IAAAA,IAAI,CAACnI,IAAL,GAAY+xB,IAAI,CAAC/xB,IAAjB;AACA,WAAO,KAAKonD,iBAAL,CAAuBj/C,IAAvB,EAA6B,WAA7B,CAAP;AACD;;AAEDo/C,EAAAA,UAAU,GAAuC;AAC/C,WACE,KAAKN,gBAAL,CAAsB,gBAAtB,KACA,MAAMM,UAAN,CAAiB,GAAGj9C,SAApB,CAFF;AAID;;AAEDk9C,EAAAA,eAAe,GAAoC;AACjD,WACE,KAAKP,gBAAL,CAAsB,YAAtB,KACA,MAAMO,eAAN,CAAsB,GAAGl9C,SAAzB,CAFF;AAID;;AAEDk4C,EAAAA,UAAU,CACRr6C,IADQ,EAER0sB,WAFQ,EAGRC,UAHQ,EAIL;AACH,UAAM1qB,IAAI,GAAGyqB,WAAW,GAAG,kBAAH,GAAwB,iBAAhD;AAEA,SAAKjW,IAAL;AACA,SAAK6oC,cAAL,CAAoBt/C,IAApB;AACA,UAAMu/C,SAAS,GAAG,KAAKt+C,KAAL,CAAW0U,MAA7B;AAEA,UAAMgpC,WAAW,GAAG,KAAKG,gBAAL,CAAsB,YAAtB,CAApB;;AACA,QAAIH,WAAJ,EAAiB;AACf,UACE,KAAKz/C,KAAL,CAAW0V,OAAE,CAAC1X,QAAd,KACA,KAAKgC,KAAL,CAAW0V,OAAE,CAAC+pC,WAAd,CADA,IAEA,KAAKz/C,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAHF,EAIE;AACAiH,QAAAA,IAAI,CAAC2R,EAAL,GAAUgtC,WAAV;AACD,OAND,MAMO,IAAIhyB,UAAU,IAAI,CAACD,WAAnB,EAAgC;AACrC1sB,QAAAA,IAAI,CAAC2R,EAAL,GAAU,IAAV;AACA3R,QAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKkuC,iBAAL,CAAuBN,WAAvB,EAAoC,WAApC,CAAZ;AACA,eAAO,KAAKrsC,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD,OAJM,MAIA;AACL,aAAK2gB,UAAL,CAAgB,IAAhB,EAAsBg8B,iBAAiB,CAACC,mBAAxC;AACD;AACF,KAdD,MAcO;AACL,WAAKpyB,YAAL,CAAkBzsB,IAAlB,EAAwB0sB,WAAxB,EAAqCC,UAArC;AACD;;AAED,SAAK4B,eAAL,CAAqBvuB,IAArB;AACAA,IAAAA,IAAI,CAAC+Q,IAAL,GACE,KAAK+tC,gBAAL,CAAsB,WAAtB,KACA,KAAKU,cAAL,CAAoB,CAAC,CAACx/C,IAAI,CAACkO,UAA3B,EAAuCqxC,SAAvC,CAFF;AAGA,WAAO,KAAKjtC,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAED2R,EAAAA,WAAW,CAAC5T,IAAD,EAAuB;AAChC,UAAM2+C,WAAW,GAAG,KAAKG,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACH,WAAL,EAAkB,OAAO,MAAM/qC,WAAN,CAAkB,GAAGzR,SAArB,CAAP;;AAElB,QAAI,CAAC,KAAKogB,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrjB,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAnC,EAAyD;AAEvD0G,MAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACArC,MAAAA,IAAI,CAAChC,MAAL,GAAc,IAAd;AACAgC,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKkgC,iBAAL,CAAuBN,WAAvB,EAAoC,aAApC,CAAnB;AACA,aAAO,KAAKrsC,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAGD,SAAKy/C,YAAL,CAAkB,mBAAlB;AACA,UAAMtwB,SAAS,GAAG,KAAKhd,SAAL,EAAlB;AACAgd,IAAAA,SAAS,CAACtb,QAAV,GAAqB8qC,WAArB;AACA3+C,IAAAA,IAAI,CAACqC,UAAL,GAAkB,CAAC,KAAKiQ,UAAL,CAAgB6c,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AAEA,WAAO,MAAMvb,WAAN,CAAkB5T,IAAlB,CAAP;AACD;;AAED8pB,EAAAA,wBAAwB,GAAY;AAClC,QAAI,KAAK5qB,KAAL,CAAW0V,OAAE,CAAC7Y,QAAd,CAAJ,EAA6B;AAC3B,YAAM0a,IAAI,GAAG,KAAKof,cAAL,EAAb;;AACA,UAAI,KAAK6pB,oBAAL,CAA0BjpC,IAA1B,EAAgC,MAAhC,CAAJ,EAA6C;AAC3C,YACE,KAAK1X,KAAL,CAAW4gD,UAAX,CACE/qC,OAAE,CAAC+pC,WAAH,CAAevnD,KADjB,EAEE,KAAKwoD,mBAAL,CAAyBnpC,IAAI,GAAG,CAAhC,CAFF,CADF,EAKE;AACA,iBAAO,IAAP;AACD;AACF;AACF;;AACD,WAAO,MAAMqT,wBAAN,EAAP;AACD;;AAED+1B,EAAAA,gCAAgC,CAAC7/C,IAAD,EAAwB;AACtD,QAAIA,IAAI,CAACqC,UAAL,IAAmBrC,IAAI,CAACqC,UAAL,CAAgBzB,MAAhB,GAAyB,CAAhD,EAAmD;AAEjD,aAAO,IAAP;AACD;;AACD,WAAO,MAAMi/C,gCAAN,CAAuC,GAAG19C,SAA1C,CAAP;AACD;;AAED29C,EAAAA,WAAW,CAAC9/C,IAAD,EAAuC;AAChD,UAAM;AAAEqC,MAAAA;AAAF,QAAiBrC,IAAvB;;AACA,QAAIqC,UAAJ,YAAIA,UAAU,CAAEzB,MAAhB,EAAwB;AACtBZ,MAAAA,IAAI,CAACqC,UAAL,GAAkBA,UAAU,CAAC09C,MAAX,CAChB//C,IAAI,IAAIA,IAAI,CAAC6T,QAAL,CAAc5R,IAAd,KAAuB,aADf,CAAlB;AAGD;;AACD,UAAM69C,WAAN,CAAkB9/C,IAAlB;AACAA,IAAAA,IAAI,CAACqC,UAAL,GAAkBA,UAAlB;AACD;;AAED2gB,EAAAA,WAAW,CACThjB,IADS,EAE0C;AACnD,UAAM2+C,WAAW,GAAG,KAAKG,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACH,WAAL,EAAkB,OAAO,MAAM37B,WAAN,CAAkB,GAAG7gB,SAArB,CAAP;AAElBnC,IAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAKkgB,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrjB,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAnC,EAAyD;AAEvD0G,MAAAA,IAAI,CAAChC,MAAL,GAAc,KAAKihD,iBAAL,CAAuBN,WAAvB,EAAoC,eAApC,CAAd;AACA,WAAK38B,SAAL;AACA,aAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAGD,UAAMmvB,SAAS,GAAG,KAAK9a,eAAL,CAAqBsqC,WAArB,CAAlB;AACAxvB,IAAAA,SAAS,CAACE,KAAV,GAAkBsvB,WAAlB;AACA,SAAKrsC,UAAL,CAAgB6c,SAAhB,EAA2B,wBAA3B;AACAnvB,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqBiuB,SAArB;;AAEA,QAAI,KAAKtO,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAJ,EAAwB;AAEtB,YAAM0mD,aAAa,GAAG,KAAKC,6BAAL,CAAmCjgD,IAAnC,CAAtB;AAGA,UAAI,CAACggD,aAAL,EAAoB,KAAKE,0BAAL,CAAgClgD,IAAhC;AACrB;;AAED,SAAK4gB,gBAAL,CAAsB,MAAtB;AACA5gB,IAAAA,IAAI,CAAChC,MAAL,GAAc,KAAKmiD,iBAAL,EAAd;AACA,SAAKn+B,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmgD,EAAAA,iBAAiB,GAAsC;AAGrD,WACE,KAAKrB,gBAAL,CAAsB,eAAtB,KACA,MAAMqB,iBAAN,CAAwB,GAAGh+C,SAA3B,CAFF;AAID;;AAhTsB,CAD3B;;ACrDA,mBAAgB+L,UAAD,IACb,cAAcA,UAAd,CAAyB;AACvBkyC,EAAAA,gBAAgB,GAAiB;AAC/B,QAAI,KAAKlhD,KAAL,CAAW0V,OAAE,CAACtZ,MAAd,CAAJ,EAA2B;AACzB,YAAM+kD,gBAAgB,GAAG,KAAKp/C,KAAL,CAAWvC,KAApC;AAEA,YAAMsB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAK0O,GAAL,CAASjM,OAAE,CAACtZ,MAAZ;;AACA,UAAI,KAAK4D,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AACvB,cAAMA,IAAI,GAAG,KAAKyoD,mBAAL,CAAyB,KAAKr/C,KAAL,CAAWvC,KAApC,CAAb;AACA,cAAM6hD,UAAU,GAAG,KAAKh4B,gBAAL,CAAsBvoB,IAAtB,EAA4BnI,IAA5B,CAAnB;AACA0oD,QAAAA,UAAU,CAACt+C,IAAX,GAAkB,uBAAlB;;AACA,YAAI,KAAK/C,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAJ,EAA2B;AACzB,iBAAOmnD,UAAP;AACD;AACF;;AACD,WAAK39B,UAAL,CAAgBy9B,gBAAhB;AACD;AACF;;AAMDv9B,EAAAA,aAAa,GAAiB;AAC5B,WAAO,KAAKs9B,gBAAL,MAA2B,MAAMt9B,aAAN,CAAoB,GAAG3gB,SAAvB,CAAlC;AACD;;AAzBsB,CAD3B;;ACMO,SAAS1C,SAAT,CAAmBC,OAAnB,EAAwC7H,IAAxC,EAA+D;AACpE,SAAO6H,OAAO,CAACq9C,IAAR,CAAal9C,MAAM,IAAI;AAC5B,QAAIqnC,KAAK,CAACC,OAAN,CAActnC,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAchI,IAArB;AACD,KAFD,MAEO;AACL,aAAOgI,MAAM,KAAKhI,IAAlB;AACD;AACF,GANM,CAAP;AAOD;AAEM,SAAS+H,eAAT,CACLF,OADK,EAEL7H,IAFK,EAGL2oD,MAHK,EAIL;AACA,QAAM3gD,MAAM,GAAGH,OAAO,CAAC42C,IAAR,CAAaz2C,MAAM,IAAI;AACpC,QAAIqnC,KAAK,CAACC,OAAN,CAActnC,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAchI,IAArB;AACD,KAFD,MAEO;AACL,aAAOgI,MAAM,KAAKhI,IAAlB;AACD;AACF,GANc,CAAf;;AAQA,MAAIgI,MAAM,IAAIqnC,KAAK,CAACC,OAAN,CAActnC,MAAd,CAAd,EAAqC;AACnC,WAAOA,MAAM,CAAC,CAAD,CAAN,CAAU2gD,MAAV,CAAP;AACD;;AAED,SAAO,IAAP;AACD;AAED,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,CAA3B;AACA,MAAMC,6BAA6B,GAAG,CAAC,MAAD,EAAS,KAAT,CAAtC;AAEO,SAASC,eAAT,CAAyBjhD,OAAzB,EAA8C;AACnD,MAAID,SAAS,CAACC,OAAD,EAAU,YAAV,CAAb,EAAsC;AACpC,QAAID,SAAS,CAACC,OAAD,EAAU,mBAAV,CAAb,EAA6C;AAC3C,YAAM,IAAIygB,KAAJ,CACJ,iEADI,CAAN;AAGD;;AAED,UAAMygC,sBAAsB,GAAGhhD,eAAe,CAC5CF,OAD4C,EAE5C,YAF4C,EAG5C,wBAH4C,CAA9C;;AAKA,QAAIkhD,sBAAsB,IAAI,IAA9B,EAAoC;AAClC,YAAM,IAAIzgC,KAAJ,CACJ,wEACE,2DADF,GAEE,kEAFF,GAGE,qEAJE,CAAN;AAMD,KAPD,MAOO,IAAI,OAAOygC,sBAAP,KAAkC,SAAtC,EAAiD;AACtD,YAAM,IAAIzgC,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;AAED,MAAI1gB,SAAS,CAACC,OAAD,EAAU,MAAV,CAAT,IAA8BD,SAAS,CAACC,OAAD,EAAU,YAAV,CAA3C,EAAoE;AAClE,UAAM,IAAIygB,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAI1gB,SAAS,CAACC,OAAD,EAAU,cAAV,CAAT,IAAsCD,SAAS,CAACC,OAAD,EAAU,aAAV,CAAnD,EAA6E;AAC3E,UAAM,IAAIygB,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MACE1gB,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAT,IACA,CAAC+gD,kBAAkB,CAACttB,QAAnB,CACCvzB,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CADhB,CAFH,EAKE;AACA,UAAM,IAAIygB,KAAJ,CACJ,iFACEsgC,kBAAkB,CAAC5vC,GAAnB,CAAuBgwC,CAAC,IAAK,IAAGA,CAAE,GAAlC,EAAsCC,IAAtC,CAA2C,IAA3C,CAFE,CAAN;AAID;;AAED,MAAIrhD,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAKnC;AACL,UAAID,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C,cAAM,IAAIygB,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,YAAM4gC,kCAAkC,GAAGnhD,eAAe,CACxDF,OADwD,EAExD,kBAFwD,EAGxD,SAHwD,CAA1D;;AAKA,UAAIqhD,kCAAkC,KAAK,UAA3C,EAAuD;AACrD,cAAM,IAAI5gC,KAAJ,CACJ,+DACE,wDADF,GAEE,sCAHE,CAAN;AAKD;AACF;AACF;;AAED,MACE1gB,SAAS,CAACC,OAAD,EAAU,gBAAV,CAAT,IACA,CAACghD,6BAA6B,CAACvtB,QAA9B,CACCvzB,eAAe,CAACF,OAAD,EAAU,gBAAV,EAA4B,YAA5B,CADhB,CAFH,EAKE;AACA,UAAM,IAAIygB,KAAJ,CACJ,iFACEugC,6BAA6B,CAAC7vC,GAA9B,CAAkCgwC,CAAC,IAAK,IAAGA,CAAE,GAA7C,EAAiDC,IAAjD,CAAsD,IAAtD,CAFE,CAAN;AAID;;AAED,MACErhD,SAAS,CAACC,OAAD,EAAU,oBAAV,CAAT,IACA,CAACD,SAAS,CAACC,OAAD,EAAU,eAAV,CAFZ,EAGE;AACA,UAAMiO,KAAK,GAAG,IAAIwS,KAAJ,CACZ,8FADY,CAAd;AAIAxS,IAAAA,KAAK,CAACqzC,cAAN,GAAuB,eAAvB;AACA,UAAMrzC,KAAN;AACD;AACF;AAYM,MAAMszC,YAA6C,GAAG;AAC3DC,EAAAA,MAD2D;AAE3DvwB,EAAAA,GAF2D;AAG3DwwB,EAAAA,IAH2D;AAI3DC,EAAAA,UAJ2D;AAK3DC,EAAAA,WAL2D;AAM3DC,EAAAA;AAN2D,CAAtD;AASA,MAAMC,gBAAwC,GACnD9+C,MAAM,CAAC8J,IAAP,CAAY00C,YAAZ,CADK;;ACpIA,MAAMO,cAAuB,GAAG;AAErC1a,EAAAA,UAAU,EAAE,QAFyB;AAIrC2a,EAAAA,cAAc,EAAEthD,SAJqB;AAOrC4mC,EAAAA,SAAS,EAAE,CAP0B;AAUrC2a,EAAAA,yBAAyB,EAAE,KAVU;AAarCC,EAAAA,0BAA0B,EAAE,KAbS;AAgBrCC,EAAAA,2BAA2B,EAAE,KAhBQ;AAkBrCC,EAAAA,uBAAuB,EAAE,KAlBY;AAoBrCC,EAAAA,sBAAsB,EAAE,KApBa;AAsBrCpiD,EAAAA,OAAO,EAAE,EAtB4B;AAwBrCmnC,EAAAA,UAAU,EAAE,IAxByB;AAiCrCkb,EAAAA,MAAM,EAAE,KAjC6B;AAmCrCC,EAAAA,MAAM,EAAE,KAnC6B;AAsCrCC,EAAAA,8BAA8B,EAAE,KAtCK;AAyCrCx0C,EAAAA,aAAa,EAAE;AAzCsB,CAAhC;AA8CA,SAASy0C,UAAT,CAAoBC,IAApB,EAA6C;AAClD,QAAMrqD,OAAY,GAAG,EAArB;;AACA,OAAK,MAAMub,GAAX,IAAkB5Q,MAAM,CAAC8J,IAAP,CAAYi1C,cAAZ,CAAlB,EAA+C;AAC7C1pD,IAAAA,OAAO,CAACub,GAAD,CAAP,GAAe8uC,IAAI,IAAIA,IAAI,CAAC9uC,GAAD,CAAJ,IAAa,IAArB,GAA4B8uC,IAAI,CAAC9uC,GAAD,CAAhC,GAAwCmuC,cAAc,CAACnuC,GAAD,CAArE;AACD;;AACD,SAAOvb,OAAP;AACD;;eC9ED,SAASsqD,OAAT,CAAiBlkD,IAAjB,EAAuB;AACrB,SAAOA,IAAI,MAAJ,IAAkBA,IAAI,MAA7B;AACD;AAmBD,MAAMmkD,iBAAiB,GAAG,IAAIxsC,GAAJ,CAAQ,mCAAR,CAA1B;AAaA,MAAMysC,iCAAiC,GAAG;AACxCC,EAAAA,SAAS,EAAE,kCAD6B;AAWxCC,EAAAA,GAAG,EAAE;AAXmC,CAA1C;AAmBA,MAAMC,+BAA+B,GAAG,EAAxC;AACAA,+BAA+B,CAACC,GAAhC,GAAsC,QAAtC;AAKAD,+BAA+B,CAACE,GAAhC,GAAsC,CAEpC,GAAGF,+BAA+B,CAACC,GAFC,yBAAtC;AAWAD,+BAA+B,CAACG,GAAhC,GAAsC,CAEpC,GAAGH,+BAA+B,CAACE,GAFC,SAAtC;AAQAF,+BAA+B,CAACD,GAAhC,GAAsC,CAEpC,GAAGC,+BAA+B,CAACG,GAFC,oDAAtC;AAuBO,MAAMC,KAAN,CAAY;AACjB1rD,EAAAA,WAAW,CAAC8J,KAAD,EAAe;AACxB,SAAKgB,IAAL,GAAYhB,KAAK,CAACgB,IAAlB;AACA,SAAKyM,KAAL,GAAazN,KAAK,CAACyN,KAAnB;AACA,SAAKhQ,KAAL,GAAauC,KAAK,CAACvC,KAAnB;AACA,SAAKC,GAAL,GAAWsC,KAAK,CAACtC,GAAjB;AACA,SAAKqC,GAAL,GAAW,IAAIvC,cAAJ,CAAmBwC,KAAK,CAAC4L,QAAzB,EAAmC5L,KAAK,CAAC+L,MAAzC,CAAX;AACD;;AAPgB;AAkBJ,MAAM81C,SAAN,SAAwBC,WAAxB,CAAqC;AAclD5rD,EAAAA,WAAW,CAACW,OAAD,EAAmBiH,KAAnB,EAAkC;AAC3C;AAD2C,SAL7CkP,WAK6C;AAAA,SAF7C+zC,MAE6C,GAFV,EAEU;AAE3C,SAAK/gD,KAAL,GAAa,IAAIykC,KAAJ,EAAb;AACA,SAAKzkC,KAAL,CAAWszB,IAAX,CAAgBz8B,OAAhB;AACA,SAAKiH,KAAL,GAAaA,KAAb;AACA,SAAK6B,MAAL,GAAc7B,KAAK,CAAC6B,MAApB;AACA,SAAKqN,WAAL,GAAmB,KAAnB;AACD;;AAED+0C,EAAAA,SAAS,CAACjrD,KAAD,EAA2B;AAGlC,SAAKiqD,MAAL,CAAYphD,MAAZ,GAAqB,KAAKK,KAAL,CAAW2lC,YAAhC;AACA,SAAKob,MAAL,CAAY9gD,IAAZ,CAAiBnJ,KAAjB;AACA,MAAE,KAAKkJ,KAAL,CAAW2lC,YAAb;AACD;;AAIDnwB,EAAAA,IAAI,GAAS;AACX,SAAKwsC,mBAAL;;AACA,QAAI,KAAKnrD,OAAL,CAAakqD,MAAjB,EAAyB;AACvB,WAAKgB,SAAL,CAAe,IAAIH,KAAJ,CAAU,KAAK5hD,KAAf,CAAf;AACD;;AAED,SAAKA,KAAL,CAAWgM,UAAX,GAAwB,KAAKhM,KAAL,CAAWtC,GAAnC;AACA,SAAKsC,KAAL,CAAW6L,YAAX,GAA0B,KAAK7L,KAAL,CAAWvC,KAArC;AACA,SAAKuC,KAAL,CAAWiM,aAAX,GAA2B,KAAKjM,KAAL,CAAW+L,MAAtC;AACA,SAAK/L,KAAL,CAAW8L,eAAX,GAA6B,KAAK9L,KAAL,CAAW4L,QAAxC;AACA,SAAK4lB,SAAL;AACD;;AAID5R,EAAAA,GAAG,CAAC5e,IAAD,EAA2B;AAC5B,QAAI,KAAK/C,KAAL,CAAW+C,IAAX,CAAJ,EAAsB;AACpB,WAAKwU,IAAL;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAP;AACD;AACF;;AAIDvX,EAAAA,KAAK,CAAC+C,IAAD,EAA2B;AAC9B,WAAO,KAAKhB,KAAL,CAAWgB,IAAX,KAAoBA,IAA3B;AACD;;AASD0oC,EAAAA,oBAAoB,CAAC1pC,KAAD,EAA+B;AACjD,WAAO;AACL2L,MAAAA,GAAG,EAAE3L,KAAK,CAAC2L,GADN;AAEL8B,MAAAA,KAAK,EAAE,IAFF;AAGLzM,MAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAHP;AAILvD,MAAAA,KAAK,EAAEuC,KAAK,CAACvC,KAJR;AAKLC,MAAAA,GAAG,EAAEsC,KAAK,CAACtC,GALN;AAMLsO,MAAAA,UAAU,EAAEhM,KAAK,CAACtC,GANb;AAOLkW,MAAAA,OAAO,EAAE,CAAC,KAAK+b,UAAL,EAAD,CAPJ;AAQLrQ,MAAAA,MAAM,EAAEtf,KAAK,CAACsf;AART,KAAP;AAUD;;AAkBD2F,EAAAA,SAAS,GAAmB;AAC1B,UAAMg9B,GAAG,GAAG,KAAKjiD,KAAjB;AAGA,SAAKA,KAAL,GAAa,KAAK0pC,oBAAL,CAA0BuY,GAA1B,CAAb;AAEA,SAAKj1C,WAAL,GAAmB,IAAnB;AACA,SAAKwkB,SAAL;AACA,SAAKxkB,WAAL,GAAmB,KAAnB;AAEA,UAAMk1C,IAAI,GAAG,KAAKliD,KAAlB;AACA,SAAKA,KAAL,GAAaiiD,GAAb;AACA,WAAOC,IAAP;AACD;;AAEDttB,EAAAA,cAAc,GAAW;AACvB,WAAO,KAAK+pB,mBAAL,CAAyB,KAAK3+C,KAAL,CAAW2L,GAApC,CAAP;AACD;;AAEDgzC,EAAAA,mBAAmB,CAAChzC,GAAD,EAAsB;AACvCzO,IAAAA,cAAc,CAACgB,SAAf,GAA2ByN,GAA3B;AACA,UAAMw2C,IAAI,GAAGjlD,cAAc,CAACiB,IAAf,CAAoB,KAAKL,KAAzB,CAAb;AAEA,WAAO6N,GAAG,GAAGw2C,IAAI,CAAC,CAAD,CAAJ,CAAQxiD,MAArB;AACD;;AAEDm1C,EAAAA,iBAAiB,GAAW;AAC1B,WAAO,KAAKh3C,KAAL,CAAWiD,UAAX,CAAsB,KAAK6zB,cAAL,EAAtB,CAAP;AACD;;AAEDwtB,EAAAA,cAAc,CAACz2C,GAAD,EAAsB;AAKlC,QAAI02C,EAAE,GAAG,KAAKvkD,KAAL,CAAWiD,UAAX,CAAsB4K,GAAtB,CAAT;;AACA,QAAI,CAAC02C,EAAE,GAAG,MAAN,MAAkB,MAAlB,IAA4B,EAAE12C,GAAF,GAAQ,KAAK7N,KAAL,CAAW6B,MAAnD,EAA2D;AACzD,YAAM2iD,KAAK,GAAG,KAAKxkD,KAAL,CAAWiD,UAAX,CAAsB4K,GAAtB,CAAd;;AACA,UAAI,CAAC22C,KAAK,GAAG,MAAT,MAAqB,MAAzB,EAAiC;AAC/BD,QAAAA,EAAE,GAAG,WAAW,CAACA,EAAE,GAAG,KAAN,KAAgB,EAA3B,KAAkCC,KAAK,GAAG,KAA1C,CAAL;AACD;AACF;;AACD,WAAOD,EAAP;AACD;;AAKDE,EAAAA,SAAS,CAAC7tC,MAAD,EAAwB;AAC/B,SAAK1U,KAAL,CAAW0U,MAAX,GAAoBA,MAApB;;AACA,QAAIA,MAAJ,EAAY;AAKV,WAAK1U,KAAL,CAAW0lC,YAAX,CAAwBn6B,OAAxB,CAAgC,CAACc,OAAD,EAAUV,GAAV,KAE9B,KAAKO,KAAL,CAAWP,GAAX,EAAgBU,OAAhB,CAFF;AAIA,WAAKrM,KAAL,CAAW0lC,YAAX,CAAwB8c,KAAxB;AACD;AACF;;AAED7yB,EAAAA,UAAU,GAAe;AACvB,WAAO,KAAK3vB,KAAL,CAAW4T,OAAX,CAAmB,KAAK5T,KAAL,CAAW4T,OAAX,CAAmBjU,MAAnB,GAA4B,CAA/C,CAAP;AACD;;AAKD6xB,EAAAA,SAAS,GAAS;AAChB,UAAM7B,UAAU,GAAG,KAAKA,UAAL,EAAnB;AACA,QAAI,CAACA,UAAU,CAAClc,aAAhB,EAA+B,KAAKgvC,SAAL;AAC/B,SAAKziD,KAAL,CAAWvC,KAAX,GAAmB,KAAKuC,KAAL,CAAW2L,GAA9B;AACA,QAAI,CAAC,KAAKqB,WAAV,EAAuB,KAAKhN,KAAL,CAAW4L,QAAX,GAAsB,KAAK5L,KAAL,CAAW+lC,WAAX,EAAtB;;AACvB,QAAI,KAAK/lC,KAAL,CAAW2L,GAAX,IAAkB,KAAKhM,MAA3B,EAAmC;AACjC,WAAKof,WAAL,CAAiBpL,OAAE,CAACnc,GAApB;AACA;AACD;;AAED,QAAIm4B,UAAU,KAAK4V,KAAE,CAAC1sC,QAAtB,EAAgC;AAC9B,WAAK6pD,aAAL;AACD,KAFD,MAEO;AACL,WAAKx2B,gBAAL,CAAsB,KAAKk2B,cAAL,CAAoB,KAAKpiD,KAAL,CAAW2L,GAA/B,CAAtB;AACD;AACF;;AAEDmmB,EAAAA,gBAAgB,GAA0B;AACxC,QAAIlmB,QAAJ;AACA,QAAI,CAAC,KAAKoB,WAAV,EAAuBpB,QAAQ,GAAG,KAAK5L,KAAL,CAAW+lC,WAAX,EAAX;AACvB,UAAMtoC,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,UAAMjO,GAAG,GAAG,KAAKI,KAAL,CAAW8sB,OAAX,CAAmB,IAAnB,EAAyB,KAAK5qB,KAAL,CAAW2L,GAAX,GAAiB,CAA1C,CAAZ;AACA,QAAIjO,GAAG,KAAK,CAAC,CAAb,EAAgB,MAAM,KAAKwO,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC5H,mBAAzB,CAAN;AAEhB,SAAKzK,KAAL,CAAW2L,GAAX,GAAiBjO,GAAG,GAAG,CAAvB;AACAb,IAAAA,UAAU,CAACqB,SAAX,GAAuBT,KAAvB;AACA,QAAIQ,KAAJ;;AACA,WACE,CAACA,KAAK,GAAGpB,UAAU,CAACsB,IAAX,CAAgB,KAAKL,KAArB,CAAT,KACAG,KAAK,CAACG,KAAN,GAAc,KAAK4B,KAAL,CAAW2L,GAF3B,EAGE;AACA,QAAE,KAAK3L,KAAL,CAAW0kC,OAAb;AACA,WAAK1kC,KAAL,CAAWhC,SAAX,GAAuBC,KAAK,CAACG,KAAN,GAAcH,KAAK,CAAC,CAAD,CAAL,CAAS0B,MAA9C;AACD;;AAID,QAAI,KAAKqN,WAAT,EAAsB;AAGtB,UAAMS,KAAK,GAAG,KAAK3P,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAK,GAAG,CAAzB,EAA4BC,GAA5B,CAAd;AACA,UAAMoC,OAAO,GAAG;AACdkB,MAAAA,IAAI,EAAE,cADQ;AAEdyM,MAAAA,KAAK,EAAEA,KAFO;AAGdhQ,MAAAA,KAAK,EAAEA,KAHO;AAIdC,MAAAA,GAAG,EAAEA,GAAG,GAAG,CAJG;AAKdqC,MAAAA,GAAG,EAAE,IAAIvC,cAAJ,CAAmBoO,QAAnB,EAA6B,KAAK5L,KAAL,CAAW+lC,WAAX,EAA7B;AALS,KAAhB;AAOA,QAAI,KAAKlvC,OAAL,CAAakqD,MAAjB,EAAyB,KAAKgB,SAAL,CAAejiD,OAAf;AACzB,WAAOA,OAAP;AACD;;AAED6iD,EAAAA,eAAe,CAACC,SAAD,EAA0C;AACvD,UAAMnlD,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,QAAIC,QAAJ;AACA,QAAI,CAAC,KAAKoB,WAAV,EAAuBpB,QAAQ,GAAG,KAAK5L,KAAL,CAAW+lC,WAAX,EAAX;AACvB,QAAIwB,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAuB,KAAKf,KAAL,CAAW2L,GAAX,IAAkBi3C,SAAzC,CAAT;;AACA,QAAI,KAAK5iD,KAAL,CAAW2L,GAAX,GAAiB,KAAKhM,MAA1B,EAAkC;AAChC,aAAO,CAAC3C,SAAS,CAACuqC,EAAD,CAAV,IAAkB,EAAE,KAAKvnC,KAAL,CAAW2L,GAAb,GAAmB,KAAKhM,MAAjD,EAAyD;AACvD4nC,QAAAA,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAL;AACD;AACF;;AAID,QAAI,KAAKqB,WAAT,EAAsB;AAGtB,UAAMtP,GAAG,GAAG,KAAKsC,KAAL,CAAW2L,GAAvB;AACA,UAAM8B,KAAK,GAAG,KAAK3P,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAK,GAAGmlD,SAAzB,EAAoCllD,GAApC,CAAd;AAEA,UAAMoC,OAAO,GAAG;AACdkB,MAAAA,IAAI,EAAE,aADQ;AAEdyM,MAAAA,KAFc;AAGdhQ,MAAAA,KAHc;AAIdC,MAAAA,GAJc;AAKdqC,MAAAA,GAAG,EAAE,IAAIvC,cAAJ,CAAmBoO,QAAnB,EAA6B,KAAK5L,KAAL,CAAW+lC,WAAX,EAA7B;AALS,KAAhB;AAOA,QAAI,KAAKlvC,OAAL,CAAakqD,MAAjB,EAAyB,KAAKgB,SAAL,CAAejiD,OAAf;AACzB,WAAOA,OAAP;AACD;;AAKD2iD,EAAAA,SAAS,GAAS;AAChB,UAAMI,UAAU,GAAG,KAAK7iD,KAAL,CAAW2L,GAA9B;AACA,UAAM3M,QAAQ,GAAG,EAAjB;;AACA8jD,IAAAA,IAAI,EAAE,OAAO,KAAK9iD,KAAL,CAAW2L,GAAX,GAAiB,KAAKhM,MAA7B,EAAqC;AACzC,YAAM4nC,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;;AACA,cAAQ47B,EAAR;AACE;AACA;AACA;AACE,YAAE,KAAKvnC,KAAL,CAAW2L,GAAb;AACA;;AACF;AACE,cACE,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QADF,EAEE;AACA,cAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;;AAEH;AACA;AACA;AACE,YAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACA,YAAE,KAAK3L,KAAL,CAAW0kC,OAAb;AACA,eAAK1kC,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW2L,GAAlC;AACA;;AAEF;AACE,kBAAQ,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAR;AACE;AAAyB;AACvB,sBAAM7L,OAAO,GAAG,KAAKgyB,gBAAL,EAAhB;;AACA,oBAAIhyB,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,uBAAKW,UAAL,CAAgBC,OAAhB;AACAd,kBAAAA,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACD;;AACD;AACD;;AAED;AAAsB;AACpB,sBAAMA,OAAO,GAAG,KAAK6iD,eAAL,CAAqB,CAArB,CAAhB;;AACA,oBAAI7iD,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,uBAAKW,UAAL,CAAgBC,OAAhB;AACAd,kBAAAA,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACD;;AACD;AACD;;AAED;AACE,oBAAMgjD,IAAN;AApBJ;;AAsBA;;AAEF;AACE,cAAI3lD,YAAY,CAACoqC,EAAD,CAAhB,EAAsB;AACpB,cAAE,KAAKvnC,KAAL,CAAW2L,GAAb;AACD,WAFD,MAEO,IAAI47B,EAAE,OAAF,IAAyB,CAAC,KAAKtyB,QAAnC,EAA6C;AAClD,kBAAMtJ,GAAG,GAAG,KAAK3L,KAAL,CAAW2L,GAAvB;;AACA,gBACE,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAG,CAA5B,YACA,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAG,CAA5B,QADA,KAECk3C,UAAU,KAAK,CAAf,IAAoB,KAAK7iD,KAAL,CAAWhC,SAAX,GAAuB6kD,UAF5C,CADF,EAIE;AAEA,oBAAM/iD,OAAO,GAAG,KAAK6iD,eAAL,CAAqB,CAArB,CAAhB;;AACA,kBAAI7iD,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,qBAAKW,UAAL,CAAgBC,OAAhB;AACAd,gBAAAA,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACD;AACF,aAXD,MAWO;AACL,oBAAMgjD,IAAN;AACD;AACF,WAhBM,MAgBA,IAAIvb,EAAE,OAAF,IAA6B,CAAC,KAAKtyB,QAAvC,EAAiD;AACtD,kBAAMtJ,GAAG,GAAG,KAAK3L,KAAL,CAAW2L,GAAvB;;AACA,gBACE,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAG,CAA5B,YACA,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAG,CAA5B,QADA,IAEA,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB4K,GAAG,GAAG,CAA5B,QAHF,EAIE;AAEA,oBAAM7L,OAAO,GAAG,KAAK6iD,eAAL,CAAqB,CAArB,CAAhB;;AACA,kBAAI7iD,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,qBAAKW,UAAL,CAAgBC,OAAhB;AACAd,gBAAAA,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACD;AACF,aAXD,MAWO;AACL,oBAAMgjD,IAAN;AACD;AACF,WAhBM,MAgBA;AACL,kBAAMA,IAAN;AACD;;AAnFL;AAqFD;;AAED,QAAI9jD,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMjC,GAAG,GAAG,KAAKsC,KAAL,CAAW2L,GAAvB;AACA,YAAMo3C,iBAAiB,GAAG;AACxBtlD,QAAAA,KAAK,EAAEolD,UADiB;AAExBnlD,QAAAA,GAFwB;AAGxBsB,QAAAA,QAHwB;AAIxBsB,QAAAA,WAAW,EAAE,IAJW;AAKxBM,QAAAA,YAAY,EAAE,IALU;AAMxBH,QAAAA,cAAc,EAAE;AANQ,OAA1B;AAQA,WAAKT,KAAL,CAAWG,YAAX,CAAwBF,IAAxB,CAA6B8iD,iBAA7B;AACD;AACF;;AAODhkC,EAAAA,WAAW,CAAC/d,IAAD,EAAkBge,GAAlB,EAAkC;AAC3C,SAAKhf,KAAL,CAAWtC,GAAX,GAAiB,KAAKsC,KAAL,CAAW2L,GAA5B;AACA,UAAMi+B,QAAQ,GAAG,KAAK5pC,KAAL,CAAWgB,IAA5B;AACA,SAAKhB,KAAL,CAAWgB,IAAX,GAAkBA,IAAlB;AACA,SAAKhB,KAAL,CAAWyN,KAAX,GAAmBuR,GAAnB;;AAEA,QAAI,CAAC,KAAKhS,WAAV,EAAuB;AACrB,WAAKhN,KAAL,CAAW+L,MAAX,GAAoB,KAAK/L,KAAL,CAAW+lC,WAAX,EAApB;AACA,WAAKvvC,aAAL,CAAmBozC,QAAnB;AACD;AACF;;AAYDoZ,EAAAA,oBAAoB,GAAS;AAC3B,QAAI,KAAKhjD,KAAL,CAAW2L,GAAX,KAAmB,CAAnB,IAAwB,KAAKs3C,qBAAL,EAA5B,EAA0D;AACxD;AACD;;AAED,UAAMC,OAAO,GAAG,KAAKljD,KAAL,CAAW2L,GAAX,GAAiB,CAAjC;AACA,UAAM6J,IAAI,GAAG,KAAK4sC,cAAL,CAAoBc,OAApB,CAAb;;AACA,QAAI1tC,IAAI,MAAJ,IAA4BA,IAAI,MAApC,EAA0D;AACxD,YAAM,KAAKtJ,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAChJ,wBAAlC,CAAN;AACD;;AAED,QACEmM,IAAI,QAAJ,IACCA,IAAI,OAAJ,IAAwC,KAAKhX,SAAL,CAAe,gBAAf,CAF3C,EAGE;AAKA,WAAKggD,YAAL,CAAkB,gBAAlB;;AACA,UAAI,KAAK7/C,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,MAA7D,EAAqE;AACnE,cAAM,KAAKuN,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ6J,IAAI,QAAJ,GACInD,aAAM,CAACpK,4CADX,GAEIoK,aAAM,CAACnJ,2CAJP,CAAN;AAMD;;AAED,WAAKlJ,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;;AACA,UAAI6J,IAAI,QAAR,EAAuC;AAErC,aAAKuJ,WAAL,CAAiBpL,OAAE,CAAC3b,UAApB;AACD,OAHD,MAGO;AAEL,aAAK+mB,WAAL,CAAiBpL,OAAE,CAACjc,YAApB;AACD;AACF,KA1BD,MA0BO,IAAI2c,iBAAiB,CAACmB,IAAD,CAArB,EAA6B;AAClC,QAAE,KAAKxV,KAAL,CAAW2L,GAAb;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAACpc,WAApB,EAAiC,KAAKy0B,SAAL,CAAexW,IAAf,CAAjC;AACD,KAHM,MAGA,IAAIA,IAAI,OAAR,EAAkC;AACvC,QAAE,KAAKxV,KAAL,CAAW2L,GAAb;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAACpc,WAApB,EAAiC,KAAKy0B,SAAL,EAAjC;AACD,KAHM,MAGA;AACL,WAAKG,QAAL,CAAcxY,OAAE,CAACza,IAAjB,EAAuB,CAAvB;AACD;AACF;;AAEDiqD,EAAAA,aAAa,GAAS;AACpB,UAAM3tC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QAAI6J,IAAI,MAAJ,IAA4BA,IAAI,MAApC,EAA0D;AACxD,WAAK4tC,UAAL,CAAgB,IAAhB;AACA;AACD;;AAED,QACE5tC,IAAI,OAAJ,IACA,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QAFF,EAGE;AACA,WAAK3L,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAAC7a,QAApB;AACD,KAND,MAMO;AACL,QAAE,KAAKkH,KAAL,CAAW2L,GAAb;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAAClb,GAApB;AACD;AACF;;AAED4qD,EAAAA,eAAe,GAAS;AACtB,UAAM7tC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QAAI6J,IAAI,OAAR,EAAiC;AAC/B,WAAK2W,QAAL,CAAcxY,OAAE,CAACra,WAAjB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAK6yB,QAAL,CAAcxY,OAAE,CAACpZ,KAAjB,EAAwB,CAAxB;AACD;AACF;;AAED0oD,EAAAA,qBAAqB,GAAY;AAC/B,QAAI,KAAKjjD,KAAL,CAAW2L,GAAX,KAAmB,CAAnB,IAAwB,KAAKhM,MAAL,GAAc,CAA1C,EAA6C,OAAO,KAAP;AAE7C,QAAI4nC,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAT;AACA,QAAI47B,EAAE,OAAN,EAAsC,OAAO,KAAP;AAEtC,UAAM9pC,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,SAAK3L,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;;AAEA,WAAO,CAAC3O,SAAS,CAACuqC,EAAD,CAAV,IAAkB,EAAE,KAAKvnC,KAAL,CAAW2L,GAAb,GAAmB,KAAKhM,MAAjD,EAAyD;AACvD4nC,MAAAA,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAL;AACD;;AAED,UAAM8B,KAAK,GAAG,KAAK3P,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAK,GAAG,CAAzB,EAA4B,KAAKuC,KAAL,CAAW2L,GAAvC,CAAd;AAEA,SAAKoT,WAAL,CAAiBpL,OAAE,CAACxa,oBAApB,EAA0CsU,KAA1C;AAEA,WAAO,IAAP;AACD;;AAED6jB,EAAAA,qBAAqB,CAACr0B,IAAD,EAAqB;AAExC,QAAI+D,IAAI,GAAG/D,IAAI,OAAJ,GAA8B0W,OAAE,CAACrZ,IAAjC,GAAwCqZ,OAAE,CAACtZ,MAAtD;AACA,QAAIipD,KAAK,GAAG,CAAZ;AACA,QAAI9tC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAX;;AAGA,QAAI1O,IAAI,OAAJ,IAA+BuY,IAAI,OAAvC,EAAgE;AAC9D8tC,MAAAA,KAAK;AACL9tC,MAAAA,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAP;AACA3K,MAAAA,IAAI,GAAG2S,OAAE,CAACnZ,QAAV;AACD;;AAED,QAAIgb,IAAI,OAAJ,IAA+B,CAAC,KAAKxV,KAAL,CAAWsf,MAA/C,EAAuD;AACrDgkC,MAAAA,KAAK;AACLtiD,MAAAA,IAAI,GAAG2S,OAAE,CAACta,MAAV;AACD;;AAED,SAAK8yB,QAAL,CAAcnrB,IAAd,EAAoBsiD,KAApB;AACD;;AAED7xB,EAAAA,kBAAkB,CAACx0B,IAAD,EAAqB;AAErC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAI6J,IAAI,KAAKvY,IAAb,EAAmB;AACjB,UAAI,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QAAJ,EAAsE;AACpE,aAAKwgB,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyB,CAAzB;AACD,OAFD,MAEO;AACL,aAAK8yB,QAAL,CACElvB,IAAI,QAAJ,GAAiC0W,OAAE,CAAC/Z,SAApC,GAAgD+Z,OAAE,CAAC9Z,UADrD,EAEE,CAFF;AAID;;AACD;AACD;;AAED,QAAIoD,IAAI,QAAR,EAAoC;AAElC,UAAIuY,IAAI,OAAR,EAAoC;AAClC,aAAK2W,QAAL,CAAcxY,OAAE,CAACja,QAAjB,EAA2B,CAA3B;AACA;AACD;;AAED,UACE,KAAK8E,SAAL,CAAe,gBAAf,KACAgX,IAAI,QAFN,EAGE;AACA,YAAI,KAAK7W,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAKuN,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ0G,aAAM,CAACtK,yCAFH,CAAN;AAID;;AACD,aAAK/H,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAACzb,SAApB;AACA;AACD;;AAGD,UACE,KAAKsG,SAAL,CAAe,gBAAf,KACAgX,IAAI,OAFN,EAGE;AACA,YAAI,KAAK7W,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAKuN,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ0G,aAAM,CAACrJ,wCAFH,CAAN;AAID;;AACD,aAAKhJ,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC9b,WAApB;AACA;AACD;AACF;;AAED,QAAI2d,IAAI,OAAR,EAAiC;AAC/B,WAAK2W,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyB,CAAzB;AACA;AACD;;AAED,SAAK8yB,QAAL,CACElvB,IAAI,QAAJ,GAAiC0W,OAAE,CAAC7Z,SAApC,GAAgD6Z,OAAE,CAAC3Z,UADrD,EAEE,CAFF;AAID;;AAEDupD,EAAAA,eAAe,GAAS;AAEtB,UAAM/tC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QAAI6J,IAAI,OAAR,EAAiC;AAC/B,WAAK2W,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyB,CAAzB;AACD,KAFD,MAEO;AACL,WAAK8yB,QAAL,CAAcxY,OAAE,CAAC5Z,UAAjB,EAA6B,CAA7B;AACD;AACF;;AAEDypD,EAAAA,kBAAkB,CAACvmD,IAAD,EAAqB;AAErC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAI6J,IAAI,KAAKvY,IAAb,EAAmB;AACjB,WAAKkvB,QAAL,CAAcxY,OAAE,CAACpa,MAAjB,EAAyB,CAAzB;AACA;AACD;;AAED,QAAIic,IAAI,OAAR,EAAiC;AAC/B,WAAK2W,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyB,CAAzB;AACD,KAFD,MAEO;AACL,WAAK8yB,QAAL,CAAcxY,OAAE,CAACvZ,OAAjB,EAA0B,CAA1B;AACD;AACF;;AAED0iD,EAAAA,eAAe,CAAC7/C,IAAD,EAAqB;AAElC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;AACA,QAAI83C,IAAI,GAAG,CAAX;;AAEA,QAAIjuC,IAAI,KAAKvY,IAAb,EAAmB;AACjBwmD,MAAAA,IAAI,GACFxmD,IAAI,OAAJ,IACA,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QADA,GAEI,CAFJ,GAGI,CAJN;;AAKA,UAAI,KAAK7N,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB83C,IAAvC,QAAJ,EAAyE;AACvE,aAAKt3B,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyBoqD,IAAI,GAAG,CAAhC;AACA;AACD;;AACD,WAAKt3B,QAAL,CAAcxY,OAAE,CAACxZ,QAAjB,EAA2BspD,IAA3B;AACA;AACD;;AAED,QAAIjuC,IAAI,OAAR,EAAiC;AAE/BiuC,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,SAAKt3B,QAAL,CAAcxY,OAAE,CAACzZ,UAAjB,EAA6BupD,IAA7B;AACD;;AAEDC,EAAAA,iBAAiB,CAACzmD,IAAD,EAAqB;AAEpC,UAAMuY,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,QAAI6J,IAAI,OAAR,EAAiC;AAC/B,WAAK2W,QAAL,CACExY,OAAE,CAAC1Z,QADL,EAEE,KAAK6D,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,WACI,CADJ,GAEI,CAJN;AAMA;AACD;;AACD,QAAI1O,IAAI,OAAJ,IAA+BuY,IAAI,OAAvC,EAAmE;AAEjE,WAAKxV,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAAC/a,KAApB;AACA;AACD;;AACD,SAAKuzB,QAAL,CAAclvB,IAAI,OAAJ,GAA8B0W,OAAE,CAACva,EAAjC,GAAsCua,OAAE,CAACna,IAAvD,EAA6D,CAA7D;AACD;;AAEDmqD,EAAAA,kBAAkB,GAAS;AAEzB,UAAMnuC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;AACA,UAAMi4C,KAAK,GAAG,KAAK9lD,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAd;;AACA,QAAI6J,IAAI,OAAR,EAAqC;AACnC,UAAIouC,KAAK,OAAT,EAAkC;AAEhC,aAAKz3B,QAAL,CAAcxY,OAAE,CAACta,MAAjB,EAAyB,CAAzB;AACD,OAHD,MAGO;AAEL,aAAK8yB,QAAL,CAAcxY,OAAE,CAACha,iBAAjB,EAAoC,CAApC;AACD;AACF,KARD,MAQO,IACL6b,IAAI,OAAJ,IACA,EAAEouC,KAAK,MAAL,IAA6BA,KAAK,MAApC,CAFK,EAGL;AAEA,WAAK5jD,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAAChb,WAApB;AACD,KAPM,MAOA;AACL,QAAE,KAAKqH,KAAL,CAAW2L,GAAb;AACA,WAAKoT,WAAL,CAAiBpL,OAAE,CAACjb,QAApB;AACD;AACF;;AAEDwzB,EAAAA,gBAAgB,CAACjvB,IAAD,EAAqB;AACnC,YAAQA,IAAR;AAIE;AACE,aAAKkmD,aAAL;AACA;;AAGF;AACE,UAAE,KAAKnjD,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAACxb,MAApB;AACA;;AACF;AACE,UAAE,KAAK6H,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAACvb,MAApB;AACA;;AACF;AACE,UAAE,KAAK4H,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAACrb,IAApB;AACA;;AACF;AACE,UAAE,KAAK0H,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAACtb,KAApB;AACA;;AACF;AACE,YACE,KAAKmG,SAAL,CAAe,gBAAf,KACA,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,SAFF,EAGE;AACA,cAAI,KAAKhN,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAKuN,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ0G,aAAM,CAACpJ,0CAFH,CAAN;AAID;;AAGD,eAAKjJ,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,eAAKoT,WAAL,CAAiBpL,OAAE,CAAChc,WAApB;AACD,SAdD,MAcO;AACL,YAAE,KAAKqI,KAAL,CAAW2L,GAAb;AACA,eAAKoT,WAAL,CAAiBpL,OAAE,CAAClc,QAApB;AACD;;AACD;;AACF;AACE,UAAE,KAAKuI,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC/b,QAApB;AACA;;AACF;AACE,YACE,KAAK4G,SAAL,CAAe,gBAAf,KACA,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,SAFF,EAGE;AACA,cAAI,KAAKhN,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAKuN,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ0G,aAAM,CAACrK,2CAFH,CAAN;AAID;;AAGD,eAAKhI,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,eAAKoT,WAAL,CAAiBpL,OAAE,CAAC5b,SAApB;AACD,SAdD,MAcO;AACL,YAAE,KAAKiI,KAAL,CAAW2L,GAAb;AACA,eAAKoT,WAAL,CAAiBpL,OAAE,CAAC7b,MAApB;AACD;;AACD;;AACF;AACE,UAAE,KAAKkI,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC1b,MAApB;AACA;;AAEF;AACE,YACE,KAAKuG,SAAL,CAAe,cAAf,KACA,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,QAFF,EAGE;AACA,eAAKwgB,QAAL,CAAcxY,OAAE,CAACnb,WAAjB,EAA8B,CAA9B;AACD,SALD,MAKO;AACL,YAAE,KAAKwH,KAAL,CAAW2L,GAAb;AACA,eAAKoT,WAAL,CAAiBpL,OAAE,CAACpb,KAApB;AACD;;AACD;;AAEF;AACE,aAAKorD,kBAAL;AACA;;AAEF;AACE,UAAE,KAAK3jD,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC5a,SAApB;AACA;;AAEF;AAAuB;AACrB,gBAAMyc,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,cAAI6J,IAAI,QAAJ,IAAiCA,IAAI,OAAzC,EAAoE;AAClE,iBAAKquC,eAAL,CAAqB,EAArB;AACA;AACD;;AAED,cAAIruC,IAAI,QAAJ,IAAiCA,IAAI,OAAzC,EAAoE;AAClE,iBAAKquC,eAAL,CAAqB,CAArB;AACA;AACD;;AAED,cAAIruC,IAAI,OAAJ,IAAiCA,IAAI,OAAzC,EAAoE;AAClE,iBAAKquC,eAAL,CAAqB,CAArB;AACA;AACD;AACF;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,aAAKT,UAAL,CAAgB,KAAhB;AACA;;AAGF;AACA;AACE,aAAKU,UAAL,CAAgB7mD,IAAhB;AACA;;AAOF;AACE,aAAKomD,eAAL;AACA;;AAEF;AACA;AACE,aAAK/xB,qBAAL,CAA2Br0B,IAA3B;AACA;;AAEF;AACA;AACE,aAAKw0B,kBAAL,CAAwBx0B,IAAxB;AACA;;AAEF;AACE,aAAKsmD,eAAL;AACA;;AAEF;AACA;AACE,aAAKC,kBAAL,CAAwBvmD,IAAxB;AACA;;AAEF;AACA;AACE,aAAK6/C,eAAL,CAAqB7/C,IAArB;AACA;;AAEF;AACA;AACE,aAAKymD,iBAAL,CAAuBzmD,IAAvB;AACA;;AAEF;AACE,aAAKkvB,QAAL,CAAcxY,OAAE,CAACla,KAAjB,EAAwB,CAAxB;AACA;;AAEF;AACE,UAAE,KAAKuG,KAAL,CAAW2L,GAAb;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC1a,EAApB;AACA;;AAEF;AACE,aAAK+pD,oBAAL;AACA;;AAEF;AACE,aAAKe,QAAL;AACA;;AAEF;AACE,YAAI1vC,iBAAiB,CAACpX,IAAD,CAArB,EAA6B;AAC3B,eAAK8mD,QAAL,CAAc9mD,IAAd;AACA;AACD;;AAhML;;AAmMA,UAAM,KAAKiP,KAAL,CACJ,KAAKlM,KAAL,CAAW2L,GADP,EAEJ0G,aAAM,CAAC9M,wBAFH,EAGJqI,MAAM,CAACq6B,aAAP,CAAqBhrC,IAArB,CAHI,CAAN;AAKD;;AAEDkvB,EAAAA,QAAQ,CAACnrB,IAAD,EAAkByiD,IAAlB,EAAsC;AAC5C,UAAM5b,GAAG,GAAG,KAAK/pC,KAAL,CAAW+Q,KAAX,CAAiB,KAAK7O,KAAL,CAAW2L,GAA5B,EAAiC,KAAK3L,KAAL,CAAW2L,GAAX,GAAiB83C,IAAlD,CAAZ;AACA,SAAKzjD,KAAL,CAAW2L,GAAX,IAAkB83C,IAAlB;AACA,SAAK1kC,WAAL,CAAiB/d,IAAjB,EAAuB6mC,GAAvB;AACD;;AAEDmc,EAAAA,UAAU,GAAS;AACjB,UAAMvmD,KAAK,GAAG,KAAKuC,KAAL,CAAWvC,KAAX,GAAmB,CAAjC;AACA,QAAIwmD,OAAJ,EAAa9qC,OAAb;AACA,QAAI;AAAExN,MAAAA;AAAF,QAAU,KAAK3L,KAAnB;;AACA,YAAS,EAAE2L,GAAX,EAAgB;AACd,UAAIA,GAAG,IAAI,KAAKhM,MAAhB,EAAwB;AACtB,cAAM,KAAKuM,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC3H,kBAAzB,CAAN;AACD;;AACD,YAAM68B,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB4K,GAAtB,CAAX;;AACA,UAAI3O,SAAS,CAACuqC,EAAD,CAAb,EAAmB;AACjB,cAAM,KAAKr7B,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC3H,kBAAzB,CAAN;AACD;;AACD,UAAIu5C,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,KAAV;AACD,OAFD,MAEO;AACL,YAAI1c,EAAE,OAAN,EAAwC;AACtCpuB,UAAAA,OAAO,GAAG,IAAV;AACD,SAFD,MAEO,IAAIouB,EAAE,OAAF,IAAuCpuB,OAA3C,EAAoD;AACzDA,UAAAA,OAAO,GAAG,KAAV;AACD,SAFM,MAEA,IAAIouB,EAAE,OAAF,IAA0B,CAACpuB,OAA/B,EAAwC;AAC7C;AACD;;AACD8qC,QAAAA,OAAO,GAAG1c,EAAE,OAAZ;AACD;AACF;;AACD,UAAM2c,OAAO,GAAG,KAAKpmD,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAjB,EAAwBkO,GAAxB,CAAhB;AACA,MAAEA,GAAF;AAEA,QAAIw4C,IAAI,GAAG,EAAX;;AAEA,WAAOx4C,GAAG,GAAG,KAAKhM,MAAlB,EAA0B;AACxB,YAAM0iD,EAAE,GAAG,KAAKD,cAAL,CAAoBz2C,GAApB,CAAX;AAEA,YAAMy4C,IAAI,GAAGx2C,MAAM,CAAC2G,YAAP,CAAoB8tC,EAApB,CAAb;;AAEA,UAAIjB,iBAAiB,CAAC1iD,GAAlB,CAAsB2jD,EAAtB,CAAJ,EAA+B;AAC7B,YAAI8B,IAAI,CAACjyB,QAAL,CAAckyB,IAAd,CAAJ,EAAyB;AACvB,eAAKl4C,KAAL,CAAWP,GAAG,GAAG,CAAjB,EAAoB0G,aAAM,CAAC3O,oBAA3B;AACD;AACF,OAJD,MAIO,IAAI8Q,gBAAgB,CAAC6tC,EAAD,CAAhB,IAAwBA,EAAE,OAA9B,EAAwD;AAC7D,aAAKn2C,KAAL,CAAWP,GAAG,GAAG,CAAjB,EAAoB0G,aAAM,CAACrM,oBAA3B;AACD,OAFM,MAEA;AACL;AACD;;AAED,QAAE2F,GAAF;AACAw4C,MAAAA,IAAI,IAAIC,IAAR;AACD;;AACD,SAAKpkD,KAAL,CAAW2L,GAAX,GAAiBA,GAAjB;AAEA,SAAKoT,WAAL,CAAiBpL,OAAE,CAACtc,MAApB,EAA4B;AAC1B8V,MAAAA,OAAO,EAAE+2C,OADiB;AAE1B92C,MAAAA,KAAK,EAAE+2C;AAFmB,KAA5B;AAID;;AAWDE,EAAAA,OAAO,CACLC,KADK,EAELC,GAFK,EAGLC,QAHK,EAILC,iBAA0B,GAAG,IAJxB,EAKU;AACf,UAAMhnD,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,UAAM+4C,iBAAiB,GACrBJ,KAAK,KAAK,EAAV,GACIjD,iCAAiC,CAACE,GADtC,GAEIF,iCAAiC,CAACC,SAHxC;AAIA,UAAMqD,eAAe,GACnBL,KAAK,KAAK,EAAV,GACI9C,+BAA+B,CAACD,GADpC,GAEI+C,KAAK,KAAK,EAAV,GACA9C,+BAA+B,CAACG,GADhC,GAEA2C,KAAK,KAAK,CAAV,GACA9C,+BAA+B,CAACE,GADhC,GAEAF,+BAA+B,CAACC,GAPtC;AASA,QAAI73B,OAAO,GAAG,KAAd;AACA,QAAIg7B,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIllD,CAAC,GAAG,CAAR,EAAW4N,CAAC,GAAGi3C,GAAG,IAAI,IAAP,GAAcM,QAAd,GAAyBN,GAA7C,EAAkD7kD,CAAC,GAAG4N,CAAtD,EAAyD,EAAE5N,CAA3D,EAA8D;AAC5D,YAAMzC,IAAI,GAAG,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAb;AACA,UAAIqT,GAAJ;;AAEA,UAAI/hB,IAAI,OAAR,EAAmC;AACjC,cAAM6nD,IAAI,GAAG,KAAKhnD,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;AACA,cAAM6J,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,CAAb;;AACA,YAAIg5C,eAAe,CAAC/5B,OAAhB,CAAwBpV,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,eAAKtJ,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAC1I,0BAAlC;AACD,SAFD,MAEO,IACL+6C,iBAAiB,CAAC95B,OAAlB,CAA0Bk6B,IAA1B,IAAkC,CAAC,CAAnC,IACAJ,iBAAiB,CAAC95B,OAAlB,CAA0BpV,IAA1B,IAAkC,CAAC,CADnC,IAEAuvC,MAAM,CAACC,KAAP,CAAaxvC,IAAb,CAHK,EAIL;AACA,eAAKtJ,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAAC1I,0BAAlC;AACD;;AAED,YAAI,CAAC86C,iBAAL,EAAwB;AACtB,eAAKv4C,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACtL,gCAAlC;AACD;;AAGD,UAAE,KAAK/G,KAAL,CAAW2L,GAAb;AACA;AACD;;AAED,UAAI1O,IAAI,MAAR,EAAkC;AAChC+hB,QAAAA,GAAG,GAAG/hB,IAAI,KAAJ,KAAN;AACD,OAFD,MAEO,IAAIA,IAAI,MAAR,EAAkC;AACvC+hB,QAAAA,GAAG,GAAG/hB,IAAI,KAAJ,KAAN;AACD,OAFM,MAEA,IAAI,SAAkBA,IAAlB,CAAJ,EAA6B;AAClC+hB,QAAAA,GAAG,GAAG/hB,IAAI,KAAV;AACD,OAFM,MAEA;AACL+hB,QAAAA,GAAG,GAAG6lC,QAAN;AACD;;AACD,UAAI7lC,GAAG,IAAIslC,KAAX,EAAkB;AAIhB,YAAI,KAAKztD,OAAL,CAAa2V,aAAb,IAA8BwS,GAAG,IAAI,CAAzC,EAA4C;AAC1CA,UAAAA,GAAG,GAAG,CAAN;AACA,eAAK9S,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAX,GAAmBiC,CAAnB,GAAuB,CAAlC,EAAqC2S,aAAM,CAACvN,YAA5C,EAA0Dw/C,KAA1D;AACD,SAHD,MAGO,IAAIE,QAAJ,EAAc;AACnBxlC,UAAAA,GAAG,GAAG,CAAN;AACA4K,UAAAA,OAAO,GAAG,IAAV;AACD,SAHM,MAGA;AACL;AACD;AACF;;AACD,QAAE,KAAK5pB,KAAL,CAAW2L,GAAb;AACAi5C,MAAAA,KAAK,GAAGA,KAAK,GAAGN,KAAR,GAAgBtlC,GAAxB;AACD;;AACD,QACE,KAAKhf,KAAL,CAAW2L,GAAX,KAAmBlO,KAAnB,IACC8mD,GAAG,IAAI,IAAP,IAAe,KAAKvkD,KAAL,CAAW2L,GAAX,GAAiBlO,KAAjB,KAA2B8mD,GAD3C,IAEA36B,OAHF,EAIE;AACA,aAAO,IAAP;AACD;;AAED,WAAOg7B,KAAP;AACD;;AAEDf,EAAAA,eAAe,CAACS,KAAD,EAAsB;AACnC,UAAM7mD,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,QAAIs5C,QAAQ,GAAG,KAAf;AAEA,SAAKjlD,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,UAAMqT,GAAG,GAAG,KAAKqlC,OAAL,CAAaC,KAAb,CAAZ;;AACA,QAAItlC,GAAG,IAAI,IAAX,EAAiB;AACf,WAAK9S,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiC4U,aAAM,CAACvN,YAAxC,EAAsDw/C,KAAtD;AACD;;AACD,UAAM9uC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAb;;AAEA,QAAI6J,IAAI,QAAR,EAAmC;AACjC,QAAE,KAAKxV,KAAL,CAAW2L,GAAb;AACAs5C,MAAAA,QAAQ,GAAG,IAAX;AACD,KAHD,MAGO,IAAIzvC,IAAI,QAAR,EAAmC;AACxC,YAAM,KAAKtJ,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAACxN,cAAzB,CAAN;AACD;;AAED,QAAIwP,iBAAiB,CAAC,KAAK+tC,cAAL,CAAoB,KAAKpiD,KAAL,CAAW2L,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACvL,gBAAlC,CAAN;AACD;;AAED,QAAIm+C,QAAJ,EAAc;AACZ,YAAMpd,GAAG,GAAG,KAAK/pC,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW2L,GAAnC,EAAwCW,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;AACA,WAAKyS,WAAL,CAAiBpL,OAAE,CAACxc,MAApB,EAA4B0wC,GAA5B;AACA;AACD;;AAED,SAAK9oB,WAAL,CAAiBpL,OAAE,CAACzc,GAApB,EAAyB8nB,GAAzB;AACD;;AAIDokC,EAAAA,UAAU,CAAC8B,aAAD,EAA+B;AACvC,UAAMznD,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,QAAIw5C,OAAO,GAAG,KAAd;AACA,QAAIF,QAAQ,GAAG,KAAf;AACA,QAAIG,SAAS,GAAG,KAAhB;AACA,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAI,CAACJ,aAAD,IAAkB,KAAKb,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;AAC/C,WAAKn4C,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAChN,aAAzB;AACD;;AACD,UAAMkgD,cAAc,GAClB,KAAKvlD,KAAL,CAAW2L,GAAX,GAAiBlO,KAAjB,IAA0B,CAA1B,IACA,KAAKK,KAAL,CAAWiD,UAAX,CAAsBtD,KAAtB,QAFF;;AAIA,QAAI8nD,cAAJ,EAAoB;AAClB,YAAMC,OAAO,GAAG,KAAK1nD,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW2L,GAAnC,CAAhB;AACA,WAAK85C,sBAAL,CAA4BhoD,KAA5B,EAAmC4U,aAAM,CAAC1J,kBAA1C;;AACA,UAAI,CAAC,KAAK3I,KAAL,CAAW0U,MAAhB,EAAwB;AAEtB,cAAMgxC,aAAa,GAAGF,OAAO,CAAC56B,OAAR,CAAgB,GAAhB,CAAtB;;AACA,YAAI86B,aAAa,GAAG,CAApB,EAAuB;AACrB,eAAKx5C,KAAL,CAAWw5C,aAAa,GAAGjoD,KAA3B,EAAkC4U,aAAM,CAACrH,yBAAzC;AACD;AACF;;AACDs6C,MAAAA,OAAO,GAAGC,cAAc,IAAI,CAAC,OAAOjxC,IAAP,CAAYkxC,OAAZ,CAA7B;AACD;;AAED,QAAIhwC,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;;AACA,QAAI6J,IAAI,OAAJ,IAA0B,CAAC8vC,OAA/B,EAAwC;AACtC,QAAE,KAAKtlD,KAAL,CAAW2L,GAAb;AACA,WAAK04C,OAAL,CAAa,EAAb;AACAc,MAAAA,OAAO,GAAG,IAAV;AACA3vC,MAAAA,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAP;AACD;;AAED,QACE,CAAC6J,IAAI,OAAJ,IAAiCA,IAAI,QAAtC,KACA,CAAC8vC,OAFH,EAGE;AACA9vC,MAAAA,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW2L,GAAnC,CAAP;;AACA,UAAI6J,IAAI,OAAJ,IAA+BA,IAAI,OAAvC,EAA4D;AAC1D,UAAE,KAAKxV,KAAL,CAAW2L,GAAb;AACD;;AACD,UAAI,KAAK04C,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B;AAC7B,aAAKn4C,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC/M,wBAAzB;AACD;;AACD6/C,MAAAA,OAAO,GAAG,IAAV;AACAE,MAAAA,WAAW,GAAG,IAAd;AACA7vC,MAAAA,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAP;AACD;;AAED,QAAI6J,IAAI,QAAR,EAAmC;AAGjC,UAAI2vC,OAAO,IAAII,cAAf,EAA+B;AAC7B,aAAKr5C,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC1N,oBAAzB;AACD;;AACD,QAAE,KAAK3E,KAAL,CAAW2L,GAAb;AACAs5C,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAIzvC,IAAI,QAAR,EAAmC;AACjC,WAAKgpC,YAAL,CAAkB,SAAlB,EAA6B,KAAKx+C,KAAL,CAAW2L,GAAxC;;AACA,UAAI05C,WAAW,IAAIE,cAAnB,EAAmC;AACjC,aAAKr5C,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAACxN,cAAzB;AACD;;AACD,QAAE,KAAK7E,KAAL,CAAW2L,GAAb;AACAy5C,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAI/wC,iBAAiB,CAAC,KAAK+tC,cAAL,CAAoB,KAAKpiD,KAAL,CAAW2L,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACvL,gBAAlC,CAAN;AACD;;AAGD,UAAM+gC,GAAG,GAAG,KAAK/pC,KAAL,CAAW+Q,KAAX,CAAiBpR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW2L,GAAnC,EAAwCW,OAAxC,CAAgD,QAAhD,EAA0D,EAA1D,CAAZ;;AAEA,QAAI24C,QAAJ,EAAc;AACZ,WAAKlmC,WAAL,CAAiBpL,OAAE,CAACxc,MAApB,EAA4B0wC,GAA5B;AACA;AACD;;AAED,QAAIud,SAAJ,EAAe;AACb,WAAKrmC,WAAL,CAAiBpL,OAAE,CAACvc,OAApB,EAA6BywC,GAA7B;AACA;AACD;;AAED,UAAM7oB,GAAG,GAAGsmC,OAAO,GAAGpd,QAAQ,CAACL,GAAD,EAAM,CAAN,CAAX,GAAsB8d,UAAU,CAAC9d,GAAD,CAAnD;AACA,SAAK9oB,WAAL,CAAiBpL,OAAE,CAACzc,GAApB,EAAyB8nB,GAAzB;AACD;;AAID4mC,EAAAA,aAAa,CAACC,cAAD,EAAyC;AACpD,UAAMte,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;AACA,QAAI1O,IAAJ;;AAEA,QAAIsqC,EAAE,QAAN,EAAqC;AACnC,YAAMue,OAAO,GAAG,EAAE,KAAK9lD,KAAL,CAAW2L,GAA7B;AACA1O,MAAAA,IAAI,GAAG,KAAK8oD,WAAL,CACL,KAAKjoD,KAAL,CAAW8sB,OAAX,CAAmB,GAAnB,EAAwB,KAAK5qB,KAAL,CAAW2L,GAAnC,IAA0C,KAAK3L,KAAL,CAAW2L,GADhD,EAEL,IAFK,EAGLk6C,cAHK,CAAP;AAKA,QAAE,KAAK7lD,KAAL,CAAW2L,GAAb;;AACA,UAAI1O,IAAI,KAAK,IAAT,IAAiBA,IAAI,GAAG,QAA5B,EAAsC;AACpC,YAAI4oD,cAAJ,EAAoB;AAClB,eAAK35C,KAAL,CAAW45C,OAAX,EAAoBzzC,aAAM,CAACzN,gBAA3B;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF,KAfD,MAeO;AACL3H,MAAAA,IAAI,GAAG,KAAK8oD,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAP;AACD;;AACD,WAAO5oD,IAAP;AACD;;AAED6mD,EAAAA,UAAU,CAAClc,KAAD,EAAsB;AAC9B,QAAI1hB,GAAG,GAAG,EAAV;AAAA,QACEohB,UAAU,GAAG,EAAE,KAAKtnC,KAAL,CAAW2L,GAD5B;;AAEA,aAAS;AACP,UAAI,KAAK3L,KAAL,CAAW2L,GAAX,IAAkB,KAAKhM,MAA3B,EAAmC;AACjC,cAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC1H,kBAApC,CAAN;AACD;;AACD,YAAM48B,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;AACA,UAAI47B,EAAE,KAAKK,KAAX,EAAkB;;AAClB,UAAIL,EAAE,OAAN,EAAgC;AAC9BrhB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AAEAua,QAAAA,GAAG,IAAI,KAAK8/B,eAAL,CAAqB,KAArB,CAAP;AACA1e,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OALD,MAKO,IACL47B,EAAE,SAAF,IACAA,EAAE,SAFG,EAGL;AACA,UAAE,KAAKvnC,KAAL,CAAW2L,GAAb;AACA,UAAE,KAAK3L,KAAL,CAAW0kC,OAAb;AACA,aAAK1kC,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW2L,GAAlC;AACD,OAPM,MAOA,IAAI3O,SAAS,CAACuqC,EAAD,CAAb,EAAmB;AACxB,cAAM,KAAKr7B,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC1H,kBAApC,CAAN;AACD,OAFM,MAEA;AACL,UAAE,KAAK3K,KAAL,CAAW2L,GAAb;AACD;AACF;;AACDua,IAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAX,EAA7B,CAAP;AACA,SAAKoT,WAAL,CAAiBpL,OAAE,CAACrc,MAApB,EAA4B4uB,GAA5B;AACD;;AAIDw8B,EAAAA,aAAa,GAAS;AACpB,QAAIx8B,GAAG,GAAG,EAAV;AAAA,QACEohB,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAD1B;AAAA,QAEEs6C,eAAe,GAAG,KAFpB;;AAGA,aAAS;AACP,UAAI,KAAKjmD,KAAL,CAAW2L,GAAX,IAAkB,KAAKhM,MAA3B,EAAmC;AACjC,cAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACzH,oBAApC,CAAN;AACD;;AACD,YAAM28B,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAX;;AACA,UACE47B,EAAE,OAAF,IACCA,EAAE,OAAF,IACC,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAX,GAAiB,CAAvC,SAHJ,EAKE;AACA,YAAI,KAAK3L,KAAL,CAAW2L,GAAX,KAAmB,KAAK3L,KAAL,CAAWvC,KAA9B,IAAuC,KAAKQ,KAAL,CAAW0V,OAAE,CAAC9a,QAAd,CAA3C,EAAoE;AAClE,cAAI0uC,EAAE,OAAN,EAAiC;AAC/B,iBAAKvnC,KAAL,CAAW2L,GAAX,IAAkB,CAAlB;AACA,iBAAKoT,WAAL,CAAiBpL,OAAE,CAAC3a,YAApB;AACA;AACD,WAJD,MAIO;AACL,cAAE,KAAKgH,KAAL,CAAW2L,GAAb;AACA,iBAAKoT,WAAL,CAAiBpL,OAAE,CAAC5a,SAApB;AACA;AACD;AACF;;AACDmtB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACA,aAAKoT,WAAL,CAAiBpL,OAAE,CAAC9a,QAApB,EAA8BotD,eAAe,GAAG,IAAH,GAAU//B,GAAvD;AACA;AACD;;AACD,UAAIqhB,EAAE,OAAN,EAAgC;AAC9BrhB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACA,cAAMs4C,OAAO,GAAG,KAAK+B,eAAL,CAAqB,IAArB,CAAhB;;AACA,YAAI/B,OAAO,KAAK,IAAhB,EAAsB;AACpBgC,UAAAA,eAAe,GAAG,IAAlB;AACD,SAFD,MAEO;AACL//B,UAAAA,GAAG,IAAI+9B,OAAP;AACD;;AACD3c,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OATD,MASO,IAAI3O,SAAS,CAACuqC,EAAD,CAAb,EAAmB;AACxBrhB,QAAAA,GAAG,IAAI,KAAKpoB,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAP;AACA,UAAE,KAAK3L,KAAL,CAAW2L,GAAb;;AACA,gBAAQ47B,EAAR;AACE;AACE,gBAAI,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,QAAJ,EAAkE;AAChE,gBAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;;AAEH;AACEua,YAAAA,GAAG,IAAI,IAAP;AACA;;AACF;AACEA,YAAAA,GAAG,IAAItY,MAAM,CAAC2G,YAAP,CAAoBgzB,EAApB,CAAP;AACA;AAXJ;;AAaA,UAAE,KAAKvnC,KAAL,CAAW0kC,OAAb;AACA,aAAK1kC,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW2L,GAAlC;AACA27B,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OAnBM,MAmBA;AACL,UAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;AACF;AACF;;AAED85C,EAAAA,sBAAsB,CAAC95C,GAAD,EAAcU,OAAd,EAAsC;AAC1D,QAAI,KAAKrM,KAAL,CAAW0U,MAAX,IAAqB,CAAC,KAAK1U,KAAL,CAAW0lC,YAAX,CAAwBhnC,GAAxB,CAA4BiN,GAA5B,CAA1B,EAA4D;AAC1D,WAAKO,KAAL,CAAWP,GAAX,EAAgBU,OAAhB;AACD,KAFD,MAEO;AACL,WAAKrM,KAAL,CAAW0lC,YAAX,CAAwB3uC,GAAxB,CAA4B4U,GAA5B,EAAiCU,OAAjC;AACD;AACF;;AAGD25C,EAAAA,eAAe,CAACE,UAAD,EAAqC;AAClD,UAAML,cAAc,GAAG,CAACK,UAAxB;AACA,UAAM3e,EAAE,GAAG,KAAKzpC,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW2L,GAAnC,CAAX;AACA,MAAE,KAAK3L,KAAL,CAAW2L,GAAb;;AACA,YAAQ47B,EAAR;AACE;AACE,eAAO,IAAP;;AACF;AACE,eAAO,IAAP;;AACF;AAA2B;AACzB,gBAAMtqC,IAAI,GAAG,KAAK8oD,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAb;AACA,iBAAO5oD,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuB2Q,MAAM,CAAC2G,YAAP,CAAoBtX,IAApB,CAA9B;AACD;;AACD;AAA2B;AACzB,gBAAMA,IAAI,GAAG,KAAK2oD,aAAL,CAAmBC,cAAnB,CAAb;AACA,iBAAO5oD,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuB2Q,MAAM,CAACq6B,aAAP,CAAqBhrC,IAArB,CAA9B;AACD;;AACD;AACE,eAAO,IAAP;;AACF;AACE,eAAO,IAAP;;AACF;AACE,eAAO,QAAP;;AACF;AACE,eAAO,IAAP;;AACF;AACE,YAAI,KAAKa,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,QAAJ,EAAkE;AAChE,YAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACD;;AAEH;AACE,aAAK3L,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW2L,GAAlC;AACA,UAAE,KAAK3L,KAAL,CAAW0kC,OAAb;;AAEF;AACA;AACE,eAAO,EAAP;;AACF;AACA;AACE,YAAIwhB,UAAJ,EAAgB;AACd,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,eAAKT,sBAAL,CACE,KAAKzlD,KAAL,CAAW2L,GAAX,GAAiB,CADnB,EAEE0G,aAAM,CAAC3J,mBAFT;AAID;;AAEH;AACE,YAAI6+B,EAAE,MAAF,IAA0BA,EAAE,MAAhC,EAAsD;AACpD,gBAAMue,OAAO,GAAG,KAAK9lD,KAAL,CAAW2L,GAAX,GAAiB,CAAjC;AACA,gBAAM1N,KAAK,GAAG,KAAKH,KAAL,CACXkqC,MADW,CACJ,KAAKhoC,KAAL,CAAW2L,GAAX,GAAiB,CADb,EACgB,CADhB,EAEX1N,KAFW,CAEL,SAFK,CAAd;AAMA,cAAIkoD,QAAQ,GAAGloD,KAAK,CAAC,CAAD,CAApB;AAEA,cAAImoD,KAAK,GAAGle,QAAQ,CAACie,QAAD,EAAW,CAAX,CAApB;;AACA,cAAIC,KAAK,GAAG,GAAZ,EAAiB;AACfD,YAAAA,QAAQ,GAAGA,QAAQ,CAACt3C,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAu3C,YAAAA,KAAK,GAAGle,QAAQ,CAACie,QAAD,EAAW,CAAX,CAAhB;AACD;;AACD,eAAKnmD,KAAL,CAAW2L,GAAX,IAAkBw6C,QAAQ,CAACxmD,MAAT,GAAkB,CAApC;AACA,gBAAM6V,IAAI,GAAG,KAAK1X,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW2L,GAAjC,CAAb;;AACA,cACEw6C,QAAQ,KAAK,GAAb,IACA3wC,IAAI,OADJ,IAEAA,IAAI,OAHN,EAIE;AACA,gBAAI0wC,UAAJ,EAAgB;AACd,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,mBAAKT,sBAAL,CAA4BK,OAA5B,EAAqCzzC,aAAM,CAAC3J,mBAA5C;AACD;AACF;;AAED,iBAAOkF,MAAM,CAAC2G,YAAP,CAAoB6xC,KAApB,CAAP;AACD;;AAED,eAAOx4C,MAAM,CAAC2G,YAAP,CAAoBgzB,EAApB,CAAP;AA7EJ;AA+ED;;AAIDwe,EAAAA,WAAW,CACTxB,GADS,EAETC,QAFS,EAGTqB,cAHS,EAIM;AACf,UAAMC,OAAO,GAAG,KAAK9lD,KAAL,CAAW2L,GAA3B;AACA,UAAM06C,CAAC,GAAG,KAAKhC,OAAL,CAAa,EAAb,EAAiBE,GAAjB,EAAsBC,QAAtB,EAAgC,KAAhC,CAAV;;AACA,QAAI6B,CAAC,KAAK,IAAV,EAAgB;AACd,UAAIR,cAAJ,EAAoB;AAClB,aAAK35C,KAAL,CAAW45C,OAAX,EAAoBzzC,aAAM,CAACtN,qBAA3B;AACD,OAFD,MAEO;AACL,aAAK/E,KAAL,CAAW2L,GAAX,GAAiBm6C,OAAO,GAAG,CAA3B;AACD;AACF;;AACD,WAAOO,CAAP;AACD;;AAWDr6B,EAAAA,SAAS,CAACs6B,SAAD,EAAmC;AAC1C,SAAKtmD,KAAL,CAAWylC,WAAX,GAAyB,KAAzB;AACA,QAAIzwB,IAAI,GAAG,EAAX;AACA,UAAMvX,KAAK,GAAG,KAAKuC,KAAL,CAAW2L,GAAzB;AACA,QAAI27B,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAA5B;;AACA,QAAI26C,SAAS,KAAKpnD,SAAlB,EAA6B;AAC3B,WAAKc,KAAL,CAAW2L,GAAX,IAAkB26C,SAAS,IAAI,MAAb,GAAsB,CAAtB,GAA0B,CAA5C;AACD;;AAED,WAAO,KAAKtmD,KAAL,CAAW2L,GAAX,GAAiB,KAAKhM,MAA7B,EAAqC;AACnC,YAAM4nC,EAAE,GAAG,KAAK6a,cAAL,CAAoB,KAAKpiD,KAAL,CAAW2L,GAA/B,CAAX;;AACA,UAAI6I,gBAAgB,CAAC+yB,EAAD,CAApB,EAA0B;AACxB,aAAKvnC,KAAL,CAAW2L,GAAX,IAAkB47B,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAArC;AACD,OAFD,MAEO,IAAIA,EAAE,OAAN,EAAgC;AACrC,aAAKvnC,KAAL,CAAWylC,WAAX,GAAyB,IAAzB;AAEAzwB,QAAAA,IAAI,IAAI,KAAKlX,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAR;AACA,cAAM46C,QAAQ,GAAG,KAAKvmD,KAAL,CAAW2L,GAA5B;AACA,cAAM66C,eAAe,GACnB,KAAKxmD,KAAL,CAAW2L,GAAX,KAAmBlO,KAAnB,GAA2B4W,iBAA3B,GAA+CG,gBADjD;;AAGA,YAAI,KAAK1W,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW2L,GAAnC,SAAJ,EAAsE;AACpE,eAAKO,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACjM,oBAAlC;AACAkhC,UAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAX,GAAiB,CAA9B;AACA;AACD;;AAED,UAAE,KAAK3L,KAAL,CAAW2L,GAAb;AACA,cAAM86C,GAAG,GAAG,KAAKb,aAAL,CAAmB,IAAnB,CAAZ;;AACA,YAAIa,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,CAACD,eAAe,CAACC,GAAD,CAApB,EAA2B;AACzB,iBAAKv6C,KAAL,CAAWq6C,QAAX,EAAqBl0C,aAAM,CAACzO,0BAA5B;AACD;;AAEDoR,UAAAA,IAAI,IAAIpH,MAAM,CAACq6B,aAAP,CAAqBwe,GAArB,CAAR;AACD;;AACDnf,QAAAA,UAAU,GAAG,KAAKtnC,KAAL,CAAW2L,GAAxB;AACD,OAxBM,MAwBA;AACL;AACD;AACF;;AACD,WAAOqJ,IAAI,GAAG,KAAKlX,KAAL,CAAW+Q,KAAX,CAAiBy4B,UAAjB,EAA6B,KAAKtnC,KAAL,CAAW2L,GAAxC,CAAd;AACD;;AAKDo4C,EAAAA,QAAQ,CAACuC,SAAD,EAAiC;AACvC,UAAMtxC,IAAI,GAAG,KAAKgX,SAAL,CAAes6B,SAAf,CAAb;AACA,UAAMtlD,IAAI,GAAG0lD,UAAY,CAAC7nD,GAAb,CAAiBmW,IAAjB,KAA0BrB,OAAE,CAAC/c,IAA1C;AACA,SAAKmoB,WAAL,CAAiB/d,IAAjB,EAAuBgU,IAAvB;AACD;;AAEDgtC,EAAAA,mBAAmB,GAAS;AAC1B,UAAM1M,EAAE,GAAG,KAAKt1C,KAAL,CAAWgB,IAAX,CAAgB3K,OAA3B;;AACA,QAAIi/C,EAAE,IAAI,KAAKt1C,KAAL,CAAWylC,WAArB,EAAkC;AAChC,WAAKv5B,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACpN,0BAApC,EAAgEqwC,EAAhE;AACD;AACF;;AAID9+C,EAAAA,aAAa,CAACozC,QAAD,EAA4B;AAAA;;AACvC,sDAAK5pC,KAAL,CAAWgB,IAAX,EAAgBxK,aAAhB,kEAAgC,KAAKwJ,KAAL,CAAW4T,OAA3C;AACD;;AAx7CiD;;AC9G7C,MAAM+yC,UAAN,CAAiB;AAAA;AAAA,SAEtBC,YAFsB,GAEM,IAAIhyC,GAAJ,EAFN;AAAA,SAKtBiyC,aALsB,GAK0B,IAAInwD,GAAJ,EAL1B;AAAA,SAStBoiB,qBATsB,GASuB,IAAIpiB,GAAJ,EATvB;AAAA;;AAAA;AAYT,MAAMowD,iBAAN,CAAwB;AAKrC5wD,EAAAA,WAAW,CAACgW,KAAD,EAAuB;AAAA,SAJlCie,KAIkC,GAJP,EAIO;AAAA,SAFlCrR,qBAEkC,GAFW,IAAIpiB,GAAJ,EAEX;AAChC,SAAKwV,KAAL,GAAaA,KAAb;AACD;;AAEDqJ,EAAAA,OAAO,GAAe;AACpB,WAAO,KAAK4U,KAAL,CAAW,KAAKA,KAAL,CAAWxqB,MAAX,GAAoB,CAA/B,CAAP;AACD;;AAEDga,EAAAA,KAAK,GAAG;AACN,SAAKwQ,KAAL,CAAWlqB,IAAX,CAAgB,IAAI0mD,UAAJ,EAAhB;AACD;;AAED/sC,EAAAA,IAAI,GAAG;AACL,UAAMmtC,aAAa,GAAG,KAAK58B,KAAL,CAAWtW,GAAX,EAAtB;AAKA,UAAM0B,OAAO,GAAG,KAAKA,OAAL,EAAhB;;AAGA,SAAK,MAAM,CAAC3e,IAAD,EAAO+U,GAAP,CAAX,IAA0Bs6B,KAAK,CAAC+gB,IAAN,CAAWD,aAAa,CAACjuC,qBAAzB,CAA1B,EAA2E;AACzE,UAAIvD,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAACuD,qBAAR,CAA8Bpa,GAA9B,CAAkC9H,IAAlC,CAAL,EAA8C;AAC5C2e,UAAAA,OAAO,CAACuD,qBAAR,CAA8B/hB,GAA9B,CAAkCH,IAAlC,EAAwC+U,GAAxC;AACD;AACF,OAJD,MAIO;AACL,aAAKO,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAAC5M,6BAAvB,EAAsD7O,IAAtD;AACD;AACF;AACF;;AAEDqwD,EAAAA,kBAAkB,CAChBrwD,IADgB,EAEhB8wB,WAFgB,EAGhB/b,GAHgB,EAIhB;AACA,UAAMu7C,UAAU,GAAG,KAAK3xC,OAAL,EAAnB;AACA,QAAI4xC,SAAS,GAAGD,UAAU,CAACN,YAAX,CAAwBloD,GAAxB,CAA4B9H,IAA5B,CAAhB;;AAEA,QAAI8wB,WAAW,GAAGzP,2BAAlB,EAA+C;AAC7C,YAAMmvC,QAAQ,GAAGD,SAAS,IAAID,UAAU,CAACL,aAAX,CAAyBhoD,GAAzB,CAA6BjI,IAA7B,CAA9B;;AACA,UAAIwwD,QAAJ,EAAc;AACZ,cAAMC,SAAS,GAAGD,QAAQ,GAAGtvC,yBAA7B;AACA,cAAMwvC,SAAS,GAAG5/B,WAAW,GAAG5P,yBAAhC;AAEA,cAAMyvC,OAAO,GAAGH,QAAQ,GAAGnvC,2BAA3B;AACA,cAAMuvC,OAAO,GAAG9/B,WAAW,GAAGzP,2BAA9B;AAKAkvC,QAAAA,SAAS,GAAGI,OAAO,KAAKC,OAAZ,IAAuBH,SAAS,KAAKC,SAAjD;AAEA,YAAI,CAACH,SAAL,EAAgBD,UAAU,CAACL,aAAX,CAAyB1sC,MAAzB,CAAgCvjB,IAAhC;AACjB,OAbD,MAaO,IAAI,CAACuwD,SAAL,EAAgB;AACrBD,QAAAA,UAAU,CAACL,aAAX,CAAyB9vD,GAAzB,CAA6BH,IAA7B,EAAmC8wB,WAAnC;AACD;AACF;;AAED,QAAIy/B,SAAJ,EAAe;AACb,WAAKj7C,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAACvK,wBAAvB,EAAiDlR,IAAjD;AACD;;AAEDswD,IAAAA,UAAU,CAACN,YAAX,CAAwB3sC,GAAxB,CAA4BrjB,IAA5B;AACAswD,IAAAA,UAAU,CAACpuC,qBAAX,CAAiCqB,MAAjC,CAAwCvjB,IAAxC;AACD;;AAED6wD,EAAAA,cAAc,CAAC7wD,IAAD,EAAe+U,GAAf,EAA4B;AACxC,QAAIu7C,UAAJ;;AACA,SAAKA,UAAL,IAAmB,KAAK/8B,KAAxB,EAA+B;AAC7B,UAAI+8B,UAAU,CAACN,YAAX,CAAwBloD,GAAxB,CAA4B9H,IAA5B,CAAJ,EAAuC;AACxC;;AAED,QAAIswD,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACpuC,qBAAX,CAAiC/hB,GAAjC,CAAqCH,IAArC,EAA2C+U,GAA3C;AACD,KAFD,MAEO;AAEL,WAAKO,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAAC5M,6BAAvB,EAAsD7O,IAAtD;AACD;AACF;;AArFoC;;AC4BvC,MAAM8wD,WAAW,GAAG,CAApB;AAAA,MACEC,+BAA+B,GAAG,CADpC;AAAA,MAEEC,oCAAoC,GAAG,CAFzC;AAAA,MAGEC,qBAAqB,GAAG,CAH1B;;AAOA,MAAMC,eAAN,CAAsB;AAGpB5xD,EAAAA,WAAW,CAAC8K,IAAyB,GAAG0mD,WAA7B,EAA0C;AAAA,SAFrD1mD,IAEqD;AACnD,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAED+mD,EAAAA,8BAA8B,GAAG;AAC/B,WACE,KAAK/mD,IAAL,KAAc4mD,oCAAd,IACA,KAAK5mD,IAAL,KAAc2mD,+BAFhB;AAID;;AAEDK,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKhnD,IAAL,KAAc6mD,qBAArB;AACD;;AAhBmB;;AAmBtB,MAAMI,qBAAN,SAAoCH,eAApC,CAAoD;AAElD5xD,EAAAA,WAAW,CAAC8K,IAAD,EAAc;AACvB,UAAMA,IAAN;AADuB,SADzByL,MACyB,GADoC,IAAI/V,GAAJ,EACpC;AAExB;;AACDwxD,EAAAA,sBAAsB,CAACv8C,GAAD,EAAc9S,QAAd,EAAuC;AAC3D,SAAK4T,MAAL,CAAY1V,GAAZ,CAAgB4U,GAAhB,EAAqB9S,QAArB;AACD;;AACDsvD,EAAAA,qBAAqB,CAACx8C,GAAD,EAAc;AACjC,SAAKc,MAAL,CAAY0N,MAAZ,CAAmBxO,GAAnB;AACD;;AACDy8C,EAAAA,aAAa,CAACC,QAAD,EAA2D;AACtE,SAAK57C,MAAL,CAAYlB,OAAZ,CAAoB88C,QAApB;AACD;;AAbiD;;AAgBrC,MAAMC,sBAAN,CAA6B;AAG1CpyD,EAAAA,WAAW,CAACgW,KAAD,EAAuB;AAAA,SAFlCie,KAEkC,GAFF,CAAC,IAAI29B,eAAJ,EAAD,CAEE;AAChC,SAAK57C,KAAL,GAAaA,KAAb;AACD;;AACDyN,EAAAA,KAAK,CAACE,KAAD,EAAyB;AAC5B,SAAKsQ,KAAL,CAAWlqB,IAAX,CAAgB4Z,KAAhB;AACD;;AAEDD,EAAAA,IAAI,GAAG;AACL,SAAKuQ,KAAL,CAAWtW,GAAX;AACD;;AAYD00C,EAAAA,+BAA+B,CAAC58C,GAAD,EAAc9S,QAAd,EAA6C;AAC1E,UAAM;AAAEsxB,MAAAA;AAAF,QAAY,IAAlB;AACA,QAAIzqB,CAAC,GAAGyqB,KAAK,CAACxqB,MAAN,GAAe,CAAvB;AACA,QAAIka,KAAsB,GAAGsQ,KAAK,CAACzqB,CAAD,CAAlC;;AACA,WAAO,CAACma,KAAK,CAACmuC,+BAAN,EAAR,EAAiD;AAC/C,UAAInuC,KAAK,CAACkuC,8BAAN,EAAJ,EAA4C;AAE1CluC,QAAAA,KAAK,CAACquC,sBAAN,CAA6Bv8C,GAA7B,EAAkC9S,QAAlC;AACD,OAHD,MAGO;AAGL;AACD;;AACDghB,MAAAA,KAAK,GAAGsQ,KAAK,CAAC,EAAEzqB,CAAH,CAAb;AACD;;AAED,SAAKwM,KAAL,CAAWP,GAAX,EAAgB9S,QAAhB;AACD;;AAuBD2vD,EAAAA,kCAAkC,CAChC78C,GADgC,EAEhC9S,QAFgC,EAG1B;AACN,UAAM;AAAEsxB,MAAAA;AAAF,QAAY,IAAlB;AACA,UAAMtQ,KAAsB,GAAGsQ,KAAK,CAACA,KAAK,CAACxqB,MAAN,GAAe,CAAhB,CAApC;;AACA,QAAIka,KAAK,CAACmuC,+BAAN,EAAJ,EAA6C;AAC3C,WAAK97C,KAAL,CAAWP,GAAX,EAAgB9S,QAAhB;AACD,KAFD,MAEO,IAAIghB,KAAK,CAACkuC,8BAAN,EAAJ,EAA4C;AAEjDluC,MAAAA,KAAK,CAACquC,sBAAN,CAA6Bv8C,GAA7B,EAAkC9S,QAAlC;AACD,KAHM,MAGA;AACL;AACD;AACF;;AAWD4vD,EAAAA,+BAA+B,CAAC98C,GAAD,EAAc9S,QAAd,EAA6C;AAC1E,UAAM;AAAEsxB,MAAAA;AAAF,QAAY,IAAlB;AACA,QAAIzqB,CAAC,GAAGyqB,KAAK,CAACxqB,MAAN,GAAe,CAAvB;AACA,QAAIka,KAAsB,GAAGsQ,KAAK,CAACzqB,CAAD,CAAlC;;AACA,WAAOma,KAAK,CAACkuC,8BAAN,EAAP,EAA+C;AAC7C,UAAIluC,KAAK,CAAC7Y,IAAN,KAAe4mD,oCAAnB,EAAyD;AAEvD/tC,QAAAA,KAAK,CAACquC,sBAAN,CAA6Bv8C,GAA7B,EAAkC9S,QAAlC;AACD;;AACDghB,MAAAA,KAAK,GAAGsQ,KAAK,CAAC,EAAEzqB,CAAH,CAAb;AACD;AACF;;AAEDgpD,EAAAA,iBAAiB,GAAS;AACxB,UAAM;AAAEv+B,MAAAA;AAAF,QAAY,IAAlB;AACA,UAAM1Q,YAAY,GAAG0Q,KAAK,CAACA,KAAK,CAACxqB,MAAN,GAAe,CAAhB,CAA1B;AACA,QAAI,CAAC8Z,YAAY,CAACsuC,8BAAb,EAAL,EAAoD;AAEpDtuC,IAAAA,YAAY,CAAC2uC,aAAb,CAA2B,CAACvvD,QAAD,EAAW8S,GAAX,KAAmB;AAE5C,WAAKO,KAAL,CAAWP,GAAX,EAAgB9S,QAAhB;AAEA,UAAI6G,CAAC,GAAGyqB,KAAK,CAACxqB,MAAN,GAAe,CAAvB;AACA,UAAIka,KAAK,GAAGsQ,KAAK,CAACzqB,CAAD,CAAjB;;AACA,aAAOma,KAAK,CAACkuC,8BAAN,EAAP,EAA+C;AAE7CluC,QAAAA,KAAK,CAACsuC,qBAAN,CAA4Bx8C,GAA5B;AACAkO,QAAAA,KAAK,GAAGsQ,KAAK,CAAC,EAAEzqB,CAAH,CAAb;AACD;AACF,KAXD;AAYD;;AAvHyC;AA0HrC,SAASipD,4BAAT,GAAwC;AAC7C,SAAO,IAAIb,eAAJ,CAAoBD,qBAApB,CAAP;AACD;AAEM,SAASe,iBAAT,GAA6B;AAClC,SAAO,IAAIX,qBAAJ,CAA0BN,+BAA1B,CAAP;AACD;AAEM,SAASkB,kBAAT,GAA8B;AACnC,SAAO,IAAIZ,qBAAJ,CAA0BL,oCAA1B,CAAP;AACD;AAEM,SAASkB,kBAAT,GAA8B;AACnC,SAAO,IAAIhB,eAAJ,EAAP;AACD;;ACpMc,MAAMiB,UAAN,SAAyBlH,SAAzB,CAAmC;AAQhDtyC,EAAAA,QAAQ,CAACxQ,IAAD,EAAaqT,GAAb,EAA0B4M,GAA1B,EAA0C;AAChD,QAAI,CAACjgB,IAAL,EAAW;AAEX,UAAM0P,KAAK,GAAI1P,IAAI,CAAC0P,KAAL,GAAa1P,IAAI,CAAC0P,KAAL,IAAc,EAA1C;AACAA,IAAAA,KAAK,CAAC2D,GAAD,CAAL,GAAa4M,GAAb;AACD;;AAIDsB,EAAAA,YAAY,CAAC0oC,EAAD,EAAyB;AACnC,WAAO,KAAK/qD,KAAL,CAAW0V,OAAE,CAACzZ,UAAd,KAA6B,KAAK8F,KAAL,CAAWyN,KAAX,KAAqBu7C,EAAzD;AACD;;AAIDzkC,EAAAA,gBAAgB,CAACykC,EAAD,EAAsB;AACpC,QAAI,KAAK1oC,YAAL,CAAkB0oC,EAAlB,CAAJ,EAA2B;AACzB,WAAKxzC,IAAL;AACD,KAFD,MAEO;AACL,WAAKmM,UAAL,CAAgB,IAAhB,EAAsBhO,OAAE,CAACzZ,UAAzB;AACD;AACF;;AAIDonB,EAAAA,YAAY,CAAC1qB,IAAD,EAAwB;AAClC,WACE,KAAKqH,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KACA,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB7W,IADrB,IAEA,CAAC,KAAKoJ,KAAL,CAAWylC,WAHd;AAKD;;AAEDgZ,EAAAA,oBAAoB,CAACwK,SAAD,EAAoBryD,IAApB,EAA2C;AAC7D,UAAMsyD,OAAO,GAAGD,SAAS,GAAGryD,IAAI,CAAC+I,MAAjC;;AACA,QAAI,KAAK7B,KAAL,CAAW+Q,KAAX,CAAiBo6C,SAAjB,EAA4BC,OAA5B,MAAyCtyD,IAA7C,EAAmD;AACjD,YAAMuyD,MAAM,GAAG,KAAKrrD,KAAL,CAAWiD,UAAX,CAAsBmoD,OAAtB,CAAf;AACA,aAAO,EACL10C,gBAAgB,CAAC20C,MAAD,CAAhB,IAIA,CAACA,MAAM,GAAG,MAAV,MAAsB,MALjB,CAAP;AAOD;;AACD,WAAO,KAAP;AACD;;AAEDx6B,EAAAA,qBAAqB,CAAC/3B,IAAD,EAAwB;AAC3C,UAAM4e,IAAI,GAAG,KAAKof,cAAL,EAAb;AACA,WAAO,KAAK6pB,oBAAL,CAA0BjpC,IAA1B,EAAgC5e,IAAhC,CAAP;AACD;;AAIDuqB,EAAAA,aAAa,CAACvqB,IAAD,EAAwB;AACnC,WAAO,KAAK0qB,YAAL,CAAkB1qB,IAAlB,KAA2B,KAAKgpB,GAAL,CAASjM,OAAE,CAAC/c,IAAZ,CAAlC;AACD;;AAID+oB,EAAAA,gBAAgB,CAAC/oB,IAAD,EAAeiC,QAAf,EAA+C;AAC7D,QAAI,CAAC,KAAKsoB,aAAL,CAAmBvqB,IAAnB,CAAL,EAA+B,KAAK+qB,UAAL,CAAgB,IAAhB,EAAsB9oB,QAAtB;AAChC;;AAID4uB,EAAAA,kBAAkB,GAAY;AAC5B,WACE,KAAKxpB,KAAL,CAAW0V,OAAE,CAACnc,GAAd,KACA,KAAKyG,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CADA,IAEA,KAAK02C,qBAAL,EAHF;AAKD;;AAEDA,EAAAA,qBAAqB,GAAY;AAC/B,WAAO/xC,SAAS,CAAC0X,IAAV,CACL,KAAKxW,KAAL,CAAW+Q,KAAX,CAAiB,KAAK7O,KAAL,CAAWgM,UAA5B,EAAwC,KAAKhM,KAAL,CAAWvC,KAAnD,CADK,CAAP;AAGD;;AAEDm8C,EAAAA,qBAAqB,GAAY;AAC/B,WAAOh9C,SAAS,CAAC0X,IAAV,CACL,KAAKxW,KAAL,CAAW+Q,KAAX,CAAiB,KAAK7O,KAAL,CAAWtC,GAA5B,EAAiC,KAAKk3B,cAAL,EAAjC,CADK,CAAP;AAGD;;AAIDwd,EAAAA,gBAAgB,GAAY;AAC1B,WAAO,KAAKxyB,GAAL,CAASjM,OAAE,CAACrb,IAAZ,KAAqB,KAAKmvB,kBAAL,EAA5B;AACD;;AAKD1G,EAAAA,SAAS,CAACqoC,QAAiB,GAAG,IAArB,EAAiC;AACxC,QAAIA,QAAQ,GAAG,KAAKhX,gBAAL,EAAH,GAA6B,KAAKxyB,GAAL,CAASjM,OAAE,CAACrb,IAAZ,CAAzC,EAA4D;AAC5D,SAAK4T,KAAL,CAAW,KAAKlM,KAAL,CAAWgM,UAAtB,EAAkCqG,aAAM,CAAClM,gBAAzC;AACD;;AAKDoZ,EAAAA,MAAM,CAACve,IAAD,EAAkB2K,GAAlB,EAAuC;AAC3C,SAAKiU,GAAL,CAAS5e,IAAT,KAAkB,KAAK2gB,UAAL,CAAgBhW,GAAhB,EAAqB3K,IAArB,CAAlB;AACD;;AAGD+8C,EAAAA,aAAa,CAAC1xC,OAAe,GAAG,mBAAnB,EAA8C;AACzD,QAAI,KAAKrM,KAAL,CAAWvC,KAAX,GAAmB,KAAKuC,KAAL,CAAWgM,UAAlC,EAA8C;AAE5C,WAAKE,KAAL,CAAW,KAAKlM,KAAL,CAAWgM,UAAtB,EAAkC;AAChC/O,QAAAA,IAAI,EAAEsE,UAAU,CAACG,WADe;AAEhC8J,QAAAA,UAAU,EAAE,iBAFoB;AAGhC3S,QAAAA,QAAQ,EAAEwT;AAHsB,OAAlC;AAMD;AACF;;AAKDsV,EAAAA,UAAU,CACRhW,GADQ,EAER09C,aAAwC,GAAG;AACzCpsD,IAAAA,IAAI,EAAEsE,UAAU,CAACG,WADwB;AAEzC8J,IAAAA,UAAU,EAAE,iBAF6B;AAGzC3S,IAAAA,QAAQ,EAAE;AAH+B,GAFnC,EAOD;AACP,QAAIwwD,aAAa,YAAYpzD,SAA7B,EAAwC;AACtCozD,MAAAA,aAAa,GAAG;AACdpsD,QAAAA,IAAI,EAAEsE,UAAU,CAACG,WADH;AAEd8J,QAAAA,UAAU,EAAE,iBAFE;AAGd3S,QAAAA,QAAQ,EAAG,+BAA8BwwD,aAAa,CAAClzD,KAAM;AAH/C,OAAhB;AAKD;;AAGD,UAAM,KAAK+V,KAAL,CAAWP,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK3L,KAAL,CAAWvC,KAA1C,EAAiD4rD,aAAjD,CAAN;AAED;;AAED7K,EAAAA,YAAY,CAAC5nD,IAAD,EAAe+U,GAAf,EAAoC;AAC9C,QAAI,CAAC,KAAKnN,SAAL,CAAe5H,IAAf,CAAL,EAA2B;AACzB,YAAM,KAAKuV,aAAL,CACJR,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK3L,KAAL,CAAWvC,KAD3B,EAEJ;AAAE6rD,QAAAA,aAAa,EAAE,CAAC1yD,IAAD;AAAjB,OAFI,EAGH,kEAAiEA,IAAK,GAHnE,CAAN;AAKD;;AAED,WAAO,IAAP;AACD;;AAED2yD,EAAAA,eAAe,CAACC,KAAD,EAAuB79C,GAAvB,EAA4C;AACzD,QAAI,CAAC69C,KAAK,CAAC1N,IAAN,CAAWuK,CAAC,IAAI,KAAK7nD,SAAL,CAAe6nD,CAAf,CAAhB,CAAL,EAAyC;AACvC,YAAM,KAAKl6C,aAAL,CACJR,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK3L,KAAL,CAAWvC,KAD3B,EAEJ;AAAE6rD,QAAAA,aAAa,EAAEE;AAAjB,OAFI,EAGH,sFAAqFA,KAAK,CAAC3J,IAAN,CACpF,IADoF,CAEpF,GALE,CAAN;AAOD;AACF;;AAID32B,EAAAA,QAAQ,CACNugC,EADM,EAENC,QAAe,GAAG,KAAK1pD,KAAL,CAAWqpB,KAAX,EAFZ,EAMyC;AAC/C,UAAMsgC,WAA+B,GAAG;AAAE5qD,MAAAA,IAAI,EAAE;AAAR,KAAxC;;AACA,QAAI;AACF,YAAMA,IAAI,GAAG0qD,EAAE,CAAC,CAAC1qD,IAAI,GAAG,IAAR,KAAiB;AAC/B4qD,QAAAA,WAAW,CAAC5qD,IAAZ,GAAmBA,IAAnB;AACA,cAAM4qD,WAAN;AACD,OAHc,CAAf;;AAIA,UAAI,KAAK3pD,KAAL,CAAWyM,MAAX,CAAkB9M,MAAlB,GAA2B+pD,QAAQ,CAACj9C,MAAT,CAAgB9M,MAA/C,EAAuD;AACrD,cAAMypB,SAAS,GAAG,KAAKppB,KAAvB;AACA,aAAKA,KAAL,GAAa0pD,QAAb;AAIA,aAAK1pD,KAAL,CAAW2lC,YAAX,GAA0Bvc,SAAS,CAACuc,YAApC;AACA,eAAO;AACL5mC,UAAAA,IADK;AAEL2N,UAAAA,KAAK,EAAG0c,SAAS,CAAC3c,MAAV,CAAiBi9C,QAAQ,CAACj9C,MAAT,CAAgB9M,MAAjC,CAFH;AAGL0wB,UAAAA,MAAM,EAAE,KAHH;AAILF,UAAAA,OAAO,EAAE,KAJJ;AAKL/G,UAAAA;AALK,SAAP;AAOD;;AAED,aAAO;AACLrqB,QAAAA,IADK;AAEL2N,QAAAA,KAAK,EAAE,IAFF;AAGL2jB,QAAAA,MAAM,EAAE,KAHH;AAILF,QAAAA,OAAO,EAAE,KAJJ;AAKL/G,QAAAA,SAAS,EAAE;AALN,OAAP;AAOD,KA5BD,CA4BE,OAAO1c,KAAP,EAAc;AACd,YAAM0c,SAAS,GAAG,KAAKppB,KAAvB;AACA,WAAKA,KAAL,GAAa0pD,QAAb;;AACA,UAAIh9C,KAAK,YAAYhL,WAArB,EAAkC;AAChC,eAAO;AAAE3C,UAAAA,IAAI,EAAE,IAAR;AAAc2N,UAAAA,KAAd;AAAqB2jB,UAAAA,MAAM,EAAE,IAA7B;AAAmCF,UAAAA,OAAO,EAAE,KAA5C;AAAmD/G,UAAAA;AAAnD,SAAP;AACD;;AACD,UAAI1c,KAAK,KAAKi9C,WAAd,EAA2B;AACzB,eAAO;AACL5qD,UAAAA,IAAI,EAAE4qD,WAAW,CAAC5qD,IADb;AAEL2N,UAAAA,KAAK,EAAE,IAFF;AAGL2jB,UAAAA,MAAM,EAAE,KAHH;AAILF,UAAAA,OAAO,EAAE,IAJJ;AAKL/G,UAAAA;AALK,SAAP;AAOD;;AAED,YAAM1c,KAAN;AACD;AACF;;AAEDk9C,EAAAA,qBAAqB,CACnB53C,mBADmB,EAEnB63C,QAFmB,EAGnB;AACA,QAAI,CAAC73C,mBAAL,EAA0B,OAAO,KAAP;AAC1B,UAAM;AAAE83C,MAAAA,eAAF;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA;AAAhC,QACJh4C,mBADF;;AAEA,QAAI,CAAC63C,QAAL,EAAe;AACb,aACEC,eAAe,IAAI,CAAnB,IAAwBC,WAAW,IAAI,CAAvC,IAA4CC,kBAAkB,IAAI,CADpE;AAGD;;AACD,QAAIF,eAAe,IAAI,CAAvB,EAA0B;AACxB,WAAKnoC,UAAL,CAAgBmoC,eAAhB;AACD;;AACD,QAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,WAAK79C,KAAL,CAAW69C,WAAX,EAAwB13C,aAAM,CAAC5O,cAA/B;AACD;;AACD,QAAIumD,kBAAkB,IAAI,CAA1B,EAA6B;AAC3B,WAAKroC,UAAL,CAAgBqoC,kBAAhB;AACD;AACF;;AAWDtb,EAAAA,qBAAqB,GAAY;AAC/B,WACE,KAAKzwC,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KACA,CAAC,CAAC,KAAKoJ,KAAL,CAAWgB,IAAX,CAAgB3K,OADlB,IAEA,KAAK4H,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAFA,IAGA,KAAK2G,KAAL,CAAW0V,OAAE,CAACzc,GAAd,CAHA,IAIA,KAAK+G,KAAL,CAAW0V,OAAE,CAACxc,MAAd,CAJA,IAKA,KAAK8G,KAAL,CAAW0V,OAAE,CAACvc,OAAd,CANF;AAQD;;AAMDuZ,EAAAA,aAAa,CAAC5R,IAAD,EAAsB;AACjC,WAAOA,IAAI,CAACiC,IAAL,KAAc,aAArB;AACD;;AAODyP,EAAAA,gBAAgB,CAAC1R,IAAD,EAAqB;AACnC,WAAOA,IAAI,CAAC2R,EAAL,CAAQ9Z,IAAf;AACD;;AAODyc,EAAAA,wBAAwB,CAACtU,IAAD,EAAsB;AAC5C,WACE,CAACA,IAAI,CAACiC,IAAL,KAAc,kBAAd,IACCjC,IAAI,CAACiC,IAAL,KAAc,0BADhB,KAEA,KAAK2P,aAAL,CAAmB5R,IAAI,CAACwnB,QAAxB,CAHF;AAKD;;AAEDjT,EAAAA,eAAe,CAACvU,IAAD,EAAsB;AACnC,WACEA,IAAI,CAACiC,IAAL,KAAc,0BAAd,IACAjC,IAAI,CAACiC,IAAL,KAAc,wBAFhB;AAID;;AAEDiO,EAAAA,gBAAgB,CAAClQ,IAAD,EAAsB;AACpC,WAAOA,IAAI,CAACiC,IAAL,KAAc,gBAArB;AACD;;AAEDuS,EAAAA,cAAc,CAACxU,IAAD,EAAsB;AAClC,WAAOA,IAAI,CAACiC,IAAL,KAAc,cAArB;AACD;;AAEDipD,EAAAA,gBAAgB,CACdh1C,QAAiB,GAAG,KAAKpe,OAAL,CAAagvC,UAAb,KAA4B,QADlC,EAEF;AAEZ,UAAMqkB,SAAS,GAAG,KAAKlqD,KAAL,CAAWqlC,MAA7B;AACA,SAAKrlC,KAAL,CAAWqlC,MAAX,GAAoB,EAApB;AAEA,UAAM8kB,sBAAsB,GAAG,KAAKC,mBAApC;AACA,SAAKA,mBAAL,GAA2B,IAAIx1C,GAAJ,EAA3B;AAGA,UAAMy1C,WAAW,GAAG,KAAKp1C,QAAzB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AAEA,UAAMq1C,QAAQ,GAAG,KAAKzwC,KAAtB;AACA,UAAMlB,YAAY,GAAG,KAAKiG,eAAL,EAArB;AACA,SAAK/E,KAAL,GAAa,IAAIlB,YAAJ,CAAiB,KAAKzM,KAAL,CAAW8iC,IAAX,CAAgB,IAAhB,CAAjB,EAAwC,KAAK/5B,QAA7C,CAAb;AAEA,UAAMs1C,YAAY,GAAG,KAAKpS,SAA1B;AACA,SAAKA,SAAL,GAAiB,IAAIzN,0BAAJ,EAAjB;AAEA,UAAMqc,aAAa,GAAG,KAAKG,UAA3B;AACA,SAAKA,UAAL,GAAkB,IAAIJ,iBAAJ,CAAsB,KAAK56C,KAAL,CAAW8iC,IAAX,CAAgB,IAAhB,CAAtB,CAAlB;AAEA,UAAMwb,kBAAkB,GAAG,KAAKC,eAAhC;AACA,SAAKA,eAAL,GAAuB,IAAInC,sBAAJ,CAA2B,KAAKp8C,KAAL,CAAW8iC,IAAX,CAAgB,IAAhB,CAA3B,CAAvB;AAEA,WAAO,MAAM;AAEX,WAAKhvC,KAAL,CAAWqlC,MAAX,GAAoB6kB,SAApB;AACA,WAAKE,mBAAL,GAA2BD,sBAA3B;AAGA,WAAKl1C,QAAL,GAAgBo1C,WAAhB;AACA,WAAKxwC,KAAL,GAAaywC,QAAb;AACA,WAAKnS,SAAL,GAAiBoS,YAAjB;AACA,WAAKrD,UAAL,GAAkBH,aAAlB;AACA,WAAK0D,eAAL,GAAuBD,kBAAvB;AACD,KAXD;AAYD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAGtgB,KAAjB;;AACA,QAAI,KAAK7rC,SAAL,CAAe,eAAf,KAAmC,KAAKyW,QAA5C,EAAsD;AACpD01C,MAAAA,UAAU,IAAIpgB,WAAd;AACD;;AACD,SAAK1wB,KAAL,CAAWF,KAAX,CAAiB/D,aAAjB;AACA,SAAKuiC,SAAL,CAAex+B,KAAf,CAAqBgxC,UAArB;AACD;;AAnX+C;AAkY3C,MAAMC,gBAAN,CAAuB;AAAA;AAAA,SAC5Bd,eAD4B,GACV,CAAC,CADS;AAAA,SAE5BC,WAF4B,GAEd,CAAC,CAFa;AAAA,SAG5BC,kBAH4B,GAGP,CAAC,CAHM;AAAA;;AAAA;;ACxZ9B,MAAMa,IAAN,CAA+B;AAC7B30D,EAAAA,WAAW,CAAC40D,MAAD,EAAiBn/C,GAAjB,EAA8B5L,GAA9B,EAA6C;AAAA,SASxDiB,IATwD;AAAA,SAUxDvD,KAVwD;AAAA,SAWxDC,GAXwD;AAAA,SAYxDqC,GAZwD;AAAA,SAaxDgrD,KAbwD;AAAA,SAcxDlqD,eAdwD;AAAA,SAexD5B,gBAfwD;AAAA,SAgBxDI,aAhBwD;AAAA,SAiBxDoP,KAjBwD;AACtD,SAAKzN,IAAL,GAAY,EAAZ;AACA,SAAKvD,KAAL,GAAakO,GAAb;AACA,SAAKjO,GAAL,GAAW,CAAX;AACA,SAAKqC,GAAL,GAAW,IAAIvC,cAAJ,CAAmBuC,GAAnB,CAAX;AACA,QAAI+qD,MAAJ,YAAIA,MAAM,CAAEj0D,OAAR,CAAgBiqD,MAApB,EAA4B,KAAKiK,KAAL,GAAa,CAACp/C,GAAD,EAAM,CAAN,CAAb;AAC5B,QAAIm/C,MAAJ,YAAIA,MAAM,CAAEntD,QAAZ,EAAsB,KAAKoC,GAAL,CAASpC,QAAT,GAAoBmtD,MAAM,CAACntD,QAA3B;AACvB;;AAYDmxB,EAAAA,OAAO,GAAS;AAEd,UAAM0Z,OAAY,GAAG,IAAIqiB,IAAJ,EAArB;AACA,UAAMv/C,IAAI,GAAG9J,MAAM,CAAC8J,IAAP,CAAY,IAAZ,CAAb;;AACA,SAAK,IAAI5L,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG2L,IAAI,CAAC3L,MAA9B,EAAsCD,CAAC,GAAGC,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAM0S,GAAG,GAAG9G,IAAI,CAAC5L,CAAD,CAAhB;;AAEA,UACE0S,GAAG,KAAK,iBAAR,IACAA,GAAG,KAAK,kBADR,IAEAA,GAAG,KAAK,eAHV,EAIE;AAEAo2B,QAAAA,OAAO,CAACp2B,GAAD,CAAP,GAAe,KAAKA,GAAL,CAAf;AACD;AACF;;AAED,WAAOo2B,OAAP;AACD;;AAtC4B;;AAyCxB,MAAMwiB,SAAN,SAAwBjC,UAAxB,CAAmC;AACxC73C,EAAAA,SAAS,GAAmB;AAE1B,WAAO,IAAI25C,IAAJ,CAAS,IAAT,EAAe,KAAK7qD,KAAL,CAAWvC,KAA1B,EAAiC,KAAKuC,KAAL,CAAW4L,QAA5C,CAAP;AACD;;AAED2C,EAAAA,WAAW,CAAc5C,GAAd,EAA2B5L,GAA3B,EAA6C;AAEtD,WAAO,IAAI8qD,IAAJ,CAAS,IAAT,EAAel/C,GAAf,EAAoB5L,GAApB,CAAP;AACD;;AAGDqT,EAAAA,eAAe,CAAcpS,IAAd,EAAiC;AAC9C,WAAO,KAAKuN,WAAL,CAAiBvN,IAAI,CAACvD,KAAtB,EAA6BuD,IAAI,CAACjB,GAAL,CAAStC,KAAtC,CAAP;AACD;;AAID4T,EAAAA,UAAU,CAActS,IAAd,EAAuBiC,IAAvB,EAAwC;AAChD,WAAO,KAAK4N,YAAL,CACL7P,IADK,EAELiC,IAFK,EAGL,KAAKhB,KAAL,CAAWgM,UAHN,EAIL,KAAKhM,KAAL,CAAWiM,aAJN,CAAP;AAMD;;AAID2C,EAAAA,YAAY,CACV7P,IADU,EAEViC,IAFU,EAGV2K,GAHU,EAIV5L,GAJU,EAKP;;AAOHhB,IAAAA,IAAI,CAACiC,IAAL,GAAYA,IAAZ;AACAjC,IAAAA,IAAI,CAACrB,GAAL,GAAWiO,GAAX;AACA5M,IAAAA,IAAI,CAACgB,GAAL,CAASrC,GAAT,GAAeqC,GAAf;AACA,QAAI,KAAKlJ,OAAL,CAAaiqD,MAAjB,EAAyB/hD,IAAI,CAACgsD,KAAL,CAAW,CAAX,IAAgBp/C,GAAhB;AACzB,SAAKzL,cAAL,CAAoBnB,IAApB;AACA,WAAOA,IAAP;AACD;;AAEDw9C,EAAAA,kBAAkB,CAACx9C,IAAD,EAAiBtB,KAAjB,EAAgCmO,QAAhC,EAA0D;AAC1E7M,IAAAA,IAAI,CAACtB,KAAL,GAAaA,KAAb;AACAsB,IAAAA,IAAI,CAACgB,GAAL,CAAStC,KAAT,GAAiBmO,QAAjB;AACA,QAAI,KAAK/U,OAAL,CAAaiqD,MAAjB,EAAyB/hD,IAAI,CAACgsD,KAAL,CAAW,CAAX,IAAgBttD,KAAhB;AAC1B;;AAEDqjB,EAAAA,gBAAgB,CACd/hB,IADc,EAEdrB,GAAY,GAAG,KAAKsC,KAAL,CAAWgM,UAFZ,EAGdD,MAAiB,GAAG,KAAK/L,KAAL,CAAWiM,aAHjB,EAIR;AACNlN,IAAAA,IAAI,CAACrB,GAAL,GAAWA,GAAX;AACAqB,IAAAA,IAAI,CAACgB,GAAL,CAASrC,GAAT,GAAeqO,MAAf;AACA,QAAI,KAAKlV,OAAL,CAAaiqD,MAAjB,EAAyB/hD,IAAI,CAACgsD,KAAL,CAAW,CAAX,IAAgBrtD,GAAhB;AAC1B;;AAKDuyB,EAAAA,0BAA0B,CAAClxB,IAAD,EAAiBksD,YAAjB,EAA+C;AACvE,SAAK1O,kBAAL,CAAwBx9C,IAAxB,EAA8BksD,YAAY,CAACxtD,KAA3C,EAAkDwtD,YAAY,CAAClrD,GAAb,CAAiBtC,KAAnE;AACD;;AAtEuC;;ACvB1C,MAAMytD,6BAA6B,GAAInsD,IAAD,IAAsB;AAC1D,SAAOA,IAAI,CAACiC,IAAL,KAAc,yBAAd,GACHkqD,6BAA6B,CAACnsD,IAAI,CAACyP,UAAN,CAD1B,GAEHzP,IAFJ;AAGD,CAJD;;AAMe,MAAMosD,UAAN,SAAyBH,SAAzB,CAAmC;AAuChD/4C,EAAAA,YAAY,CAAClT,IAAD,EAAamT,KAAc,GAAG,KAA9B,EAA2C;AAAA;;AACrD,QAAI7C,aAAa,GAAGnQ,SAApB;;AACA,QAAIH,IAAI,CAACiC,IAAL,KAAc,yBAAd,mBAA2CjC,IAAI,CAAC0P,KAAhD,aAA2C,YAAYY,aAA3D,EAA0E;AACxEA,MAAAA,aAAa,GAAG67C,6BAA6B,CAACnsD,IAAD,CAA7C;;AACA,UAAImT,KAAJ,EAAW;AAKT,YAAI7C,aAAa,CAACrO,IAAd,KAAuB,YAA3B,EAAyC;AACvC,eAAKypD,eAAL,CAAqBjC,kCAArB,CACEzpD,IAAI,CAACtB,KADP,EAEE4U,aAAM,CAAC7M,8BAFT;AAID,SALD,MAKO,IAAI6J,aAAa,CAACrO,IAAd,KAAuB,kBAA3B,EAA+C;AAIpD,eAAKkL,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAC7M,8BAA9B;AACD;AACF,OAhBD,MAgBO;AACL,aAAK0G,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAC7M,8BAA9B;AACD;AACF;;AAED,YAAQzG,IAAI,CAACiC,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACE;;AAEF,WAAK,kBAAL;AACEjC,QAAAA,IAAI,CAACiC,IAAL,GAAY,eAAZ;;AACA,aACE,IAAItB,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGZ,IAAI,CAACkC,UAAL,CAAgBtB,MAApC,EAA4C0sB,IAAI,GAAG1sB,MAAM,GAAG,CAD9D,EAEED,CAAC,GAAGC,MAFN,EAGED,CAAC,EAHH,EAIE;AAAA;;AACA,gBAAMgS,IAAI,GAAG3S,IAAI,CAACkC,UAAL,CAAgBvB,CAAhB,CAAb;AACA,gBAAM0rD,MAAM,GAAG1rD,CAAC,KAAK2sB,IAArB;AACA,eAAKla,gCAAL,CAAsCT,IAAtC,EAA4C05C,MAA5C,EAAoDl5C,KAApD;;AAEA,cACEk5C,MAAM,IACN15C,IAAI,CAAC1Q,IAAL,KAAc,aADd,oBAEAjC,IAAI,CAAC0P,KAFL,aAEA,aAAYgc,aAHd,EAIE;AACA,iBAAK4gC,gBAAL,CAAsBtsD,IAAI,CAAC0P,KAAL,CAAWgc,aAAjC;AACD;AACF;;AACD;;AAEF,WAAK,gBAAL;AACE,aAAKxY,YAAL,CAAkBlT,IAAI,CAAC0O,KAAvB,EAA8ByE,KAA9B;AACA;;AAEF,WAAK,eAAL;AAAsB;AACpB,eAAKo5C,qBAAL,CAA2BvsD,IAA3B;AAEAA,UAAAA,IAAI,CAACiC,IAAL,GAAY,aAAZ;AACA,gBAAMuqD,GAAG,GAAGxsD,IAAI,CAACqnB,QAAjB;AACA,eAAKnU,YAAL,CAAkBs5C,GAAlB,EAAuBr5C,KAAvB;AACA;AACD;;AAED,WAAK,iBAAL;AACEnT,QAAAA,IAAI,CAACiC,IAAL,GAAY,cAAZ;AACA,aAAKwpB,gBAAL,CAAsBzrB,IAAI,CAACQ,QAA3B,kBAAqCR,IAAI,CAAC0P,KAA1C,qBAAqC,aAAYgc,aAAjD,EAAgEvY,KAAhE;AACA;;AAEF,WAAK,sBAAL;AACE,YAAInT,IAAI,CAACwtB,QAAL,KAAkB,GAAtB,EAA2B;AACzB,eAAKrgB,KAAL,CAAWnN,IAAI,CAACgvB,IAAL,CAAUrwB,GAArB,EAA0B2U,aAAM,CAACnM,qBAAjC;AACD;;AAEDnH,QAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,eAAOjC,IAAI,CAACwtB,QAAZ;AACA,aAAKta,YAAL,CAAkBlT,IAAI,CAACgvB,IAAvB,EAA6B7b,KAA7B;AACA;;AAEF,WAAK,yBAAL;AAEE,aAAKD,YAAL,CAAkB5C,aAAlB,EAAiC6C,KAAjC;AACA;AA3DJ;;AAiEA,WAAOnT,IAAP;AACD;;AAEDoT,EAAAA,gCAAgC,CAC9BT,IAD8B,EAE9B05C,MAF8B,EAG9Bl5C,KAH8B,EAI9B;AACA,QAAIR,IAAI,CAAC1Q,IAAL,KAAc,cAAlB,EAAkC;AAChC,YAAM0L,KAAK,GACTgF,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAArC,GACIkB,aAAM,CAAChL,kBADX,GAEIgL,aAAM,CAAC/K,gBAHb;AAMA,WAAK4E,KAAL,CAAWwF,IAAI,CAACU,GAAL,CAAS3U,KAApB,EAA2BiP,KAA3B;AAED,KATD,MASO,IAAIgF,IAAI,CAAC1Q,IAAL,KAAc,eAAd,IAAiC,CAACoqD,MAAtC,EAA8C;AACnD,WAAKC,gBAAL,CAAsB35C,IAAI,CAACjU,KAA3B;AACD,KAFM,MAEA;AACL,WAAKwU,YAAL,CAAkBP,IAAlB,EAAwBQ,KAAxB;AACD;AACF;;AAIDsY,EAAAA,gBAAgB,CACdgC,QADc,EAEdC,gBAFc,EAGdva,KAHc,EAIW;AACzB,QAAIxU,GAAG,GAAG8uB,QAAQ,CAAC7sB,MAAnB;;AACA,QAAIjC,GAAJ,EAAS;AACP,YAAM2uB,IAAI,GAAGG,QAAQ,CAAC9uB,GAAG,GAAG,CAAP,CAArB;;AACA,UAAI,CAAA2uB,IAAI,QAAJ,YAAAA,IAAI,CAAErrB,IAAN,MAAe,aAAnB,EAAkC;AAChC,UAAEtD,GAAF;AACD,OAFD,MAEO,IAAI,CAAA2uB,IAAI,QAAJ,YAAAA,IAAI,CAAErrB,IAAN,MAAe,eAAnB,EAAoC;AACzCqrB,QAAAA,IAAI,CAACrrB,IAAL,GAAY,aAAZ;AACA,YAAIuqD,GAAG,GAAGl/B,IAAI,CAACjG,QAAf;AACA,aAAKnU,YAAL,CAAkBs5C,GAAlB,EAAuBr5C,KAAvB;AACAq5C,QAAAA,GAAG,GAAGL,6BAA6B,CAACK,GAAD,CAAnC;;AACA,YACEA,GAAG,CAACvqD,IAAJ,KAAa,YAAb,IACAuqD,GAAG,CAACvqD,IAAJ,KAAa,kBADb,IAEAuqD,GAAG,CAACvqD,IAAJ,KAAa,cAFb,IAGAuqD,GAAG,CAACvqD,IAAJ,KAAa,eAJf,EAKE;AACA,eAAK2gB,UAAL,CAAgB4pC,GAAG,CAAC9tD,KAApB;AACD;;AAED,YAAIgvB,gBAAJ,EAAsB;AACpB,eAAK++B,2BAAL,CAAiC/+B,gBAAjC;AACD;;AAED,UAAE/uB,GAAF;AACD;AACF;;AACD,SAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,GAApB,EAAyBgC,CAAC,EAA1B,EAA8B;AAC5B,YAAMy6C,GAAG,GAAG3tB,QAAQ,CAAC9sB,CAAD,CAApB;;AACA,UAAIy6C,GAAJ,EAAS;AACP,aAAKloC,YAAL,CAAkBkoC,GAAlB,EAAuBjoC,KAAvB;;AACA,YAAIioC,GAAG,CAACn5C,IAAJ,KAAa,aAAjB,EAAgC;AAC9B,eAAKqqD,gBAAL,CAAsBlR,GAAG,CAAC18C,KAA1B;AACD;AACF;AACF;;AACD,WAAO+uB,QAAP;AACD;;AAIDE,EAAAA,gBAAgB,CACdF,QADc,EAEdG,mBAFc,EAGe;AAC7B,WAAOH,QAAP;AACD;;AAEDi/B,EAAAA,oBAAoB,CAClBj/B,QADkB,EAElBG,mBAFkB,EAGZ;AACN,SAAKD,gBAAL,CAAsBF,QAAtB,EAAgCG,mBAAhC;;AAEA,SAAK,MAAMhE,IAAX,IAAmB6D,QAAnB,EAA6B;AAC3B,UAAI,CAAA7D,IAAI,QAAJ,YAAAA,IAAI,CAAE3nB,IAAN,MAAe,iBAAnB,EAAsC;AACpC,aAAKyqD,oBAAL,CAA0B9iC,IAAI,CAACppB,QAA/B;AACD;AACF;AACF;;AAIDmsD,EAAAA,WAAW,CACT15C,mBADS,EAET25C,gBAFS,EAGM;AACf,UAAM5sD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACAzW,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK6D,uBAAL,CACdjY,mBADc,EAEd9S,SAFc,EAGdysD,gBAHc,CAAhB;AAKA,WAAO,KAAKt6C,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAID6sD,EAAAA,gBAAgB,GAAgB;AAC9B,UAAM7sD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACAzW,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK8I,gBAAL,EAAhB;AACA,WAAO,KAAK7d,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAGDmwB,EAAAA,gBAAgB,GAAY;AAE1B,YAAQ,KAAKlvB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAClc,QAAR;AAAkB;AAChB,gBAAMsH,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,eAAKsE,IAAL;AACAzW,UAAAA,IAAI,CAACQ,QAAL,GAAgB,KAAK2yC,gBAAL,CACdv+B,OAAE,CAAC/b,QADW,MAGd,IAHc,CAAhB;AAKA,iBAAO,KAAKyZ,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED,WAAK4U,OAAE,CAAC7b,MAAR;AACE,eAAO,KAAK+zD,eAAL,CAAqBl4C,OAAE,CAAC1b,MAAxB,EAAgC,IAAhC,CAAP;AAbJ;;AAiBA,WAAO,KAAKkoB,eAAL,EAAP;AACD;;AAGD+xB,EAAAA,gBAAgB,CACdrlB,KADc,EAEdi/B,aAFc,EAGdC,UAHc,EAId38B,cAJc,EAKiC;AAC/C,UAAM48B,IAA0C,GAAG,EAAnD;AACA,QAAIjlC,KAAK,GAAG,IAAZ;;AACA,WAAO,CAAC,KAAKnH,GAAL,CAASiN,KAAT,CAAR,EAAyB;AACvB,UAAI9F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACD;;AACD,UAAI0zD,UAAU,IAAI,KAAK9tD,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAlB,EAAwC;AAEtC2zD,QAAAA,IAAI,CAAC/rD,IAAL,CAAU,IAAV;AACD,OAHD,MAGO,IAAI,KAAK2f,GAAL,CAASiN,KAAT,CAAJ,EAAqB;AAC1B;AACD,OAFM,MAEA,IAAI,KAAK5uB,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAJ,EAA6B;AAClCkzD,QAAAA,IAAI,CAAC/rD,IAAL,CAAU,KAAK4tB,4BAAL,CAAkC,KAAK+9B,gBAAL,EAAlC,CAAV;AACA,aAAK/O,mBAAL,CAAyBiP,aAAzB;AACA,aAAKvsC,MAAL,CAAYsN,KAAZ;AACA;AACD,OALM,MAKA;AACL,cAAMotB,UAAU,GAAG,EAAnB;;AACA,YAAI,KAAKh8C,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,KAAqB,KAAKuF,SAAL,CAAe,YAAf,CAAzB,EAAuD;AACrD,eAAK0N,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC/H,6BAApC;AACD;;AAED,eAAO,KAAKrM,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAP,EAA0B;AACxBghD,UAAAA,UAAU,CAACh6C,IAAX,CAAgB,KAAKgsD,cAAL,EAAhB;AACD;;AACDD,QAAAA,IAAI,CAAC/rD,IAAL,CAAU,KAAK+5C,uBAAL,CAA6B5qB,cAA7B,EAA6C6qB,UAA7C,CAAV;AACD;AACF;;AACD,WAAO+R,IAAP;AACD;;AAEDhS,EAAAA,uBAAuB,CACrB5qB,cADqB,EAErB6qB,UAFqB,EAGU;AAC/B,UAAMlsB,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMosB,GAAG,GAAG,KAAKrsB,iBAAL,CAAuBC,IAAI,CAACtwB,KAA5B,EAAmCswB,IAAI,CAAChuB,GAAL,CAAStC,KAA5C,EAAmDswB,IAAnD,CAAZ;;AACA,QAAIksB,UAAU,CAACt6C,MAAf,EAAuB;AACrBouB,MAAAA,IAAI,CAACksB,UAAL,GAAkBA,UAAlB;AACD;;AACD,WAAOE,GAAP;AACD;;AAGDtsB,EAAAA,4BAA4B,CAAC9F,KAAD,EAA0B;AACpD,WAAOA,KAAP;AACD;;AAID+F,EAAAA,iBAAiB,CACf/b,QADe,EAEfnG,QAFe,EAGfmiB,IAHe,EAIN;AAAA;;AACTniB,IAAAA,QAAQ,gBAAGA,QAAH,wBAAe,KAAK5L,KAAL,CAAW4L,QAAlC;AACAmG,IAAAA,QAAQ,gBAAGA,QAAH,wBAAe,KAAK/R,KAAL,CAAWvC,KAAlC;AAEAswB,IAAAA,IAAI,YAAGA,IAAH,oBAAW,KAAKmB,gBAAL,EAAf;AACA,QAAI,CAAC,KAAKtP,GAAL,CAASjM,OAAE,CAACva,EAAZ,CAAL,EAAsB,OAAO20B,IAAP;AAEtB,UAAMhvB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,IAAAA,IAAI,CAACgvB,IAAL,GAAYA,IAAZ;AACAhvB,IAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKuG,uBAAL,EAAb;AACA,WAAO,KAAK5Y,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAkBDiuB,EAAAA,SAAS,CACPrE,IADO,EAEPwF,kBAFO,EAGPpU,WAAyB,GAAGtC,SAHrB,EAIPy0C,YAJO,EAKPC,kBALO,EAMPC,iBAA2B,GAAG,KANvB,EAOD;AACN,YAAQzjC,IAAI,CAAC3nB,IAAb;AACE,WAAK,YAAL;AAAmB;AACjB,gBAAM;AAAEpK,YAAAA;AAAF,cAAW+xB,IAAjB;;AACA,cACE,KAAK3oB,KAAL,CAAW0U,MAAX,KAIC03C,iBAAiB,GACdh3C,wBAAwB,CAACxe,IAAD,EAAO,KAAKqe,QAAZ,CADV,GAEdE,4BAA4B,CAACve,IAAD,CANhC,CADF,EAQE;AACA,iBAAKsV,KAAL,CACEyc,IAAI,CAAClrB,KADP,EAEEsc,WAAW,KAAKtC,SAAhB,GACIpF,aAAM,CAAC9J,mBADX,GAEI8J,aAAM,CAAC7J,0BAJb,EAKE5R,IALF;AAOD;;AAED,cAAIs1D,YAAJ,EAAkB;AAChB,gBAAIA,YAAY,CAACxtD,GAAb,CAAiB9H,IAAjB,CAAJ,EAA4B;AAC1B,mBAAKsV,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4U,aAAM,CAACjL,SAA9B;AACD,aAFD,MAEO;AACL8kD,cAAAA,YAAY,CAACjyC,GAAb,CAAiBrjB,IAAjB;AACD;AACF;;AACD,cAAIu1D,kBAAkB,IAAIv1D,IAAI,KAAK,KAAnC,EAA0C;AACxC,iBAAKsV,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4U,aAAM,CAACvM,mBAA9B;AACD;;AACD,cAAI,EAAEiU,WAAW,GAAGtC,SAAhB,CAAJ,EAAgC;AAC9B,iBAAKoC,KAAL,CAAWC,WAAX,CAAuBljB,IAAvB,EAA6BmjB,WAA7B,EAA0C4O,IAAI,CAAClrB,KAA/C;AACD;;AACD;AACD;;AAED,WAAK,kBAAL;AACE,YAAIsc,WAAW,KAAKtC,SAApB,EAA+B;AAC7B,eAAKvL,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4U,aAAM,CAAC3M,6BAA9B;AACD;;AACD;;AAEF,WAAK,eAAL;AACE,aAAK,IAAIgM,IAAT,IAAiBiX,IAAI,CAAC1nB,UAAtB,EAAkC;AAChC,cAAI,KAAKgO,gBAAL,CAAsByC,IAAtB,CAAJ,EAAiCA,IAAI,GAAGA,IAAI,CAACjE,KAAZ,CAAjC,KAIK,IAAI,KAAK8F,cAAL,CAAoB7B,IAApB,CAAJ,EAA+B;AAEpC,eAAKsb,SAAL,CACEtb,IADF,EAEE,8BAFF,EAGEqI,WAHF,EAIEmyC,YAJF,EAKEC,kBALF;AAOD;;AACD;;AAEF,WAAK,cAAL;AACE,aAAK,MAAME,IAAX,IAAmB1jC,IAAI,CAACppB,QAAxB,EAAkC;AAChC,cAAI8sD,IAAJ,EAAU;AACR,iBAAKr/B,SAAL,CACEq/B,IADF,EAEE,6BAFF,EAGEtyC,WAHF,EAIEmyC,YAJF,EAKEC,kBALF;AAOD;AACF;;AACD;;AAEF,WAAK,mBAAL;AACE,aAAKn/B,SAAL,CACErE,IAAI,CAACoF,IADP,EAEE,oBAFF,EAGEhU,WAHF,EAIEmyC,YAJF;AAMA;;AAEF,WAAK,aAAL;AACE,aAAKl/B,SAAL,CACErE,IAAI,CAACvC,QADP,EAEE,cAFF,EAGErM,WAHF,EAIEmyC,YAJF;AAMA;;AAEF,WAAK,yBAAL;AACE,aAAKl/B,SAAL,CACErE,IAAI,CAACna,UADP,EAEE,0BAFF,EAGEuL,WAHF,EAIEmyC,YAJF;AAMA;;AAEF;AAAS;AACP,eAAKhgD,KAAL,CACEyc,IAAI,CAAClrB,KADP,EAEEsc,WAAW,KAAKtC,SAAhB,GACIpF,aAAM,CAAClN,UADX,GAEIkN,aAAM,CAACjN,iBAJb,EAKE+oB,kBALF;AAOD;AA9GH;AAgHD;;AAEDm9B,EAAAA,qBAAqB,CAACvsD,IAAD,EAA4B;AAC/C,QACEA,IAAI,CAACqnB,QAAL,CAAcplB,IAAd,KAAuB,YAAvB,IACAjC,IAAI,CAACqnB,QAAL,CAAcplB,IAAd,KAAuB,kBAFzB,EAGE;AACA,WAAKkL,KAAL,CAAWnN,IAAI,CAACqnB,QAAL,CAAc3oB,KAAzB,EAAgC4U,aAAM,CAACzM,4BAAvC;AACD;AACF;;AAEDi3C,EAAAA,mBAAmB,CAAChwB,KAAD,EAAyC;AAC1D,QAAI,KAAK5uB,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAJ,EAA0B;AACxB,UAAI,KAAKy8C,iBAAL,OAA6BjoB,KAAjC,EAAwC;AACtC,aAAK2+B,2BAAL,CAAiC,KAAKxrD,KAAL,CAAWvC,KAA5C;AACD,OAFD,MAEO;AACL,aAAK4tD,gBAAL,CAAsB,KAAKrrD,KAAL,CAAWvC,KAAjC;AACD;AACF;AACF;;AAED4tD,EAAAA,gBAAgB,CAAC1/C,GAAD,EAAc;AAC5B,UAAM,KAAKO,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAAC1O,gBAAvB,CAAN;AACD;;AAED6nD,EAAAA,2BAA2B,CAAC7/C,GAAD,EAAc;AACvC,SAAKO,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAAClK,iBAAvB;AACD;;AA5f+C;;AC+BnC,MAAMmkD,gBAAN,SAA+BnB,UAA/B,CAA0C;AAwCvDoB,EAAAA,UAAU,CACR76C,IADQ,EAER86C,QAFQ,EAGRC,QAHQ,EAIRz6C,mBAJQ,EAKF;AACN,QACEN,IAAI,CAAC1Q,IAAL,KAAc,eAAd,IACA,KAAKuS,cAAL,CAAoB7B,IAApB,CADA,IAEAA,IAAI,CAACN,QAFL,IAIAM,IAAI,CAACG,SALP,EAME;AACA;AACD;;AAED,UAAMO,GAAG,GAAGV,IAAI,CAACU,GAAjB;AAEA,UAAMxb,IAAI,GAAGwb,GAAG,CAACpR,IAAJ,KAAa,YAAb,GAA4BoR,GAAG,CAACxb,IAAhC,GAAuCwb,GAAG,CAAC3E,KAAxD;;AAEA,QAAI7W,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAI41D,QAAJ,EAAc;AACZ,aAAKtgD,KAAL,CAAWkG,GAAG,CAAC3U,KAAf,EAAsB4U,aAAM,CAACnK,aAA7B;AACA;AACD;;AACD,UAAIukD,QAAQ,CAACC,IAAb,EAAmB;AACjB,YAAI16C,mBAAJ,EAAyB;AAGvB,cAAIA,mBAAmB,CAAC+3C,WAApB,KAAoC,CAAC,CAAzC,EAA4C;AAC1C/3C,YAAAA,mBAAmB,CAAC+3C,WAApB,GAAkC33C,GAAG,CAAC3U,KAAtC;AACD;AACF,SAND,MAMO;AACL,eAAKyO,KAAL,CAAWkG,GAAG,CAAC3U,KAAf,EAAsB4U,aAAM,CAAC5O,cAA7B;AACD;AACF;;AAEDgpD,MAAAA,QAAQ,CAACC,IAAT,GAAgB,IAAhB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAAChkC,IAAD,EAAqBgc,gBAArB,EAAwD;AAC1E,WACEhc,IAAI,CAAC3nB,IAAL,KAAc,yBAAd,IAA2C2nB,IAAI,CAAClrB,KAAL,KAAeknC,gBAD5D;AAGD;;AAGD8Y,EAAAA,aAAa,GAAkC;AAC7C,QAAIkN,UAAU,GAAGtgB,KAAjB;;AACA,QAAI,KAAK7rC,SAAL,CAAe,eAAf,KAAmC,KAAKyW,QAA5C,EAAsD;AACpD01C,MAAAA,UAAU,IAAIpgB,WAAd;AACD;;AACD,SAAK1wB,KAAL,CAAWF,KAAX,CAAiB/D,aAAjB;AACA,SAAKuiC,SAAL,CAAex+B,KAAf,CAAqBgxC,UAArB;AACA,SAAKn5B,SAAL;AACA,UAAM7I,IAAI,GAAG,KAAK9I,eAAL,EAAb;;AACA,QAAI,CAAC,KAAK5hB,KAAL,CAAW0V,OAAE,CAACnc,GAAd,CAAL,EAAyB;AACvB,WAAKmqB,UAAL;AACD;;AAGD,SAAKtgB,yBAAL;AACAsnB,IAAAA,IAAI,CAAC3pB,QAAL,GAAgB,KAAKgB,KAAL,CAAWhB,QAA3B;AACA2pB,IAAAA,IAAI,CAAClc,MAAL,GAAc,KAAKzM,KAAL,CAAWyM,MAAzB;;AACA,QAAI,KAAK5V,OAAL,CAAakqD,MAAjB,EAAyB;AACvBp4B,MAAAA,IAAI,CAACo4B,MAAL,GAAc,KAAKA,MAAnB;AACD;;AACD,WAAOp4B,IAAP;AACD;;AAqBD9I,EAAAA,eAAe,CACb+sC,UADa,EAEb56C,mBAFa,EAGC;AACd,QAAI46C,UAAJ,EAAgB;AACd,aAAO,KAAKC,aAAL,CAAmB,MACxB,KAAKC,mBAAL,CAAyB96C,mBAAzB,CADK,CAAP;AAGD;;AACD,WAAO,KAAK+6C,UAAL,CAAgB,MAAM,KAAKD,mBAAL,CAAyB96C,mBAAzB,CAAtB,CAAP;AACD;;AAGD86C,EAAAA,mBAAmB,CAAC96C,mBAAD,EAAuD;AACxE,UAAMD,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAM+c,IAAI,GAAG,KAAKoB,gBAAL,CAAsB/X,mBAAtB,CAAb;;AACA,QAAI,KAAK/T,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAJ,EAA0B;AACxB,YAAM0G,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,MAAAA,IAAI,CAACiuD,WAAL,GAAmB,CAACrkC,IAAD,CAAnB;;AACA,aAAO,KAAK/I,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAP,EAA2B;AACzB0G,QAAAA,IAAI,CAACiuD,WAAL,CAAiB/sD,IAAjB,CAAsB,KAAK8pB,gBAAL,CAAsB/X,mBAAtB,CAAtB;AACD;;AACD,WAAK0a,gBAAL,CAAsB3tB,IAAI,CAACiuD,WAA3B;AACA,aAAO,KAAK37C,UAAL,CAAgBtS,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AACD,WAAO4pB,IAAP;AACD;;AAGDskC,EAAAA,0BAA0B,CACxBj7C,mBADwB,EAExByd,cAFwB,EAGxB;AACA,WAAO,KAAKo9B,aAAL,CAAmB,MACxB,KAAK9iC,gBAAL,CAAsB/X,mBAAtB,EAA2Cyd,cAA3C,CADK,CAAP;AAGD;;AAGDxF,EAAAA,uBAAuB,CACrBjY,mBADqB,EAErByd,cAFqB,EAGrB;AACA,WAAO,KAAKs9B,UAAL,CAAgB,MACrB,KAAKhjC,gBAAL,CAAsB/X,mBAAtB,EAA2Cyd,cAA3C,CADK,CAAP;AAGD;;AAIDtG,EAAAA,0BAA0B,CACxBnX,mBADwB,EAExBk7C,WAFwB,EAGxB;AAAA;;AACAl7C,IAAAA,mBAAmB,CAACg4C,kBAApB,uBACEkD,WADF,oBACEA,WAAW,CAAEvhD,GADf,+BACsB,KAAK3L,KAAL,CAAWvC,KADjC;AAED;;AAKDssB,EAAAA,gBAAgB,CACd/X,mBADc,EAEdyd,cAFc,EAGA;AACd,UAAM1d,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;;AACA,QAAI,KAAK0V,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;AAC9B,UAAI,KAAK62B,SAAL,CAAerN,QAAnB,EAA6B;AAC3B,YAAI/c,IAAI,GAAG,KAAKo/B,UAAL,EAAX;;AACA,YAAI19B,cAAJ,EAAoB;AAClB1B,UAAAA,IAAI,GAAG0B,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BxB,IAA1B,EAAgChc,QAAhC,EAA0CnG,QAA1C,CAAP;AACD;;AACD,eAAOmiB,IAAP;AACD;AACF;;AAED,QAAIq/B,mBAAJ;;AACA,QAAIp7C,mBAAJ,EAAyB;AACvBo7C,MAAAA,mBAAmB,GAAG,KAAtB;AACD,KAFD,MAEO;AACLp7C,MAAAA,mBAAmB,GAAG,IAAI44C,gBAAJ,EAAtB;AACAwC,MAAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,QAAI,KAAKnvD,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KAAyB,KAAK8F,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAA7B,EAAkD;AAChD,WAAKoJ,KAAL,CAAW2kC,gBAAX,GAA8B,KAAK3kC,KAAL,CAAWvC,KAAzC;AACD;;AAED,QAAIswB,IAAI,GAAG,KAAKs/B,qBAAL,CAA2Br7C,mBAA3B,CAAX;;AACA,QAAIyd,cAAJ,EAAoB;AAClB1B,MAAAA,IAAI,GAAG0B,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BxB,IAA1B,EAAgChc,QAAhC,EAA0CnG,QAA1C,CAAP;AACD;;AACD,QAAI,KAAK5L,KAAL,CAAWgB,IAAX,CAAgBlL,QAApB,EAA8B;AAC5B,YAAMiJ,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,YAAM2gB,QAAQ,GAAG,KAAKvsB,KAAL,CAAWyN,KAA5B;AACA1O,MAAAA,IAAI,CAACwtB,QAAL,GAAgBA,QAAhB;;AAEA,UAAI,KAAKtuB,KAAL,CAAW0V,OAAE,CAACva,EAAd,CAAJ,EAAuB;AACrB2F,QAAAA,IAAI,CAACgvB,IAAL,GAAY,KAAK9b,YAAL,CAAkB8b,IAAlB,EAAoC,IAApC,CAAZ;AACA/b,QAAAA,mBAAmB,CAAC+3C,WAApB,GAAkC,CAAC,CAAnC;AACD,OAHD,MAGO;AACLhrD,QAAAA,IAAI,CAACgvB,IAAL,GAAYA,IAAZ;AACD;;AAED,UAAI/b,mBAAmB,CAAC83C,eAApB,IAAuC/qD,IAAI,CAACgvB,IAAL,CAAUtwB,KAArD,EAA4D;AAC1DuU,QAAAA,mBAAmB,CAAC83C,eAApB,GAAsC,CAAC,CAAvC;AACD;;AAED,WAAK98B,SAAL,CAAee,IAAf,EAAqB,uBAArB;AAEA,WAAKvY,IAAL;AACAzW,MAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKqG,gBAAL,EAAb;AACA,aAAO,KAAK1Y,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD,KArBD,MAqBO,IAAIquD,mBAAJ,EAAyB;AAC9B,WAAKxD,qBAAL,CAA2B53C,mBAA3B,EAAgD,IAAhD;AACD;;AAED,WAAO+b,IAAP;AACD;;AAKDs/B,EAAAA,qBAAqB,CAACr7C,mBAAD,EAAsD;AACzE,UAAMD,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAM+4B,gBAAgB,GAAG,KAAK3kC,KAAL,CAAW2kC,gBAApC;AACA,UAAMhc,IAAI,GAAG,KAAK2kC,YAAL,CAAkBt7C,mBAAlB,CAAb;;AAEA,QAAI,KAAK26C,oBAAL,CAA0BhkC,IAA1B,EAAgCgc,gBAAhC,CAAJ,EAAuD;AACrD,aAAOhc,IAAP;AACD;;AAED,WAAO,KAAKI,gBAAL,CAAsBJ,IAAtB,EAA4B5W,QAA5B,EAAsCnG,QAAtC,EAAgDoG,mBAAhD,CAAP;AACD;;AAED+W,EAAAA,gBAAgB,CACdJ,IADc,EAEd5W,QAFc,EAGdnG,QAHc,EAKdoG,mBALc,EAMA;AACd,QAAI,KAAK4N,GAAL,CAASjM,OAAE,CAACjb,QAAZ,CAAJ,EAA2B;AACzB,YAAMqG,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,MAAAA,IAAI,CAACuV,IAAL,GAAYqU,IAAZ;AACA5pB,MAAAA,IAAI,CAACyqB,UAAL,GAAkB,KAAKS,uBAAL,EAAlB;AACA,WAAK1K,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AACAwG,MAAAA,IAAI,CAAC+qB,SAAL,GAAiB,KAAKC,gBAAL,EAAjB;AACA,aAAO,KAAK1Y,UAAL,CAAgBtS,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AACD,WAAO4pB,IAAP;AACD;;AAKD2kC,EAAAA,YAAY,CAACt7C,mBAAD,EAAsD;AAChE,UAAMD,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAM+4B,gBAAgB,GAAG,KAAK3kC,KAAL,CAAW2kC,gBAApC;AACA,UAAMhc,IAAI,GAAG,KAAKosB,eAAL,CAAqB/iC,mBAArB,CAAb;;AAEA,QAAI,KAAK26C,oBAAL,CAA0BhkC,IAA1B,EAAgCgc,gBAAhC,CAAJ,EAAuD;AACrD,aAAOhc,IAAP;AACD;;AAED,WAAO,KAAKoyB,WAAL,CAAiBpyB,IAAjB,EAAuB5W,QAAvB,EAAiCnG,QAAjC,EAA2C,CAAC,CAA5C,CAAP;AACD;;AAQDmvC,EAAAA,WAAW,CACThtB,IADS,EAETitB,YAFS,EAGTC,YAHS,EAITC,OAJS,EAKK;AACd,QAAIqS,IAAI,GAAG,KAAKvtD,KAAL,CAAWgB,IAAX,CAAgBzK,KAA3B;;AACA,QAAIg3D,IAAI,IAAI,IAAR,KAAiB,KAAKpV,SAAL,CAAenN,KAAf,IAAwB,CAAC,KAAK/sC,KAAL,CAAW0V,OAAE,CAACpX,GAAd,CAA1C,CAAJ,EAAmE;AACjE,UAAIgxD,IAAI,GAAGrS,OAAX,EAAoB;AAClB,cAAM8N,EAAE,GAAG,KAAKhpD,KAAL,CAAWgB,IAAtB;;AACA,YAAIgoD,EAAE,KAAKr1C,OAAE,CAACja,QAAd,EAAwB;AACtB,eAAK8kD,YAAL,CAAkB,kBAAlB;;AACA,cAAI,KAAKx+C,KAAL,CAAWolC,0BAAf,EAA2C;AACzC,mBAAOrX,IAAP;AACD;;AACD,eAAK/tB,KAAL,CAAW4kC,UAAX,GAAwB,IAAxB;AACA,eAAK4oB,4BAAL,CAAkCz/B,IAAlC,EAAwCitB,YAAxC;AACD;;AACD,cAAMj8C,IAAI,GAAG,KAAKwP,WAAL,CAAiBysC,YAAjB,EAA+BC,YAA/B,CAAb;AACAl8C,QAAAA,IAAI,CAACgvB,IAAL,GAAYA,IAAZ;AACAhvB,QAAAA,IAAI,CAACwtB,QAAL,GAAgB,KAAKvsB,KAAL,CAAWyN,KAA3B;AAEA,cAAMggD,OAAO,GAAGzE,EAAE,KAAKr1C,OAAE,CAAC/Z,SAAV,IAAuBovD,EAAE,KAAKr1C,OAAE,CAAC9Z,UAAjD;AACA,cAAM6zD,QAAQ,GAAG1E,EAAE,KAAKr1C,OAAE,CAACha,iBAA3B;;AAEA,YAAI+zD,QAAJ,EAAc;AAGZH,UAAAA,IAAI,GAAK55C,OAAE,CAAC9Z,UAAL,CAA0CtD,KAAjD;AACD;;AAED,aAAKif,IAAL;;AAEA,YACEwzC,EAAE,KAAKr1C,OAAE,CAACja,QAAV,IACA,KAAKiF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,SAF3D,EAGE;AACA,cACE,KAAKV,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KACA,KAAKoJ,KAAL,CAAWyN,KAAX,KAAqB,OADrB,IAEA,KAAK0qC,SAAL,CAAetN,QAHjB,EAIE;AACA,kBAAM,KAAK3+B,KAAL,CACJ,KAAKlM,KAAL,CAAWvC,KADP,EAEJ4U,aAAM,CAACjJ,gCAFH,CAAN;AAID;AACF;;AAEDrK,QAAAA,IAAI,CAAC2kB,KAAL,GAAa,KAAKiqC,oBAAL,CAA0B3E,EAA1B,EAA8BuE,IAA9B,CAAb;AACA,aAAKl8C,UAAL,CACEtS,IADF,EAEE0uD,OAAO,IAAIC,QAAX,GAAsB,mBAAtB,GAA4C,kBAF9C;AASA,cAAME,MAAM,GAAG,KAAK5tD,KAAL,CAAWgB,IAA1B;;AACA,YACG0sD,QAAQ,KAAKE,MAAM,KAAKj6C,OAAE,CAAC/Z,SAAd,IAA2Bg0D,MAAM,KAAKj6C,OAAE,CAAC9Z,UAA9C,CAAT,IACC4zD,OAAO,IAAIG,MAAM,KAAKj6C,OAAE,CAACha,iBAF5B,EAGE;AACA,gBAAM,KAAKuS,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAChM,yBAApC,CAAN;AACD;;AAED,eAAO,KAAK00C,WAAL,CAAiBh8C,IAAjB,EAAuBi8C,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;AACF;;AACD,WAAOntB,IAAP;AACD;;AAKD4/B,EAAAA,oBAAoB,CAAC3E,EAAD,EAAgBuE,IAAhB,EAA4C;AAC9D,UAAMx7C,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;;AACA,YAAQo9C,EAAR;AACE,WAAKr1C,OAAE,CAACja,QAAR;AACE,gBAAQ,KAAKiF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAR;AACE,eAAK,OAAL;AACE,mBAAO,KAAKkvD,0BAAL,CAAgC,MAAM;AAC3C,qBAAO,KAAKC,sBAAL,CACL,KAAKC,wBAAL,CAA8B/E,EAA9B,EAAkCuE,IAAlC,CADK,EAELx7C,QAFK,EAGLnG,QAHK,CAAP;AAKD,aANM,CAAP;;AAOF,eAAK,QAAL;AACE,mBAAO,KAAKoiD,8BAAL,CAAoC,MAAM;AAC/C,qBAAO,KAAKC,uBAAL,CAA6BV,IAA7B,CAAP;AACD,aAFM,CAAP;AAVJ;;AAgBF;AACE,eAAO,KAAKQ,wBAAL,CAA8B/E,EAA9B,EAAkCuE,IAAlC,CAAP;AAnBJ;AAqBD;;AAKDQ,EAAAA,wBAAwB,CAAC/E,EAAD,EAAgBuE,IAAhB,EAA4C;AAClE,UAAMx7C,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AAEA,WAAO,KAAKmvC,WAAL,CACL,KAAKhG,eAAL,EADK,EAELhjC,QAFK,EAGLnG,QAHK,EAILo9C,EAAE,CAAC1yD,gBAAH,GAAsBi3D,IAAI,GAAG,CAA7B,GAAiCA,IAJ5B,CAAP;AAMD;;AAEDW,EAAAA,0BAA0B,CAACnvD,IAAD,EAA8C;AACtE,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACnZ,QAAd,CAAJ,EAA6B;AAC3B,WAAK0R,KAAL,CACEnN,IAAI,CAACqnB,QAAL,CAAc3oB,KADhB,EAEE4U,aAAM,CAACrI,kCAFT;AAID;AACF;;AAID+qC,EAAAA,eAAe,CACb/iC,mBADa,EAEbm8C,QAFa,EAGC;AACd,UAAMp8C,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAMwiD,OAAO,GAAG,KAAK9sC,YAAL,CAAkB,OAAlB,CAAhB;;AAEA,QAAI8sC,OAAO,IAAI,KAAKC,cAAL,EAAf,EAAsC;AACpC,WAAK74C,IAAL;AACA,YAAMmT,IAAI,GAAG,KAAK2lC,UAAL,CAAgBv8C,QAAhB,EAA0BnG,QAA1B,CAAb;AACA,UAAI,CAACuiD,QAAL,EAAe,KAAKD,0BAAL,CAAgCvlC,IAAhC;AACf,aAAOA,IAAP;AACD;;AACD,UAAM4lC,MAAM,GAAG,KAAKtwD,KAAL,CAAW0V,OAAE,CAACpa,MAAd,CAAf;AACA,UAAMwF,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AACA,QAAI,KAAKlR,KAAL,CAAWgB,IAAX,CAAgBjL,MAApB,EAA4B;AAC1BgJ,MAAAA,IAAI,CAACwtB,QAAL,GAAgB,KAAKvsB,KAAL,CAAWyN,KAA3B;AACA1O,MAAAA,IAAI,CAAChJ,MAAL,GAAc,IAAd;;AAEA,UAAI,KAAKkI,KAAL,CAAW0V,OAAE,CAACpY,MAAd,CAAJ,EAA2B;AACzB,aAAKijD,YAAL,CAAkB,kBAAlB;AACD;;AACD,YAAMgQ,QAAQ,GAAG,KAAKvwD,KAAL,CAAW0V,OAAE,CAAChX,OAAd,CAAjB;AACA,WAAK6Y,IAAL;AAEAzW,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK2uB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AAEA,WAAK6U,qBAAL,CAA2B53C,mBAA3B,EAAgD,IAAhD;;AAEA,UAAI,KAAKhS,KAAL,CAAW0U,MAAX,IAAqB85C,QAAzB,EAAmC;AACjC,cAAMjD,GAAG,GAAGxsD,IAAI,CAACqnB,QAAjB;;AAEA,YAAImlC,GAAG,CAACvqD,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,eAAKkL,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAC/J,YAA9B;AACD,SAFD,MAEO,IAAI,KAAK+K,wBAAL,CAA8Bk4C,GAA9B,CAAJ,EAAwC;AAC7C,eAAKr/C,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACjP,kBAA9B;AACD;AACF;;AAED,UAAI,CAACmrD,MAAL,EAAa;AACX,YAAI,CAACJ,QAAL,EAAe,KAAKD,0BAAL,CAAgCnvD,IAAhC;AACf,eAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;AACF;;AAED,UAAM4pB,IAAI,GAAG,KAAK8lC,WAAL,CAAiB1vD,IAAjB,EAAuBwvD,MAAvB,EAA+Bv8C,mBAA/B,CAAb;;AAEA,QAAIo8C,OAAJ,EAAa;AACX,YAAMx4D,UAAU,GAAG,KAAK4I,SAAL,CAAe,aAAf,IACf,KAAKwB,KAAL,CAAWgB,IAAX,CAAgBpL,UADD,GAEf,KAAKoK,KAAL,CAAWgB,IAAX,CAAgBpL,UAAhB,IAA8B,CAAC,KAAKqI,KAAL,CAAW0V,OAAE,CAACtZ,MAAd,CAFnC;;AAGA,UAAIzE,UAAU,IAAI,CAAC,KAAK84D,gBAAL,EAAnB,EAA4C;AAC1C,aAAKtiD,cAAL,CACE2F,QADF,EAEE,KAAKvT,SAAL,CAAe,eAAf,IACI6T,aAAM,CAACjQ,sBADX,GAEIiQ,aAAM,CAAChQ,uBAJb;AAMA,eAAO,KAAKisD,UAAL,CAAgBv8C,QAAhB,EAA0BnG,QAA1B,CAAP;AACD;AACF;;AAED,WAAO+c,IAAP;AACD;;AAGD8lC,EAAAA,WAAW,CACT1vD,IADS,EAETwvD,MAFS,EAGTv8C,mBAHS,EAIK;AACd,QAAIu8C,MAAJ,EAAY;AACV,WAAKvhC,SAAL,CAAejuB,IAAI,CAACqnB,QAApB,EAA8B,kBAA9B;AACA,aAAO,KAAK/U,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,UAAMgT,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,QAAI+c,IAAI,GAAG,KAAKgmC,mBAAL,CAAyB38C,mBAAzB,CAAX;AACA,QAAI,KAAK43C,qBAAL,CAA2B53C,mBAA3B,EAAgD,KAAhD,CAAJ,EAA4D,OAAO2W,IAAP;;AAC5D,WAAO,KAAK3oB,KAAL,CAAWgB,IAAX,CAAgBhL,OAAhB,IAA2B,CAAC,KAAKyxB,kBAAL,EAAnC,EAA8D;AAC5D,YAAM1oB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,MAAAA,IAAI,CAACwtB,QAAL,GAAgB,KAAKvsB,KAAL,CAAWyN,KAA3B;AACA1O,MAAAA,IAAI,CAAChJ,MAAL,GAAc,KAAd;AACAgJ,MAAAA,IAAI,CAACqnB,QAAL,GAAgBuC,IAAhB;AACA,WAAKqE,SAAL,CAAerE,IAAf,EAAqB,mBAArB;AACA,WAAKnT,IAAL;AACAmT,MAAAA,IAAI,GAAG,KAAKtX,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AACD,WAAO4pB,IAAP;AACD;;AAIDgmC,EAAAA,mBAAmB,CAAC38C,mBAAD,EAAuD;AACxE,UAAMD,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAM+4B,gBAAgB,GAAG,KAAK3kC,KAAL,CAAW2kC,gBAApC;AACA,UAAMhc,IAAI,GAAG,KAAK9G,aAAL,CAAmB7P,mBAAnB,CAAb;;AAEA,QAAI,KAAK26C,oBAAL,CAA0BhkC,IAA1B,EAAgCgc,gBAAhC,CAAJ,EAAuD;AACrD,aAAOhc,IAAP;AACD;;AAED,WAAO,KAAKkI,eAAL,CAAqBlI,IAArB,EAA2B5W,QAA3B,EAAqCnG,QAArC,CAAP;AACD;;AAEDilB,EAAAA,eAAe,CACb/d,IADa,EAEbf,QAFa,EAGbnG,QAHa,EAIbmH,OAJa,EAKC;AACd,UAAM/S,KAAK,GAAG;AACZgT,MAAAA,mBAAmB,EAAE,KADT;AAEZ47C,MAAAA,eAAe,EAAE,KAAKhU,oBAAL,CAA0B9nC,IAA1B,CAFL;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAd;;AAKA,OAAG;AACDJ,MAAAA,IAAI,GAAG,KAAKD,cAAL,CAAoBC,IAApB,EAA0Bf,QAA1B,EAAoCnG,QAApC,EAA8CmH,OAA9C,EAAuD/S,KAAvD,CAAP;AAGAA,MAAAA,KAAK,CAAC4uD,eAAN,GAAwB,KAAxB;AACD,KALD,QAKS,CAAC5uD,KAAK,CAACkT,IALhB;;AAMA,WAAOJ,IAAP;AACD;;AAMDD,EAAAA,cAAc,CACZC,IADY,EAEZf,QAFY,EAGZnG,QAHY,EAIZmH,OAJY,EAKZ/S,KALY,EAME;AACd,QAAI,CAAC+S,OAAD,IAAY,KAAK6M,GAAL,CAASjM,OAAE,CAACnb,WAAZ,CAAhB,EAA0C;AACxC,aAAO,KAAKq2D,SAAL,CAAe/7C,IAAf,EAAqBf,QAArB,EAA+BnG,QAA/B,EAAyCmH,OAAzC,EAAkD/S,KAAlD,CAAP;AACD,KAFD,MAEO,IAAI,KAAK/B,KAAL,CAAW0V,OAAE,CAAC5a,SAAd,CAAJ,EAA8B;AACnC,aAAO,KAAK+hD,6BAAL,CACLhoC,IADK,EAELf,QAFK,EAGLnG,QAHK,EAIL5L,KAJK,CAAP;AAMD;;AAED,QAAIuS,QAAQ,GAAG,KAAf;;AACA,QAAI,KAAKtU,KAAL,CAAW0V,OAAE,CAAChb,WAAd,CAAJ,EAAgC;AAC9B,UAAIoa,OAAO,IAAI,KAAK+hC,iBAAL,SAAf,EAAuE;AAErE90C,QAAAA,KAAK,CAACkT,IAAN,GAAa,IAAb;AACA,eAAOJ,IAAP;AACD;;AACD9S,MAAAA,KAAK,CAACgT,mBAAN,GAA4BT,QAAQ,GAAG,IAAvC;AACA,WAAKiD,IAAL;AACD;;AAED,QAAI,CAACzC,OAAD,IAAY,KAAK9U,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAhB,EAAuC;AACrC,aAAO,KAAK22D,+BAAL,CACLh8C,IADK,EAELf,QAFK,EAGLnG,QAHK,EAIL5L,KAJK,EAKLuS,QALK,CAAP;AAOD,KARD,MAQO,IAAIA,QAAQ,IAAI,KAAKtU,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CAAZ,IAAuC,KAAKmoB,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAA3C,EAA6D;AAClE,aAAO,KAAKs2D,WAAL,CAAiBj8C,IAAjB,EAAuBf,QAAvB,EAAiCnG,QAAjC,EAA2C5L,KAA3C,EAAkDuS,QAAlD,CAAP;AACD,KAFM,MAEA;AACLvS,MAAAA,KAAK,CAACkT,IAAN,GAAa,IAAb;AACA,aAAOJ,IAAP;AACD;AACF;;AAMDi8C,EAAAA,WAAW,CACTj8C,IADS,EAETf,QAFS,EAGTnG,QAHS,EAIT5L,KAJS,EAKTuS,QALS,EAMwC;AACjD,UAAMxT,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA,UAAMwF,QAAQ,GAAG,KAAKwO,GAAL,CAASjM,OAAE,CAAClc,QAAZ,CAAjB;AACAsH,IAAAA,IAAI,CAACmoC,MAAL,GAAcp0B,IAAd;AACA/T,IAAAA,IAAI,CAACqS,QAAL,GAAgBA,QAAhB;AACA,UAAM7Z,WAAW,GACf,CAAC6Z,QAAD,IAAa,KAAKnT,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAb,IAA2C,KAAKyI,KAAL,CAAWyN,KADxD;AAEA,UAAM8Y,QAAQ,GAAGnV,QAAQ,GACrB,KAAKyO,eAAL,EADqB,GAErBtoB,WAAW,GACX,KAAKy3D,gBAAL,EADW,GAEX,KAAK7uC,eAAL,CAAqB,IAArB,CAJJ;;AAMA,QAAI5oB,WAAW,KAAK,KAApB,EAA2B;AACzB,UAAIwH,IAAI,CAACmoC,MAAL,CAAYlmC,IAAZ,KAAqB,OAAzB,EAAkC;AAChC,aAAKkL,KAAL,CAAW6F,QAAX,EAAqBM,aAAM,CAACvJ,iBAA5B;AACD;;AACD,WAAKo+C,UAAL,CAAgBO,cAAhB,CAA+BlwD,WAA/B,EAA4CgvB,QAAQ,CAAC9oB,KAArD;AACD;;AACDsB,IAAAA,IAAI,CAACwnB,QAAL,GAAgBA,QAAhB;;AAEA,QAAInV,QAAJ,EAAc;AACZ,WAAKmO,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACD;;AAED,QAAIoI,KAAK,CAACgT,mBAAV,EAA+B;AAC7BjU,MAAAA,IAAI,CAACwT,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKlB,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAGD8vD,EAAAA,SAAS,CACP/7C,IADO,EAEPf,QAFO,EAGPnG,QAHO,EAIPmH,OAJO,EAKP/S,KALO,EAMO;AACd,UAAMjB,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,IAAAA,IAAI,CAACmoC,MAAL,GAAcp0B,IAAd;AACA/T,IAAAA,IAAI,CAACyT,MAAL,GAAc,KAAKy8C,eAAL,EAAd;AACAjvD,IAAAA,KAAK,CAACkT,IAAN,GAAa,IAAb;AACA,WAAO,KAAK2d,eAAL,CACL,KAAKxf,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CADK,EAELgT,QAFK,EAGLnG,QAHK,EAILmH,OAJK,CAAP;AAMD;;AAMD+7C,EAAAA,+BAA+B,CAC7Bh8C,IAD6B,EAE7Bf,QAF6B,EAG7BnG,QAH6B,EAI7B5L,KAJ6B,EAK7BuS,QAL6B,EAMf;AACd,UAAMunC,yBAAyB,GAAG,KAAK95C,KAAL,CAAWgpB,sBAA7C;AACA,QAAIhX,mBAAmB,GAAG,IAA1B;AAEA,SAAKhS,KAAL,CAAWgpB,sBAAX,GAAoC,IAApC;AACA,SAAKxT,IAAL;AAEA,QAAIzW,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAX;AACA7M,IAAAA,IAAI,CAACyT,MAAL,GAAcM,IAAd;;AAEA,QAAI9S,KAAK,CAAC4uD,eAAV,EAA2B;AACzB,WAAKnE,eAAL,CAAqB9wC,KAArB,CAA2BkvC,kBAAkB,EAA7C;AACA72C,MAAAA,mBAAmB,GAAG,IAAI44C,gBAAJ,EAAtB;AACD;;AAED,QAAI5qD,KAAK,CAACgT,mBAAV,EAA+B;AAC7BjU,MAAAA,IAAI,CAACwT,QAAL,GAAgBA,QAAhB;AACD;;AAED,QAAIA,QAAJ,EAAc;AACZxT,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CAAkCnd,OAAE,CAACvb,MAArC,CAAjB;AACD,KAFD,MAEO;AACL2G,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CACfnd,OAAE,CAACvb,MADY,EAEf0a,IAAI,CAAC9R,IAAL,KAAc,QAFC,EAGf8R,IAAI,CAAC9R,IAAL,KAAc,OAHC,EAIfjC,IAJe,EAKfiT,mBALe,CAAjB;AAOD;;AACD,SAAKM,oBAAL,CAA0BvT,IAA1B,EAAgCiB,KAAK,CAACgT,mBAAtC;;AAEA,QAAIhT,KAAK,CAAC4uD,eAAN,IAAyB,KAAKp/B,qBAAL,EAAzB,IAAyD,CAACjd,QAA9D,EAAwE;AACtEvS,MAAAA,KAAK,CAACkT,IAAN,GAAa,IAAb;AACA,WAAKu3C,eAAL,CAAqB/B,iBAArB;AACA,WAAK+B,eAAL,CAAqB7wC,IAArB;AACA7a,MAAAA,IAAI,GAAG,KAAKuwB,iCAAL,CACL,KAAK/gB,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CADK,EAEL7M,IAFK,CAAP;AAID,KARD,MAQO;AACL,UAAIiB,KAAK,CAAC4uD,eAAV,EAA2B;AACzB,aAAKhF,qBAAL,CAA2B53C,mBAA3B,EAAgD,IAAhD;AACA,aAAKy4C,eAAL,CAAqB7wC,IAArB;AACD;;AACD,WAAKlH,qBAAL,CAA2B3T,IAA3B;AACD;;AAED,SAAKiB,KAAL,CAAWgpB,sBAAX,GAAoC8wB,yBAApC;AAEA,WAAO/6C,IAAP;AACD;;AAED2T,EAAAA,qBAAqB,CACnB3T,IADmB,EAEnB4tB,mBAFmB,EAGnB;AACA,SAAK8+B,oBAAL,CAA0B1sD,IAAI,CAACmC,SAA/B,EAA0CyrB,mBAA1C;AACD;;AAIDmuB,EAAAA,6BAA6B,CAC3BhoC,IAD2B,EAE3Bf,QAF2B,EAG3BnG,QAH2B,EAI3B5L,KAJ2B,EAKC;AAC5B,UAAMjB,IAAgC,GAAG,KAAKwP,WAAL,CACvCwD,QADuC,EAEvCnG,QAFuC,CAAzC;AAIA7M,IAAAA,IAAI,CAACmwD,GAAL,GAAWp8C,IAAX;AACA/T,IAAAA,IAAI,CAACowD,KAAL,GAAa,KAAK1a,aAAL,CAAmB,IAAnB,CAAb;;AACA,QAAIz0C,KAAK,CAACgT,mBAAV,EAA+B;AAC7B,WAAK9G,KAAL,CAAW6F,QAAX,EAAqBM,aAAM,CAACnL,0BAA5B;AACD;;AACD,WAAO,KAAKmK,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED67C,EAAAA,oBAAoB,CAAC9nC,IAAD,EAA8B;AAChD,WACEA,IAAI,CAAC9R,IAAL,KAAc,YAAd,IACA8R,IAAI,CAAClc,IAAL,KAAc,OADd,IAEA,KAAKoJ,KAAL,CAAWgM,UAAX,KAA0B8G,IAAI,CAACpV,GAF/B,IAGA,CAAC,KAAK+pB,kBAAL,EAHD,IAKA3U,IAAI,CAACpV,GAAL,GAAWoV,IAAI,CAACrV,KAAhB,KAA0B,CAL1B,IAMAqV,IAAI,CAACrV,KAAL,KAAe,KAAKuC,KAAL,CAAW2kC,gBAP5B;AASD;;AAEDryB,EAAAA,oBAAoB,CAClBvT,IADkB,EAElBwT,QAFkB,EAGJ;AACd,QAAIxT,IAAI,CAACyT,MAAL,CAAYxR,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,UAAIjC,IAAI,CAACmC,SAAL,CAAevB,MAAf,KAA0B,CAA9B,EAAiC;AAGxB;AACL,cAAI,CAAC,KAAKnB,SAAL,CAAe,kBAAf,CAAL,EAAyC;AACvC,iBAAKggD,YAAL,CAAkB,kBAAlB;AACD;AACF;AACF;;AACD,UAAIz/C,IAAI,CAACmC,SAAL,CAAevB,MAAf,KAA0B,CAA1B,IAA+BZ,IAAI,CAACmC,SAAL,CAAevB,MAAf,GAAwB,CAA3D,EAA8D;AAC5D,aAAKuM,KAAL,CACEnN,IAAI,CAACtB,KADP,EAEE4U,aAAM,CAAC7N,eAFT,EAGE,KAAKhG,SAAL,CAAe,kBAAf,KACE,KAAKA,SAAL,CAAe,kBAAf,CADF,GAEI,sBAFJ,GAGI,cANN;AAQD,OATD,MASO;AACL,aAAK,MAAM+sD,GAAX,IAAkBxsD,IAAI,CAACmC,SAAvB,EAAkC;AAChC,cAAIqqD,GAAG,CAACvqD,IAAJ,KAAa,eAAjB,EAAkC;AAChC,iBAAKkL,KAAL,CAAWq/C,GAAG,CAAC9tD,KAAf,EAAsB4U,aAAM,CAAC3N,wBAA7B;AACD;AACF;AACF;AACF;;AACD,WAAO,KAAK2M,UAAL,CACLtS,IADK,EAELwT,QAAQ,GAAG,wBAAH,GAA8B,gBAFjC,CAAP;AAID;;AAEDue,EAAAA,4BAA4B,CAC1BjE,KAD0B,EAE1BuiC,aAF0B,EAG1BC,gBAH0B,EAI1BC,YAJ0B,EAK1Bt9C,mBAL0B,EAMK;AAC/B,UAAMg6C,IAAI,GAAG,EAAb;AACA,QAAIjlC,KAAK,GAAG,IAAZ;AACA,UAAMwoC,6BAA6B,GAAG,KAAKvvD,KAAL,CAAWolC,0BAAjD;AACA,SAAKplC,KAAL,CAAWolC,0BAAX,GAAwC,KAAxC;;AAEA,WAAO,CAAC,KAAKxlB,GAAL,CAASiN,KAAT,CAAR,EAAyB;AACvB,UAAI9F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CAAY5L,OAAE,CAACtb,KAAf;;AACA,YAAI,KAAK4F,KAAL,CAAW4uB,KAAX,CAAJ,EAAuB;AACrB,cACEuiC,aAAa,IACb,CAAC,KAAK5wD,SAAL,CAAe,kBAAf,CADD,IAEA,CAAC,KAAKA,SAAL,CAAe,kBAAf,CAHH,EAIE;AACA,iBAAK0N,KAAL,CACE,KAAKlM,KAAL,CAAW6L,YADb,EAEEwG,aAAM,CAAC9N,+BAFT;AAID;;AACD,cAAI+qD,YAAJ,EAAkB;AAChB,iBAAK//C,QAAL,CACE+/C,YADF,EAEE,eAFF,EAGE,KAAKtvD,KAAL,CAAW6L,YAHb;AAKD;;AACD,eAAK2J,IAAL;AACA;AACD;AACF;;AAEDw2C,MAAAA,IAAI,CAAC/rD,IAAL,CACE,KAAKuvD,iBAAL,CAAuB,KAAvB,EAA8Bx9C,mBAA9B,EAAmDq9C,gBAAnD,CADF;AAGD;;AAED,SAAKrvD,KAAL,CAAWolC,0BAAX,GAAwCmqB,6BAAxC;AAEA,WAAOvD,IAAP;AACD;;AAEDx8B,EAAAA,qBAAqB,GAAY;AAC/B,WAAO,KAAKvxB,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,KAAwB,CAAC,KAAK6uB,kBAAL,EAAhC;AACD;;AAED6H,EAAAA,iCAAiC,CAC/BvwB,IAD+B,EAE/BwwB,IAF+B,EAGJ;AAAA;;AAC3B,SAAKjuB,iCAAL,CAAuCiuB,IAAvC;AACA,SAAKhQ,MAAL,CAAY5L,OAAE,CAAC/a,KAAf;AACA,SAAKy4B,oBAAL,CACEtyB,IADF,EAEEwwB,IAAI,CAACruB,SAFP,EAGE,IAHF,iBAIEquB,IAAI,CAAC9gB,KAJP,qBAIE,YAAYgc,aAJd;AAOArrB,IAAAA,gBAAgB,CAACL,IAAD,EAAOwwB,IAAI,CAAClwB,aAAZ,CAAhB;AAEAD,IAAAA,gBAAgB,CAACL,IAAD,EAAOwwB,IAAI,CAAC/c,MAAL,CAAYvT,gBAAnB,CAAhB;AACA,WAAOF,IAAP;AACD;;AAIDkwD,EAAAA,eAAe,GAAiB;AAC9B,UAAMl9C,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,WAAO,KAAKilB,eAAL,CAAqB,KAAKhP,aAAL,EAArB,EAA2C9P,QAA3C,EAAqDnG,QAArD,EAA+D,IAA/D,CAAP;AACD;;AAcDiW,EAAAA,aAAa,CAAC7P,mBAAD,EAAwD;AACnE,QAAIjT,IAAJ;;AAEA,YAAQ,KAAKiB,KAAL,CAAWgB,IAAnB;AACE,WAAK2S,OAAE,CAAC5X,MAAR;AACE,eAAO,KAAK0zD,UAAL,EAAP;;AAEF,WAAK97C,OAAE,CAACxX,OAAR;AACE4C,QAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;AACA,aAAKsE,IAAL;;AAEA,YAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAClb,GAAd,CAAJ,EAAwB;AACtB,iBAAO,KAAKi3D,uBAAL,CAA6B3wD,IAA7B,CAAP;AACD;;AAED,YAAI,CAAC,KAAKd,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAL,EAA4B;AAC1B,eAAK+T,KAAL,CAAW,KAAKlM,KAAL,CAAW6L,YAAtB,EAAoCwG,aAAM,CAACjI,iBAA3C;AACD;;AACD,eAAO,KAAKiH,UAAL,CAAgBtS,IAAhB,EAAsB,QAAtB,CAAP;;AACF,WAAK4U,OAAE,CAAC7X,KAAR;AACEiD,QAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;AACA,aAAKsE,IAAL;AACA,eAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAAC/c,IAAR;AAAc;AACZ,cACE,KAAK0qB,YAAL,CAAkB,QAAlB,KACA,KAAKwzB,iBAAL,UADA,IAEA,CAAC,KAAK8E,qBAAL,EAHH,EAIE;AACA,mBAAO,KAAK+V,qBAAL,EAAP;AACD;;AACD,gBAAM/+B,UAAU,GAAG,KAAK5wB,KAAL,CAAW2kC,gBAAX,KAAgC,KAAK3kC,KAAL,CAAWvC,KAA9D;AACA,gBAAMgoC,WAAW,GAAG,KAAKzlC,KAAL,CAAWylC,WAA/B;AACA,gBAAM/0B,EAAE,GAAG,KAAKyP,eAAL,EAAX;;AAEA,cAAI,CAACslB,WAAD,IAAgB/0B,EAAE,CAAC9Z,IAAH,KAAY,OAA5B,IAAuC,CAAC,KAAK6wB,kBAAL,EAA5C,EAAuE;AACrE,gBAAI,KAAKxpB,KAAL,CAAW0V,OAAE,CAACxY,SAAd,CAAJ,EAA8B;AAC5B,mBAAKmG,iCAAL,CAAuCoP,EAAvC;AACA,mBAAK8E,IAAL;AACA,qBAAO,KAAKo6C,aAAL,CACL,KAAKx8C,eAAL,CAAqB1C,EAArB,CADK,EAELxR,SAFK,EAGL,IAHK,CAAP;AAKD,aARD,MAQO,IAAI,KAAKjB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AAI9B,kBAAI,KAAKk+C,iBAAL,SAAJ,EAAqD;AAInD,uBAAO,KAAK+a,4BAAL,CACL,KAAKz8C,eAAL,CAAqB1C,EAArB,CADK,CAAP;AAGD,eAPD,MAOO;AAGL,uBAAOA,EAAP;AACD;AACF,aAhBM,MAgBA,IAAI,KAAKzS,KAAL,CAAW0V,OAAE,CAAC5Y,GAAd,CAAJ,EAAwB;AAC7B,mBAAKuG,iCAAL,CAAuCoP,EAAvC;AACA,qBAAO,KAAKo/C,OAAL,CAAa,KAAK18C,eAAL,CAAqB1C,EAArB,CAAb,EAAuC,IAAvC,CAAP;AACD;AACF;;AAED,cAAIkgB,UAAU,IAAI,KAAK3yB,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,CAAd,IAAsC,CAAC,KAAK6uB,kBAAL,EAA3C,EAAsE;AACpE,iBAAKjS,IAAL;AACA,mBAAO,KAAK6b,oBAAL,CACL,KAAKje,eAAL,CAAqB1C,EAArB,CADK,EAEL,CAACA,EAAD,CAFK,EAGL,KAHK,CAAP;AAKD;;AAED,iBAAOA,EAAP;AACD;;AAED,WAAKiD,OAAE,CAAC5Y,GAAR;AAAa;AACX,iBAAO,KAAK+0D,OAAL,CAAa,KAAK5+C,SAAL,EAAb,EAA+B,KAA/B,CAAP;AACD;;AAED,WAAKyC,OAAE,CAACpZ,KAAR;AACA,WAAKoZ,OAAE,CAACra,WAAR;AAAqB;AACnB,eAAK0qD,UAAL;AACA,iBAAO,KAAK92C,kBAAL,CAAwB,KAAKlN,KAAL,CAAWyN,KAAnC,CAAP;AACD;;AAED,WAAKkG,OAAE,CAACzc,GAAR;AACE,eAAO,KAAK8W,mBAAL,CAAyB,KAAKhO,KAAL,CAAWyN,KAApC,CAAP;;AAEF,WAAKkG,OAAE,CAACxc,MAAR;AACE,eAAO,KAAKqW,kBAAL,CAAwB,KAAKxN,KAAL,CAAWyN,KAAnC,CAAP;;AAEF,WAAKkG,OAAE,CAACvc,OAAR;AACE,eAAO,KAAKyW,mBAAL,CAAyB,KAAK7N,KAAL,CAAWyN,KAApC,CAAP;;AAEF,WAAKkG,OAAE,CAACrc,MAAR;AACE,eAAO,KAAKyW,kBAAL,CAAwB,KAAK/N,KAAL,CAAWyN,KAAnC,CAAP;;AAEF,WAAKkG,OAAE,CAACvX,KAAR;AACE,eAAO,KAAK6R,gBAAL,EAAP;;AAEF,WAAK0F,OAAE,CAACtX,KAAR;AACE,eAAO,KAAK6R,mBAAL,CAAyB,IAAzB,CAAP;;AACF,WAAKyF,OAAE,CAACrX,MAAR;AACE,eAAO,KAAK4R,mBAAL,CAAyB,KAAzB,CAAP;;AAEF,WAAKyF,OAAE,CAACxb,MAAR;AAAgB;AACd,gBAAMy4B,UAAU,GAAG,KAAK5wB,KAAL,CAAW2kC,gBAAX,KAAgC,KAAK3kC,KAAL,CAAWvC,KAA9D;AACA,iBAAO,KAAKkzB,kCAAL,CAAwCC,UAAxC,CAAP;AACD;;AAED,WAAKjd,OAAE,CAAChc,WAAR;AACA,WAAKgc,OAAE,CAACjc,YAAR;AAAsB;AACpB,iBAAO,KAAKk1B,cAAL,CACL,KAAK5sB,KAAL,CAAWgB,IAAX,KAAoB2S,OAAE,CAAChc,WAAvB,GAAqCgc,OAAE,CAAC9b,WAAxC,GAAsD8b,OAAE,CAAC/b,QADpD,EAEc,KAFd,EAGS,IAHT,EAILoa,mBAJK,CAAP;AAMD;;AACD,WAAK2B,OAAE,CAAClc,QAAR;AAAkB;AAChB,iBAAO,KAAKm1B,cAAL,CACLjZ,OAAE,CAAC/b,QADE,EAEc,IAFd,EAGS,KAHT,EAILoa,mBAJK,CAAP;AAMD;;AACD,WAAK2B,OAAE,CAAC5b,SAAR;AACA,WAAK4b,OAAE,CAAC3b,UAAR;AAAoB;AAClB,iBAAO,KAAK6zD,eAAL,CACL,KAAK7rD,KAAL,CAAWgB,IAAX,KAAoB2S,OAAE,CAAC5b,SAAvB,GAAmC4b,OAAE,CAACzb,SAAtC,GAAkDyb,OAAE,CAAC1b,MADhD,EAEW,KAFX,EAGU,IAHV,EAIL+Z,mBAJK,CAAP;AAMD;;AACD,WAAK2B,OAAE,CAAC7b,MAAR;AAAgB;AACd,iBAAO,KAAK+zD,eAAL,CACLl4C,OAAE,CAAC1b,MADE,EAEW,KAFX,EAGU,KAHV,EAIL+Z,mBAJK,CAAP;AAMD;;AACD,WAAK2B,OAAE,CAACxY,SAAR;AACE,eAAO,KAAK40D,2BAAL,EAAP;;AAEF,WAAKp8C,OAAE,CAAC1a,EAAR;AACE,aAAK+2D,eAAL;;AAEF,WAAKr8C,OAAE,CAAC3X,MAAR;AACE+C,QAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;AACA,aAAKmtC,cAAL,CAAoBt/C,IAApB;AACA,eAAO,KAAKq6C,UAAL,CAAgBr6C,IAAhB,EAAsB,KAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAAC9X,IAAR;AACE,eAAO,KAAKo0D,mBAAL,EAAP;;AAEF,WAAKt8C,OAAE,CAAC5a,SAAR;AACE,eAAO,KAAK07C,aAAL,CAAmB,KAAnB,CAAP;;AAIF,WAAK9gC,OAAE,CAACnb,WAAR;AAAqB;AACnBuG,UAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;AACA,eAAKsE,IAAL;AACAzW,UAAAA,IAAI,CAACmoC,MAAL,GAAc,IAAd;AACA,gBAAM10B,MAAM,GAAIzT,IAAI,CAACyT,MAAL,GAAc,KAAKy8C,eAAL,EAA9B;;AACA,cAAIz8C,MAAM,CAACxR,IAAP,KAAgB,kBAApB,EAAwC;AACtC,mBAAO,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAFD,MAEO;AACL,kBAAM,KAAKmN,KAAL,CAAWsG,MAAM,CAAC/U,KAAlB,EAAyB4U,aAAM,CAACpI,eAAhC,CAAN;AACD;AACF;;AAED,WAAK0J,OAAE,CAACpc,WAAR;AAAqB;AAInB,gBAAMkG,KAAK,GAAG,KAAKuC,KAAL,CAAWvC,KAAzB;AACA,gBAAMgQ,KAAK,GAAG,KAAKzN,KAAL,CAAWyN,KAAzB;AACA1O,UAAAA,IAAI,GAAG,KAAKiwD,gBAAL,EAAP;;AACA,cAAI,KAAK/wD,KAAL,CAAW0V,OAAE,CAACpX,GAAd,CAAJ,EAAwB;AACtB,iBAAKiiD,YAAL,CAAkB,WAAlB;AACA,iBAAK0I,UAAL,CAAgBO,cAAhB,CAA+Bh6C,KAA/B,EAAsC1O,IAAI,CAACtB,KAA3C;AACD,WAHD,MAGO,IAAI,KAAKe,SAAL,CAAe,WAAf,CAAJ,EAAiC;AACtC,iBAAK0N,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACxK,mBAApC,EAAyD4F,KAAzD;AACD,WAFM,MAEA;AACL,kBAAM,KAAKkU,UAAL,CAAgBlkB,KAAhB,CAAN;AACD;;AACD,iBAAOsB,IAAP;AACD;;AACD,WAAK4U,OAAE,CAACza,IAAR;AAAc;AACZ,cAAI,KAAK8G,KAAL,CAAW4kC,UAAf,EAA2B;AACzB7lC,YAAAA,IAAI,GAAG,KAAKmS,SAAL,EAAP;;AAEA,gBACE,KAAKvS,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAD3D,EAEE;AACA,mBAAKuN,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACzK,iCAA9B;AACD;;AAED,iBAAK4N,IAAL;;AAEA,gBAAI,CAAC,KAAK06C,mDAAL,EAAL,EAAiE;AAC/D,mBAAKhkD,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAC1K,sBAA9B;AACD;;AAED,iBAAKwoD,sBAAL;AACA,mBAAO,KAAK9+C,UAAL,CAAgBtS,IAAhB,EAAsB,+BAAtB,CAAP;AACD;AACF;;AAED,WAAK4U,OAAE,CAACzZ,UAAR;AAAoB;AAClB,cAAI,KAAK8F,KAAL,CAAWyN,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,kBAAM2iD,WAAW,GAAG,KAAKtyD,KAAL,CAAWuyD,WAAX,CAAuB,KAAKz7B,cAAL,EAAvB,CAApB;;AACA,gBACEvgB,iBAAiB,CAAC+7C,WAAD,CAAjB,IACAA,WAAW,OAFb,EAGE;AACA,qBAAK7G,eAAL,CAAqB,CAAC,KAAD,EAAQ,MAAR,EAAgB,YAAhB,CAArB;AACD;AACF;AACF;;AAED;AACE,cAAM,KAAK5nC,UAAL,EAAN;AAnOJ;AAqOD;;AAGDkuC,EAAAA,4BAA4B,CAAC9wD,IAAD,EAA0C;AAGpE,SAAKo5C,SAAL,CAAex+B,KAAf,CAAqBsxB,aAAa,CAAC,IAAD,EAAO,KAAKkN,SAAL,CAAerN,QAAtB,CAAlC;AACA,UAAM3pC,MAAM,GAAG,CAAC,KAAKgf,eAAL,EAAD,CAAf;AACA,SAAKg4B,SAAL,CAAev+B,IAAf;;AACA,QAAI,KAAK+0B,qBAAL,EAAJ,EAAkC;AAChC,WAAKziC,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACtM,yBAAlC;AACD;;AACD,SAAKwZ,MAAL,CAAY5L,OAAE,CAAC/a,KAAf;AAEA,SAAKy4B,oBAAL,CAA0BtyB,IAA1B,EAAgCoC,MAAhC,EAAwC,IAAxC;AACA,WAAOpC,IAAP;AACD;;AAID+wD,EAAAA,OAAO,CAAC/wD,IAAD,EAAegQ,OAAf,EAAiD;AACtD,SAAKyvC,YAAL,CAAkB,eAAlB;;AACA,QAAIzvC,OAAJ,EAAa;AACX,WAAKyvC,YAAL,CAAkB,oBAAlB;AACD;;AACDz/C,IAAAA,IAAI,CAACqxB,KAAL,GAAarhB,OAAb;AACA,SAAKyG,IAAL;AACA,UAAM00C,SAAS,GAAG,KAAKlqD,KAAL,CAAWqlC,MAA7B;AACA,SAAKrlC,KAAL,CAAWqlC,MAAX,GAAoB,EAApB;;AACA,QAAIt2B,OAAJ,EAAa;AAGX,WAAKopC,SAAL,CAAex+B,KAAf,CAAqB4wB,WAArB;AACAxrC,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKquC,UAAL,EAAZ;AACA,WAAKhG,SAAL,CAAev+B,IAAf;AACD,KAND,MAMO;AACL7a,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKquC,UAAL,EAAZ;AACD;;AAED,SAAKn+C,KAAL,CAAWqlC,MAAX,GAAoB6kB,SAApB;AACA,WAAO,KAAK74C,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAGD0wD,EAAAA,UAAU,GAAY;AACpB,UAAM1wD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;;AACA,QACE,KAAKvX,KAAL,CAAW0V,OAAE,CAACxb,MAAd,KACA,CAAC,KAAK0hB,KAAL,CAAW9I,gBADZ,IAEA,CAAC,KAAKla,OAAL,CAAa+pD,uBAHhB,EAIE;AACA,WAAK10C,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACxJ,eAA9B;AACD,KAND,MAMO,IACL,CAAC,KAAKgR,KAAL,CAAWZ,UAAZ,IACA,CAAC,KAAKpiB,OAAL,CAAa+pD,uBAFT,EAGL;AACA,WAAK10C,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACvI,eAA9B;AACD;;AAED,QACE,CAAC,KAAK7L,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAD,IACA,CAAC,KAAK8F,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CADD,IAEA,CAAC,KAAKwG,KAAL,CAAW0V,OAAE,CAAClb,GAAd,CAHH,EAIE;AACA,WAAKyT,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAC7H,gBAA9B;AACD;;AAED,WAAO,KAAK6G,UAAL,CAAgBtS,IAAhB,EAAsB,OAAtB,CAAP;AACD;;AAEDwR,EAAAA,qBAAqB,CACnBod,oBADmB,EAEW;AAC9B,UAAM2iC,SAAS,GAAG,KAAKryD,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAlB;;AAEA,QAAI+4D,SAAJ,EAAe;AACb,UAAI,CAAC3iC,oBAAL,EAA2B;AACzB,aAAKzhB,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiC4U,aAAM,CAACzI,sBAAxC;AACD;;AACD,aAAO,KAAKolD,gBAAL,EAAP;AACD,KALD,MAKO;AACL,aAAO,KAAK7uC,eAAL,CAAqB,IAArB,CAAP;AACD;AACF;;AAED6uC,EAAAA,gBAAgB,GAAkB;AAChC,UAAMjwD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAMR,EAAE,GAAG,KAAKnC,WAAL,CACT,KAAKvO,KAAL,CAAWvC,KAAX,GAAmB,CADV,EAIT,IAAIL,QAAJ,CACE,KAAK4C,KAAL,CAAW0kC,OADb,EAEE,KAAK1kC,KAAL,CAAWvC,KAAX,GAAmB,CAAnB,GAAuB,KAAKuC,KAAL,CAAWhC,SAFpC,CAJS,CAAX;AASA,UAAMpH,IAAI,GAAG,KAAKoJ,KAAL,CAAWyN,KAAxB;AACA,SAAK+H,IAAL;AACAzW,IAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK4W,gBAAL,CAAsB5W,EAAtB,EAA0B9Z,IAA1B,CAAV;AACA,WAAO,KAAKya,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDgxD,EAAAA,2BAA2B,GAA0C;AACnE,UAAMhxD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAOA,SAAKsE,IAAL;;AAEA,QAAI,KAAK2iC,SAAL,CAAerN,QAAf,IAA2B,KAAK7sC,KAAL,CAAW0V,OAAE,CAAClb,GAAd,CAA/B,EAAmD;AACjD,YAAM83D,IAAI,GAAG,KAAKjpC,gBAAL,CACX,KAAKlU,eAAL,CAAqBrU,IAArB,CADW,EAEX,UAFW,CAAb;AAIA,WAAKyW,IAAL;AACA,aAAO,KAAKg7C,iBAAL,CAAuBzxD,IAAvB,EAA6BwxD,IAA7B,EAAmC,MAAnC,CAAP;AACD;;AACD,WAAO,KAAKX,aAAL,CAAmB7wD,IAAnB,CAAP;AACD;;AAEDyxD,EAAAA,iBAAiB,CACfzxD,IADe,EAEfwxD,IAFe,EAGfE,YAHe,EAIC;AAChB1xD,IAAAA,IAAI,CAACwxD,IAAL,GAAYA,IAAZ;;AAEA,QAAIA,IAAI,CAAC35D,IAAL,KAAc,UAAd,IAA4B65D,YAAY,KAAK,MAAjD,EAAyD;AAEvD,UAAI,KAAKnvC,YAAL,CAAkBmvC,YAAlB,CAAJ,EAAqC;AACnC,aAAKjS,YAAL,CAAkB,cAAlB;AACD,OAFD,MAEO,IAAI,CAAC,KAAKhgD,SAAL,CAAe,cAAf,CAAL,EAAqC;AAE1C,aAAKmjB,UAAL;AACD;AACF;;AAED,UAAM8jB,WAAW,GAAG,KAAKzlC,KAAL,CAAWylC,WAA/B;AAEA1mC,IAAAA,IAAI,CAACwnB,QAAL,GAAgB,KAAKpG,eAAL,CAAqB,IAArB,CAAhB;;AAEA,QAAIphB,IAAI,CAACwnB,QAAL,CAAc3vB,IAAd,KAAuB65D,YAAvB,IAAuChrB,WAA3C,EAAwD;AACtD,WAAKv5B,KAAL,CACEnN,IAAI,CAACwnB,QAAL,CAAc9oB,KADhB,EAEE4U,aAAM,CAAChI,uBAFT,EAGEkmD,IAAI,CAAC35D,IAHP,EAIE65D,YAJF;AAMD;;AAED,WAAO,KAAKp/C,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAGD2wD,EAAAA,uBAAuB,CAAC3wD,IAAD,EAAuC;AAC5D,UAAM2R,EAAE,GAAG,KAAK4W,gBAAL,CAAsB,KAAKlU,eAAL,CAAqBrU,IAArB,CAAtB,EAAkD,QAAlD,CAAX;AACA,SAAKyW,IAAL;;AAEA,QAAI,KAAK8L,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,UAAI,CAAC,KAAKrM,QAAV,EAAoB;AAClB,aAAK/I,KAAL,CAAWwE,EAAE,CAACjT,KAAd,EAAqBizD,6BAAsB,CAACxlD,uBAA5C;AACD;;AACD,WAAK5M,iBAAL,GAAyB,IAAzB;AACD;;AAED,WAAO,KAAKkyD,iBAAL,CAAuBzxD,IAAvB,EAA6B2R,EAA7B,EAAiC,MAAjC,CAAP;AACD;;AAED2W,EAAAA,kBAAkB,CAChB5Z,KADgB,EAEhBzM,IAFgB,EAGhBjC,IAHgB,EAIb;AACH,SAAKwQ,QAAL,CAAcxQ,IAAd,EAAoB,UAApB,EAAgC0O,KAAhC;AACA,SAAK8B,QAAL,CAAcxQ,IAAd,EAAoB,KAApB,EAA2B,KAAKjB,KAAL,CAAW+Q,KAAX,CAAiB9P,IAAI,CAACtB,KAAtB,EAA6B,KAAKuC,KAAL,CAAWtC,GAAxC,CAA3B;AACAqB,IAAAA,IAAI,CAAC0O,KAAL,GAAaA,KAAb;AACA,SAAK+H,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAmBtS,IAAnB,EAAyBiC,IAAzB,CAAP;AACD;;AAED8M,EAAAA,YAAY,CAAYL,KAAZ,EAAwBzM,IAAxB,EAA0D;AACpE,UAAMjC,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAO,KAAKmW,kBAAL,CAAwB5Z,KAAxB,EAA+BzM,IAA/B,EAAqCjC,IAArC,CAAP;AACD;;AAEDgP,EAAAA,kBAAkB,CAACN,KAAD,EAAa;AAC7B,WAAO,KAAKK,YAAL,CAAmCL,KAAnC,EAA0C,eAA1C,CAAP;AACD;;AAEDO,EAAAA,mBAAmB,CAACP,KAAD,EAAa;AAC9B,WAAO,KAAKK,YAAL,CAAoCL,KAApC,EAA2C,gBAA3C,CAAP;AACD;;AAEDD,EAAAA,kBAAkB,CAACC,KAAD,EAAa;AAC7B,WAAO,KAAKK,YAAL,CAAmCL,KAAnC,EAA0C,eAA1C,CAAP;AACD;;AAEDI,EAAAA,mBAAmB,CAACJ,KAAD,EAAa;AAC9B,WAAO,KAAKK,YAAL,CAAoCL,KAApC,EAA2C,gBAA3C,CAAP;AACD;;AAEDP,EAAAA,kBAAkB,CAACO,KAAD,EAAwD;AACxE,UAAM1O,IAAI,GAAG,KAAK+O,YAAL,CACXL,KAAK,CAACA,KADK,EAEX,eAFW,CAAb;AAIA1O,IAAAA,IAAI,CAACoO,OAAL,GAAeM,KAAK,CAACN,OAArB;AACApO,IAAAA,IAAI,CAACqO,KAAL,GAAaK,KAAK,CAACL,KAAnB;AACA,WAAOrO,IAAP;AACD;;AAEDmP,EAAAA,mBAAmB,CAACT,KAAD,EAAiB;AAClC,UAAM1O,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAAC0O,KAAL,GAAaA,KAAb;AACA,SAAK+H,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAkCtS,IAAlC,EAAwC,gBAAxC,CAAP;AACD;;AAEDkP,EAAAA,gBAAgB,GAAG;AACjB,UAAMlP,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACA,WAAO,KAAKnE,UAAL,CAA+BtS,IAA/B,EAAqC,aAArC,CAAP;AACD;;AAGD4xB,EAAAA,kCAAkC,CAACC,UAAD,EAAoC;AACpE,UAAM7e,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AAEA,QAAIoT,GAAJ;AACA,SAAKxJ,IAAL;AACA,SAAKi1C,eAAL,CAAqB9wC,KAArB,CAA2BivC,iBAAiB,EAA5C;AAEA,UAAM9O,yBAAyB,GAAG,KAAK95C,KAAL,CAAWgpB,sBAA7C;AACA,UAAMumC,6BAA6B,GAAG,KAAKvvD,KAAL,CAAWolC,0BAAjD;AACA,SAAKplC,KAAL,CAAWgpB,sBAAX,GAAoC,IAApC;AACA,SAAKhpB,KAAL,CAAWolC,0BAAX,GAAwC,KAAxC;AAEA,UAAMurB,aAAa,GAAG,KAAK3wD,KAAL,CAAWvC,KAAjC;AACA,UAAMmzD,aAAa,GAAG,KAAK5wD,KAAL,CAAW4L,QAAjC;AACA,UAAM4gB,QAAQ,GAAG,EAAjB;AACA,UAAMxa,mBAAmB,GAAG,IAAI44C,gBAAJ,EAA5B;AACA,QAAI7jC,KAAK,GAAG,IAAZ;AACA,QAAI8pC,WAAJ;AACA,QAAIC,kBAAJ;;AAEA,WAAO,CAAC,KAAK7yD,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAR,EAA+B;AAC7B,UAAI2uB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CACE5L,OAAE,CAACtb,KADL,EAEE2Z,mBAAmB,CAACg4C,kBAApB,KAA2C,CAAC,CAA5C,GACI,IADJ,GAEIh4C,mBAAmB,CAACg4C,kBAJ1B;;AAMA,YAAI,KAAK/rD,KAAL,CAAW0V,OAAE,CAACvb,MAAd,CAAJ,EAA2B;AACzB04D,UAAAA,kBAAkB,GAAG,KAAK9wD,KAAL,CAAWvC,KAAhC;AACA;AACD;AACF;;AAED,UAAI,KAAKQ,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAJ,EAA6B;AAC3B,cAAMi4D,kBAAkB,GAAG,KAAK/wD,KAAL,CAAWvC,KAAtC;AACA,cAAMuzD,kBAAkB,GAAG,KAAKhxD,KAAL,CAAW4L,QAAtC;AACAilD,QAAAA,WAAW,GAAG,KAAK7wD,KAAL,CAAWvC,KAAzB;AACA+uB,QAAAA,QAAQ,CAACvsB,IAAT,CACE,KAAK4qB,cAAL,CACE,KAAK+gC,gBAAL,EADF,EAEEmF,kBAFF,EAGEC,kBAHF,CADF;AAQA,aAAKnU,mBAAL;AAEA;AACD,OAfD,MAeO;AACLrwB,QAAAA,QAAQ,CAACvsB,IAAT,CACE,KAAKgqB,uBAAL,CACEjY,mBADF,EAEE,KAAK6Y,cAFP,CADF;AAMD;AACF;;AAED,UAAMomC,WAAW,GAAG,KAAKjxD,KAAL,CAAWgM,UAA/B;AACA,UAAMklD,WAAW,GAAG,KAAKlxD,KAAL,CAAWiM,aAA/B;AACA,SAAKsT,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA,SAAK4H,KAAL,CAAWgpB,sBAAX,GAAoC8wB,yBAApC;AACA,SAAK95C,KAAL,CAAWolC,0BAAX,GAAwCmqB,6BAAxC;AAEA,QAAI4B,SAAS,GAAG,KAAK5iD,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAhB;;AACA,QACEglB,UAAU,IACV,KAAKL,gBAAL,EADA,KAEC4gC,SAAS,GAAG,KAAK7gC,UAAL,CAAgB6gC,SAAhB,CAFb,CADF,EAIE;AACA,WAAK1G,eAAL,CAAqB/B,iBAArB;AACA,WAAK+B,eAAL,CAAqB7wC,IAArB;AACA,WAAKyX,oBAAL,CAA0B8/B,SAA1B,EAAqC3kC,QAArC,EAA+C,KAA/C;AACA,aAAO2kC,SAAP;AACD;;AACD,SAAK1G,eAAL,CAAqB7wC,IAArB;;AAEA,QAAI,CAAC4S,QAAQ,CAAC7sB,MAAd,EAAsB;AACpB,WAAKgiB,UAAL,CAAgB,KAAK3hB,KAAL,CAAW6L,YAA3B;AACD;;AACD,QAAIilD,kBAAJ,EAAwB,KAAKnvC,UAAL,CAAgBmvC,kBAAhB;AACxB,QAAID,WAAJ,EAAiB,KAAKlvC,UAAL,CAAgBkvC,WAAhB;AACjB,SAAKjH,qBAAL,CAA2B53C,mBAA3B,EAAgD,IAAhD;AAEA,SAAKy5C,oBAAL,CAA0Bj/B,QAA1B,EAA8D,IAA9D;;AACA,QAAIA,QAAQ,CAAC7sB,MAAT,GAAkB,CAAtB,EAAyB;AACvBqf,MAAAA,GAAG,GAAG,KAAKzQ,WAAL,CAAiBoiD,aAAjB,EAAgCC,aAAhC,CAAN;AACA5xC,MAAAA,GAAG,CAACguC,WAAJ,GAAkBxgC,QAAlB;AAEA,WAAKnb,UAAL,CAAgB2N,GAAhB,EAAqB,oBAArB;AACAA,MAAAA,GAAG,CAACthB,GAAJ,GAAUuzD,WAAV;AACAjyC,MAAAA,GAAG,CAACjf,GAAJ,CAAQrC,GAAR,GAAcwzD,WAAd;AACD,KAPD,MAOO;AACLlyC,MAAAA,GAAG,GAAGwN,QAAQ,CAAC,CAAD,CAAd;AACD;;AAED,QAAI,CAAC,KAAK31B,OAAL,CAAamqD,8BAAlB,EAAkD;AAChD,WAAKzxC,QAAL,CAAcyP,GAAd,EAAmB,eAAnB,EAAoC,IAApC;AACA,WAAKzP,QAAL,CAAcyP,GAAd,EAAmB,YAAnB,EAAiCjN,QAAjC;AACA,aAAOiN,GAAP;AACD;;AAED,UAAMoyC,eAAe,GAAG,KAAK7iD,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAxB;AACAwlD,IAAAA,eAAe,CAAC5iD,UAAhB,GAA6BwQ,GAA7B;AACA,SAAK3N,UAAL,CAAgB+/C,eAAhB,EAAiC,yBAAjC;AACA,WAAOA,eAAP;AACD;;AAED7gC,EAAAA,gBAAgB,GAAY;AAC1B,WAAO,CAAC,KAAK9I,kBAAL,EAAR;AACD;;AAED6I,EAAAA,UAAU,CAACvxB,IAAD,EAA8D;AACtE,QAAI,KAAK6gB,GAAL,CAASjM,OAAE,CAAC/a,KAAZ,CAAJ,EAAwB;AACtB,aAAOmG,IAAP;AACD;AACF;;AAED8rB,EAAAA,cAAc,CACZ9rB,IADY,EAEZgT,QAFY,EAGZnG,QAHY,EAIE;AACd,WAAO7M,IAAP;AACD;;AAEDkxD,EAAAA,mBAAmB,GAAqC;AACtD,UAAMlxD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;;AACA,QAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAAClb,GAAd,CAAJ,EAAwB;AAEtB,YAAM83D,IAAI,GAAG,KAAKjpC,gBAAL,CAAsB,KAAKlU,eAAL,CAAqBrU,IAArB,CAAtB,EAAkD,KAAlD,CAAb;AACA,WAAKyW,IAAL;AACA,YAAM67C,QAAQ,GAAG,KAAKb,iBAAL,CAAuBzxD,IAAvB,EAA6BwxD,IAA7B,EAAmC,QAAnC,CAAjB;;AAEA,UAAI,CAAC,KAAK12C,KAAL,CAAWP,kBAAZ,IAAkC,CAAC,KAAKO,KAAL,CAAWV,OAAlD,EAA2D;AACzD,aAAKjN,KAAL,CAAWmlD,QAAQ,CAAC5zD,KAApB,EAA2B4U,aAAM,CAAC3I,mBAAlC;AACD;;AAED,aAAO2nD,QAAP;AACD;;AAED,WAAO,KAAKC,QAAL,CAAcvyD,IAAd,CAAP;AACD;;AAQDuyD,EAAAA,QAAQ,CAACvyD,IAAD,EAAsC;AAC5CA,IAAAA,IAAI,CAACyT,MAAL,GAAc,KAAKy8C,eAAL,EAAd;;AACA,QAAIlwD,IAAI,CAACyT,MAAL,CAAYxR,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,WAAKkL,KAAL,CAAWnN,IAAI,CAACyT,MAAL,CAAY/U,KAAvB,EAA8B4U,aAAM,CAAC5N,0BAArC;AACD,KAFD,MAEO,IAAI,KAAK6O,eAAL,CAAqBvU,IAAI,CAACyT,MAA1B,CAAJ,EAAuC;AAC5C,WAAKtG,KAAL,CAAW,KAAKlM,KAAL,CAAWgM,UAAtB,EAAkCqG,aAAM,CAACpL,qBAAzC;AACD,KAFM,MAEA,IAAI,KAAK2Y,GAAL,CAASjM,OAAE,CAAChb,WAAZ,CAAJ,EAA8B;AACnC,WAAKuT,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACpL,qBAApC;AACD;;AAED,SAAKkqB,iBAAL,CAAuBpyB,IAAvB;AACA,WAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDoyB,EAAAA,iBAAiB,CAACpyB,IAAD,EAA8B;AAC7C,QAAI,KAAK6gB,GAAL,CAASjM,OAAE,CAACxb,MAAZ,CAAJ,EAAyB;AACvB,YAAMsX,IAAI,GAAG,KAAK8hD,aAAL,CAAmB59C,OAAE,CAACvb,MAAtB,CAAb;AACA,WAAKs0B,gBAAL,CAAsBjd,IAAtB;AAEA1Q,MAAAA,IAAI,CAACmC,SAAL,GAAiBuO,IAAjB;AACD,KALD,MAKO;AACL1Q,MAAAA,IAAI,CAACmC,SAAL,GAAiB,EAAjB;AACD;AACF;;AAIDswD,EAAAA,oBAAoB,CAACC,QAAD,EAAuC;AACzD,UAAMpF,IAAI,GAAG,KAAKn7C,SAAL,EAAb;;AACA,QAAI,KAAKlR,KAAL,CAAWyN,KAAX,KAAqB,IAAzB,EAA+B;AAC7B,UAAI,CAACgkD,QAAL,EAAe;AACb,aAAKvlD,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiC4U,aAAM,CAACrN,6BAAxC;AACD;AACF;;AACDqnD,IAAAA,IAAI,CAAC5+C,KAAL,GAAa;AACXkB,MAAAA,GAAG,EAAE,KAAK7Q,KAAL,CACF+Q,KADE,CACI,KAAK7O,KAAL,CAAWvC,KADf,EACsB,KAAKuC,KAAL,CAAWtC,GADjC,EAEF4O,OAFE,CAEM,QAFN,EAEgB,IAFhB,CADM;AAIXolD,MAAAA,MAAM,EAAE,KAAK1xD,KAAL,CAAWyN;AAJR,KAAb;AAMA,SAAK+H,IAAL;AACA62C,IAAAA,IAAI,CAACsF,IAAL,GAAY,KAAK1zD,KAAL,CAAW0V,OAAE,CAAC5a,SAAd,CAAZ;AACA,WAAO,KAAKsY,UAAL,CAAgBg7C,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAGD5X,EAAAA,aAAa,CAACgd,QAAD,EAAuC;AAClD,UAAM1yD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACAzW,IAAAA,IAAI,CAACiuD,WAAL,GAAmB,EAAnB;AACA,QAAI4E,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAAb;AACA1yD,IAAAA,IAAI,CAAC8yD,MAAL,GAAc,CAACD,MAAD,CAAd;;AACA,WAAO,CAACA,MAAM,CAACD,IAAf,EAAqB;AACnB,WAAKpyC,MAAL,CAAY5L,OAAE,CAAC3a,YAAf;AACA+F,MAAAA,IAAI,CAACiuD,WAAL,CAAiB/sD,IAAjB,CAAsB,KAAKy0C,yBAAL,EAAtB;AACA,WAAKn1B,MAAL,CAAY5L,OAAE,CAAC1b,MAAf;AACA8G,MAAAA,IAAI,CAAC8yD,MAAL,CAAY5xD,IAAZ,CAAkB2xD,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAA3B;AACD;;AACD,SAAKj8C,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAGD21C,EAAAA,yBAAyB,GAAiB;AACxC,WAAO,KAAK70B,eAAL,EAAP;AACD;;AAIDgsC,EAAAA,eAAe,CACbh/B,KADa,EAEblb,SAFa,EAGb66C,QAHa,EAIbx6C,mBAJa,EAKV;AACH,QAAIw6C,QAAJ,EAAc;AACZ,WAAKhO,YAAL,CAAkB,gBAAlB;AACD;;AACD,UAAM+Q,6BAA6B,GAAG,KAAKvvD,KAAL,CAAWolC,0BAAjD;AACA,SAAKplC,KAAL,CAAWolC,0BAAX,GAAwC,KAAxC;AACA,UAAM0sB,QAAa,GAAGtwD,MAAM,CAACuwD,MAAP,CAAc,IAAd,CAAtB;AACA,QAAIhrC,KAAK,GAAG,IAAZ;AACA,UAAMhoB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAEAnS,IAAAA,IAAI,CAACkC,UAAL,GAAkB,EAAlB;AACA,SAAKuU,IAAL;;AAEA,WAAO,CAAC,KAAKvX,KAAL,CAAW4uB,KAAX,CAAR,EAA2B;AACzB,UAAI9F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CAAY5L,OAAE,CAACtb,KAAf;;AACA,YAAI,KAAK4F,KAAL,CAAW4uB,KAAX,CAAJ,EAAuB;AACrB,eAAKtd,QAAL,CAAcxQ,IAAd,EAAoB,eAApB,EAAqC,KAAKiB,KAAL,CAAW6L,YAAhD;AACA;AACD;AACF;;AAED,YAAM6F,IAAI,GAAG,KAAKsgD,uBAAL,CAA6BrgD,SAA7B,EAAwCK,mBAAxC,CAAb;;AACA,UAAI,CAACL,SAAL,EAAgB;AAEd,aAAK46C,UAAL,CAAgB76C,IAAhB,EAAsB86C,QAAtB,EAAgCsF,QAAhC,EAA0C9/C,mBAA1C;AACD;;AAED,UACEw6C,QAAQ,IACR,CAAC,KAAKv9C,gBAAL,CAAsByC,IAAtB,CADD,IAEAA,IAAI,CAAC1Q,IAAL,KAAc,eAHhB,EAIE;AACA,aAAKkL,KAAL,CAAWwF,IAAI,CAACjU,KAAhB,EAAuB4U,aAAM,CAAC1M,qBAA9B;AACD;;AAGD,UAAI+L,IAAI,CAACG,SAAT,EAAoB;AAClB,aAAKtC,QAAL,CAAcmC,IAAd,EAAoB,WAApB,EAAiC,IAAjC;AACD;;AAED3S,MAAAA,IAAI,CAACkC,UAAL,CAAgBhB,IAAhB,CAAqByR,IAArB;AACD;;AAED,SAAK8D,IAAL;AAEA,SAAKxV,KAAL,CAAWolC,0BAAX,GAAwCmqB,6BAAxC;AACA,QAAIvuD,IAAI,GAAG,kBAAX;;AACA,QAAI2Q,SAAJ,EAAe;AACb3Q,MAAAA,IAAI,GAAG,eAAP;AACD,KAFD,MAEO,IAAIwrD,QAAJ,EAAc;AACnBxrD,MAAAA,IAAI,GAAG,kBAAP;AACD;;AACD,WAAO,KAAKqQ,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAKDixD,EAAAA,wBAAwB,CAACvgD,IAAD,EAAkC;AACxD,WACE,CAACA,IAAI,CAACN,QAAN,IACAM,IAAI,CAACU,GAAL,CAASpR,IAAT,KAAkB,YADlB,KAEC,KAAK0tC,qBAAL,MACC,KAAKzwC,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CADD,IAEC,KAAKwG,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,CAJF,CADF;AAOD;;AAGD03D,EAAAA,uBAAuB,CACrBrgD,SADqB,EAErBK,mBAFqB,EAG6B;AAClD,QAAIioC,UAAU,GAAG,EAAjB;;AACA,QAAI,KAAKh8C,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAJ,EAAuB;AACrB,UAAI,KAAKuF,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,aAAK0N,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC9H,4BAApC;AACD;;AAID,aAAO,KAAKtM,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAP,EAA0B;AACxBghD,QAAAA,UAAU,CAACh6C,IAAX,CAAgB,KAAKgsD,cAAL,EAAhB;AACD;AACF;;AAED,UAAMv6C,IAAI,GAAG,KAAKR,SAAL,EAAb;AACA,QAAIhB,WAAW,GAAG,KAAlB;AACA,QAAInB,OAAO,GAAG,KAAd;AACA,QAAI6C,UAAU,GAAG,KAAjB;AACA,QAAIG,QAAJ;AACA,QAAInG,QAAJ;;AAEA,QAAI,KAAK3N,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAJ,EAA6B;AAC3B,UAAImhD,UAAU,CAACt6C,MAAf,EAAuB,KAAKgiB,UAAL;;AACvB,UAAIhQ,SAAJ,EAAe;AACb,aAAK6D,IAAL;AAEA9D,QAAAA,IAAI,CAAC0U,QAAL,GAAgB,KAAKjG,eAAL,EAAhB;AACA,aAAK08B,mBAAL;AACA,eAAO,KAAKxrC,UAAL,CAAgBK,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED,aAAO,KAAKg6C,WAAL,EAAP;AACD;;AAED,QAAIzR,UAAU,CAACt6C,MAAf,EAAuB;AACrB+R,MAAAA,IAAI,CAACuoC,UAAL,GAAkBA,UAAlB;AACAA,MAAAA,UAAU,GAAG,EAAb;AACD;;AAEDvoC,IAAAA,IAAI,CAACvC,MAAL,GAAc,KAAd;;AAEA,QAAIwC,SAAS,IAAIK,mBAAjB,EAAsC;AACpCD,MAAAA,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAAtB;AACAmO,MAAAA,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAAtB;AACD;;AAED,QAAI,CAAC+F,SAAL,EAAgB;AACdzB,MAAAA,WAAW,GAAG,KAAK0P,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAd;AACD;;AAED,UAAMmrC,WAAW,GAAG,KAAKzlC,KAAL,CAAWylC,WAA/B;AACA,UAAMrzB,GAAG,GAAG,KAAKsb,iBAAL,CAAuBhc,IAAvB,EAAwD,KAAxD,CAAZ;;AAEA,QACE,CAACC,SAAD,IACA,CAACzB,WADD,IAEA,CAACu1B,WAFD,IAGA,KAAKwsB,wBAAL,CAA8BvgD,IAA9B,CAJF,EAKE;AACA,YAAMwgD,OAAO,GAAG9/C,GAAG,CAACxb,IAApB;;AAGA,UAAIs7D,OAAO,KAAK,OAAZ,IAAuB,CAAC,KAAKvjB,qBAAL,EAA5B,EAA0D;AACxD5/B,QAAAA,OAAO,GAAG,IAAV;AACA,aAAKzN,iCAAL,CAAuC8Q,GAAvC;AACAlC,QAAAA,WAAW,GAAG,KAAK0P,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAd;AACA,aAAKozB,iBAAL,CAAuBhc,IAAvB,EAAwD,KAAxD;AACD;;AAGD,UAAIwgD,OAAO,KAAK,KAAZ,IAAqBA,OAAO,KAAK,KAArC,EAA4C;AAC1CtgD,QAAAA,UAAU,GAAG,IAAb;AACA,aAAKtQ,iCAAL,CAAuC8Q,GAAvC;AACAV,QAAAA,IAAI,CAACP,IAAL,GAAY+gD,OAAZ;;AACA,YAAI,KAAKj0D,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,CAAJ,EAAyB;AACvB4V,UAAAA,WAAW,GAAG,IAAd;AACA,eAAKhE,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACvQ,mBAAlC,EAAuDowD,OAAvD;AACA,eAAK18C,IAAL;AACD;;AACD,aAAKkY,iBAAL,CAAuBhc,IAAvB,EAAwD,KAAxD;AACD;AACF;;AAED,SAAKkc,iBAAL,CACElc,IADF,EAEEK,QAFF,EAGEnG,QAHF,EAIEsE,WAJF,EAKEnB,OALF,EAME4C,SANF,EAOEC,UAPF,EAQEI,mBARF;AAWA,WAAON,IAAP;AACD;;AAEDsrC,EAAAA,iCAAiC,CAC/B7tC,MAD+B,EAEvB;AACR,WAAOA,MAAM,CAACgC,IAAP,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAAnC;AACD;;AAGDjC,EAAAA,4BAA4B,CAACC,MAAD,EAAyC;AACnE,WAAOA,MAAM,CAAChO,MAAd;AACD;;AAIDssB,EAAAA,uBAAuB,CAACte,MAAD,EAA+C;AAAA;;AACpE,UAAMqX,UAAU,GAAG,KAAKw2B,iCAAL,CAAuC7tC,MAAvC,CAAnB;AACA,UAAMhO,MAAM,GAAG,KAAK+N,4BAAL,CAAkCC,MAAlC,CAAf;AAEA,UAAM1R,KAAK,GAAG0R,MAAM,CAAC1R,KAArB;;AAEA,QAAI0D,MAAM,CAACxB,MAAP,KAAkB6mB,UAAtB,EAAkC;AAChC,UAAIrX,MAAM,CAACgC,IAAP,KAAgB,KAApB,EAA2B;AACzB,aAAKjF,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC/P,cAAzB;AACD,OAFD,MAEO;AACL,aAAK4J,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC9P,cAAzB;AACD;AACF;;AAED,QACE4M,MAAM,CAACgC,IAAP,KAAgB,KAAhB,IACA,YAAAhQ,MAAM,CAACA,MAAM,CAACxB,MAAP,GAAgB,CAAjB,CAAN,6BAA2BqB,IAA3B,MAAoC,aAFtC,EAGE;AACA,WAAKkL,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC7P,sBAAzB;AACD;AACF;;AAGDiP,EAAAA,iBAAiB,CACfC,IADe,EAEfxB,WAFe,EAGfnB,OAHe,EAIf4C,SAJe,EAKfC,UALe,EAME;AACjB,QAAIA,UAAJ,EAAgB;AAEd,WAAKvB,WAAL,CACEqB,IADF,EAIExB,WAJF,EAKgB,KALhB,EAMsB,KANtB,EAOE,KAPF,EAQE,cARF;AAUA,WAAKud,uBAAL,CAA6B/b,IAA7B;AACA,aAAOA,IAAP;AACD;;AAED,QAAI3C,OAAO,IAAImB,WAAX,IAA0B,KAAKjS,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAA9B,EAAqD;AACnD,UAAIwZ,SAAJ,EAAe,KAAKgQ,UAAL;AACfjQ,MAAAA,IAAI,CAACP,IAAL,GAAY,QAAZ;AACAO,MAAAA,IAAI,CAACvC,MAAL,GAAc,IAAd;AACA,aAAO,KAAKkB,WAAL,CACLqB,IADK,EAELxB,WAFK,EAGLnB,OAHK,EAIe,KAJf,EAKL,KALK,EAML,cANK,CAAP;AAQD;AACF;;AAID+C,EAAAA,mBAAmB,CACjBJ,IADiB,EAEjBK,QAFiB,EAGjBnG,QAHiB,EAIjB+F,SAJiB,EAKjBK,mBALiB,EAME;AACnBN,IAAAA,IAAI,CAACG,SAAL,GAAiB,KAAjB;;AAEA,QAAI,KAAK+N,GAAL,CAASjM,OAAE,CAACpb,KAAZ,CAAJ,EAAwB;AACtBmZ,MAAAA,IAAI,CAACjE,KAAL,GAAakE,SAAS,GAClB,KAAKmc,iBAAL,CAAuB,KAAK9tB,KAAL,CAAWvC,KAAlC,EAAyC,KAAKuC,KAAL,CAAW4L,QAApD,CADkB,GAElB,KAAKqe,uBAAL,CAA6BjY,mBAA7B,CAFJ;AAIA,aAAO,KAAKX,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,QAAI,CAACA,IAAI,CAACN,QAAN,IAAkBM,IAAI,CAACU,GAAL,CAASpR,IAAT,KAAkB,YAAxC,EAAsD;AAKpD,WAAKiuB,iBAAL,CAAuBvd,IAAI,CAACU,GAAL,CAASxb,IAAhC,EAAsC8a,IAAI,CAACU,GAAL,CAAS3U,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D;;AAEA,UAAIkU,SAAJ,EAAe;AACbD,QAAAA,IAAI,CAACjE,KAAL,GAAa,KAAKqgB,iBAAL,CACX/b,QADW,EAEXnG,QAFW,EAGX8F,IAAI,CAACU,GAAL,CAAS0c,OAAT,EAHW,CAAb;AAKD,OAND,MAMO,IAAI,KAAK7wB,KAAL,CAAW0V,OAAE,CAACva,EAAd,KAAqB4Y,mBAAzB,EAA8C;AACnD,YAAIA,mBAAmB,CAAC83C,eAApB,KAAwC,CAAC,CAA7C,EAAgD;AAC9C93C,UAAAA,mBAAmB,CAAC83C,eAApB,GAAsC,KAAK9pD,KAAL,CAAWvC,KAAjD;AACD;;AACDiU,QAAAA,IAAI,CAACjE,KAAL,GAAa,KAAKqgB,iBAAL,CACX/b,QADW,EAEXnG,QAFW,EAGX8F,IAAI,CAACU,GAAL,CAAS0c,OAAT,EAHW,CAAb;AAKD,OATM,MASA;AACLpd,QAAAA,IAAI,CAACjE,KAAL,GAAaiE,IAAI,CAACU,GAAL,CAAS0c,OAAT,EAAb;AACD;;AACDpd,MAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AAEA,aAAO,KAAKR,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;AACF;;AAEDkc,EAAAA,iBAAiB,CACflc,IADe,EAEfK,QAFe,EAGfnG,QAHe,EAIfsE,WAJe,EAKfnB,OALe,EAMf4C,SANe,EAOfC,UAPe,EAQfI,mBARe,EAST;AACN,UAAMjT,IAAI,GACR,KAAK0S,iBAAL,CACEC,IADF,EAEExB,WAFF,EAGEnB,OAHF,EAIE4C,SAJF,EAKEC,UALF,KAOA,KAAKE,mBAAL,CACEJ,IADF,EAEEK,QAFF,EAGEnG,QAHF,EAIE+F,SAJF,EAKEK,mBALF,CARF;AAgBA,QAAI,CAACjT,IAAL,EAAW,KAAK4iB,UAAL;AAGX,WAAO5iB,IAAP;AACD;;AAED2uB,EAAAA,iBAAiB,CACfhc,IADe,EAEfic,oBAFe,EAGc;AAC7B,QAAI,KAAK/N,GAAL,CAASjM,OAAE,CAAClc,QAAZ,CAAJ,EAA2B;AACxBia,MAAAA,IAAD,CAA4CN,QAA5C,GAAuD,IAAvD;AACAM,MAAAA,IAAI,CAACU,GAAL,GAAW,KAAK6X,uBAAL,EAAX;AACA,WAAK1K,MAAL,CAAY5L,OAAE,CAAC/b,QAAf;AACD,KAJD,MAIO;AACL,YAAMu6D,iBAAiB,GAAG,KAAKnyD,KAAL,CAAW6kC,cAArC;AACA,WAAK7kC,KAAL,CAAW6kC,cAAX,GAA4B,IAA5B;AAEA,YAAM7jC,IAAI,GAAG,KAAKhB,KAAL,CAAWgB,IAAxB;AACC0Q,MAAAA,IAAD,CAAmBU,GAAnB,GACEpR,IAAI,KAAK2S,OAAE,CAACzc,GAAZ,IACA8J,IAAI,KAAK2S,OAAE,CAACrc,MADZ,IAEA0J,IAAI,KAAK2S,OAAE,CAACxc,MAFZ,IAGA6J,IAAI,KAAK2S,OAAE,CAACvc,OAHZ,GAII,KAAKyqB,aAAL,EAJJ,GAKI,KAAKtR,qBAAL,CAA2Bod,oBAA3B,CANN;;AAQA,UAAI3sB,IAAI,KAAK2S,OAAE,CAACpc,WAAhB,EAA6B;AAE3Bma,QAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAKpR,KAAL,CAAW6kC,cAAX,GAA4BstB,iBAA5B;AACD;;AAED,WAAOzgD,IAAI,CAACU,GAAZ;AACD;;AAIDtD,EAAAA,YAAY,CAAC/P,IAAD,EAAuCgQ,OAAvC,EAAgE;AAC1EhQ,IAAAA,IAAI,CAAC2R,EAAL,GAAU,IAAV;AACA3R,IAAAA,IAAI,CAACqzD,SAAL,GAAiB,KAAjB;AACArzD,IAAAA,IAAI,CAACqxB,KAAL,GAAa,CAAC,CAACrhB,OAAf;AACD;;AAIDsB,EAAAA,WAAW,CACTtR,IADS,EAETmR,WAFS,EAGTnB,OAHS,EAIToB,aAJS,EAKTY,gBALS,EAMT/P,IANS,EAOTgQ,YAAqB,GAAG,KAPf,EAQN;AACH,SAAKlC,YAAL,CAAkB/P,IAAlB,EAAwBgQ,OAAxB;AACAhQ,IAAAA,IAAI,CAACqzD,SAAL,GAAiB,CAAC,CAACliD,WAAnB;AACA,UAAMkf,cAAc,GAAGjf,aAAvB;AACA,SAAK0J,KAAL,CAAWF,KAAX,CACE9D,cAAc,GACZG,WADF,IAEGhF,YAAY,GAAGkF,WAAH,GAAiB,CAFhC,KAGGnF,gBAAgB,GAAGkF,kBAAH,GAAwB,CAH3C,CADF;AAMA,SAAKkiC,SAAL,CAAex+B,KAAf,CAAqBsxB,aAAa,CAACl8B,OAAD,EAAUhQ,IAAI,CAACqzD,SAAf,CAAlC;AACA,SAAKjjC,mBAAL,CAA0BpwB,IAA1B,EAAsCqwB,cAAtC;AACA,SAAK9G,0BAAL,CAAgCvpB,IAAhC,EAAsCiC,IAAtC,EAA4C,IAA5C;AACA,SAAKm3C,SAAL,CAAev+B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AAEA,WAAO7a,IAAP;AACD;;AAKD6tB,EAAAA,cAAc,CACZC,KADY,EAEZC,YAFY,EAGZC,OAHY,EAIZ/a,mBAJY,EAK2B;AACvC,QAAI+a,OAAJ,EAAa;AACX,WAAKyxB,YAAL,CAAkB,gBAAlB;AACD;;AACD,UAAM+Q,6BAA6B,GAAG,KAAKvvD,KAAL,CAAWolC,0BAAjD;AACA,SAAKplC,KAAL,CAAWolC,0BAAX,GAAwC,KAAxC;AACA,UAAMrmC,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACAzW,IAAAA,IAAI,CAACQ,QAAL,GAAgB,KAAKgyD,aAAL,CACd1kC,KADc,EAEG,CAACE,OAFJ,EAGd/a,mBAHc,EAIdjT,IAJc,CAAhB;AAMA,SAAKiB,KAAL,CAAWolC,0BAAX,GAAwCmqB,6BAAxC;AACA,WAAO,KAAKl+C,UAAL,CACLtS,IADK,EAELguB,OAAO,GAAG,iBAAH,GAAuB,iBAFzB,CAAP;AAID;;AAKDsE,EAAAA,oBAAoB,CAClBtyB,IADkB,EAElBoC,MAFkB,EAGlB4N,OAHkB,EAIlB0d,gBAJkB,EAKS;AAC3B,SAAK5S,KAAL,CAAWF,KAAX,CAAiB9D,cAAc,GAAGC,WAAlC;AACA,QAAI1I,KAAK,GAAG69B,aAAa,CAACl8B,OAAD,EAAU,KAAV,CAAzB;;AAEA,QAAI,CAAC,KAAK9Q,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CAAD,IAA4B,KAAK0gD,SAAL,CAAenN,KAA/C,EAAsD;AACpD59B,MAAAA,KAAK,IAAIq9B,QAAT;AACD;;AACD,SAAK0N,SAAL,CAAex+B,KAAf,CAAqBvM,KAArB;AACA,SAAK0B,YAAL,CAAkB/P,IAAlB,EAAwBgQ,OAAxB;AACA,UAAM+qC,yBAAyB,GAAG,KAAK95C,KAAL,CAAWgpB,sBAA7C;;AAEA,QAAI7nB,MAAJ,EAAY;AACV,WAAKnB,KAAL,CAAWgpB,sBAAX,GAAoC,IAApC;AACA,WAAKwH,0BAAL,CAAgCzxB,IAAhC,EAAsCoC,MAAtC,EAA8CsrB,gBAA9C;AACD;;AACD,SAAKzsB,KAAL,CAAWgpB,sBAAX,GAAoC,KAApC;AACA,SAAKpY,iBAAL,CAAuB7R,IAAvB,EAA6B,IAA7B;AAEA,SAAKo5C,SAAL,CAAev+B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAK5Z,KAAL,CAAWgpB,sBAAX,GAAoC8wB,yBAApC;AAEA,WAAO,KAAKzoC,UAAL,CAAgBtS,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAEDyxB,EAAAA,0BAA0B,CACxBzxB,IADwB,EAExBoC,MAFwB,EAGxBsrB,gBAHwB,EAIlB;AACN1tB,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAKqpB,gBAAL,CAAsBrpB,MAAtB,EAA8BsrB,gBAA9B,EAAgD,KAAhD,CAAd;AACD;;AAEDnE,EAAAA,0BAA0B,CACxBvpB,IADwB,EAExBiC,IAFwB,EAGxB8P,QAAkB,GAAG,KAHG,EAIlB;AAEN,SAAKF,iBAAL,CAAuB7R,IAAvB,EAA6B,KAA7B,EAAoC+R,QAApC;AACA,SAAKO,UAAL,CAAgBtS,IAAhB,EAAsBiC,IAAtB;AACD;;AAGD4P,EAAAA,iBAAiB,CACf7R,IADe,EAEf8R,eAFe,EAGfC,QAAkB,GAAG,KAHN,EAIT;AACN,UAAMuhD,YAAY,GAAGxhD,eAAe,IAAI,CAAC,KAAK5S,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAzC;AACA,SAAK2yD,eAAL,CAAqB9wC,KAArB,CAA2BmvC,kBAAkB,EAA7C;;AAEA,QAAIuJ,YAAJ,EAAkB;AAEhBtzD,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKia,gBAAL,EAAZ;AACA,WAAKW,WAAL,CAAiB3rB,IAAjB,EAAuB,KAAvB,EAA8B8R,eAA9B,EAA+C,KAA/C;AACD,KAJD,MAIO;AACL,YAAMytC,SAAS,GAAG,KAAKt+C,KAAL,CAAW0U,MAA7B;AAGA,YAAMw1C,SAAS,GAAG,KAAKlqD,KAAL,CAAWqlC,MAA7B;AACA,WAAKrlC,KAAL,CAAWqlC,MAAX,GAAoB,EAApB;AAIA,WAAK8S,SAAL,CAAex+B,KAAf,CAAqB,KAAKw+B,SAAL,CAAevN,YAAf,KAAgCJ,YAArD;AACAzrC,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKquC,UAAL,CACV,IADU,EAEV,KAFU,EAITmU,sBAAD,IAAqC;AACnC,cAAMC,SAAS,GAAG,CAAC,KAAKC,iBAAL,CAAuBzzD,IAAI,CAACoC,MAA5B,CAAnB;;AAEA,YAAImxD,sBAAsB,IAAIC,SAA9B,EAAyC;AAEvC,gBAAME,QAAQ,GAEZ,CAAC1zD,IAAI,CAACoS,IAAL,KAAc,QAAd,IAA0BpS,IAAI,CAACoS,IAAL,KAAc,aAAzC,KAEA,CAAC,CAACpS,IAAI,CAACqT,GAFP,GAGIrT,IAAI,CAACqT,GAAL,CAAS1U,GAHb,GAIIqB,IAAI,CAACtB,KANX;AAOA,eAAKyO,KAAL,CAAWumD,QAAX,EAAqBpgD,aAAM,CAACjO,4BAA5B;AACD;;AAED,cAAMgoD,iBAAiB,GAAG,CAAC9N,SAAD,IAAc,KAAKt+C,KAAL,CAAW0U,MAAnD;AAIA,aAAKgW,WAAL,CACE3rB,IADF,EAEE,CAAC,KAAKiB,KAAL,CAAW0U,MAAZ,IAAsB,CAAC7D,eAAvB,IAA0C,CAACC,QAA3C,IAAuD,CAACyhD,SAF1D,EAGE1hD,eAHF,EAIEu7C,iBAJF;;AAQA,YAAI,KAAKpsD,KAAL,CAAW0U,MAAX,IAAqB3V,IAAI,CAAC2R,EAA9B,EAAkC;AAChC,eAAKsc,SAAL,CACEjuB,IAAI,CAAC2R,EADP,EAEE,eAFF,EAGEgH,YAHF,EAIExY,SAJF,EAKEA,SALF,EAMEktD,iBANF;AAQD;AACF,OAzCS,CAAZ;AA2CA,WAAKjU,SAAL,CAAev+B,IAAf;AACA,WAAK6wC,eAAL,CAAqB7wC,IAArB;AACA,WAAK5Z,KAAL,CAAWqlC,MAAX,GAAoB6kB,SAApB;AACD;AACF;;AAEDsI,EAAAA,iBAAiB,CACfrxD,MADe,EAEN;AACT,SAAK,IAAIzB,CAAC,GAAG,CAAR,EAAW6kD,GAAG,GAAGpjD,MAAM,CAACxB,MAA7B,EAAqCD,CAAC,GAAG6kD,GAAzC,EAA8C7kD,CAAC,EAA/C,EAAmD;AACjD,UAAIyB,MAAM,CAACzB,CAAD,CAAN,CAAUsB,IAAV,KAAmB,YAAvB,EAAqC,OAAO,KAAP;AACtC;;AACD,WAAO,IAAP;AACD;;AAED0pB,EAAAA,WAAW,CACT3rB,IADS,EAET0xB,eAFS,EAITC,eAJS,EAKT07B,iBAA2B,GAAG,IALrB,EAMH;AACN,UAAMF,YAAY,GAAG,IAAIt3C,GAAJ,EAArB;;AACA,SAAK,MAAMmT,KAAX,IAAoBhpB,IAAI,CAACoC,MAAzB,EAAiC;AAC/B,WAAK6rB,SAAL,CACEjF,KADF,EAEE,yBAFF,EAGE5Q,QAHF,EAIEsZ,eAAe,GAAG,IAAH,GAAUy7B,YAJ3B,EAKEhtD,SALF,EAMEktD,iBANF;AAQD;AACF;;AAQDmF,EAAAA,aAAa,CACX1kC,KADW,EAEXk/B,UAFW,EAGX/5C,mBAHW,EAIXs9C,YAJW,EAKoB;AAC/B,UAAMtD,IAAI,GAAG,EAAb;AACA,QAAIjlC,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAKnH,GAAL,CAASiN,KAAT,CAAR,EAAyB;AACvB,UAAI9F,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CAAY5L,OAAE,CAACtb,KAAf;;AACA,YAAI,KAAK4F,KAAL,CAAW4uB,KAAX,CAAJ,EAAuB;AACrB,cAAIyiC,YAAJ,EAAkB;AAChB,iBAAK//C,QAAL,CACE+/C,YADF,EAEE,eAFF,EAGE,KAAKtvD,KAAL,CAAW6L,YAHb;AAKD;;AACD,eAAK2J,IAAL;AACA;AACD;AACF;;AAEDw2C,MAAAA,IAAI,CAAC/rD,IAAL,CAAU,KAAKuvD,iBAAL,CAAuBzD,UAAvB,EAAmC/5C,mBAAnC,CAAV;AACD;;AACD,WAAOg6C,IAAP;AACD;;AAEDwD,EAAAA,iBAAiB,CACfzD,UADe,EAEf/5C,mBAFe,EAGfq9C,gBAHe,EAIA;AACf,QAAIlV,GAAJ;;AACA,QAAI,KAAKl8C,KAAL,CAAW0V,OAAE,CAACtb,KAAd,CAAJ,EAA0B;AACxB,UAAI,CAAC0zD,UAAL,EAAiB;AACf,aAAK7/C,KAAL,CAAW,KAAKlM,KAAL,CAAW2L,GAAtB,EAA2B0G,aAAM,CAACtI,eAAlC,EAAmD,GAAnD;AACD;;AACDowC,MAAAA,GAAG,GAAG,IAAN;AACD,KALD,MAKO,IAAI,KAAKl8C,KAAL,CAAW0V,OAAE,CAAC7a,QAAd,CAAJ,EAA6B;AAClC,YAAMi4D,kBAAkB,GAAG,KAAK/wD,KAAL,CAAWvC,KAAtC;AACA,YAAMuzD,kBAAkB,GAAG,KAAKhxD,KAAL,CAAW4L,QAAtC;AAEAuuC,MAAAA,GAAG,GAAG,KAAKtvB,cAAL,CACJ,KAAK6gC,WAAL,CAAiB15C,mBAAjB,CADI,EAEJ++C,kBAFI,EAGJC,kBAHI,CAAN;AAKD,KATM,MASA,IAAI,KAAK/yD,KAAL,CAAW0V,OAAE,CAACjb,QAAd,CAAJ,EAA6B;AAClC,WAAK8lD,YAAL,CAAkB,oBAAlB;;AACA,UAAI,CAAC6Q,gBAAL,EAAuB;AACrB,aAAKnjD,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAClJ,6BAApC;AACD;;AACD,YAAMpK,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,WAAKsE,IAAL;AACA2kC,MAAAA,GAAG,GAAG,KAAK9oC,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAN;AACD,KARM,MAQA;AACLo7C,MAAAA,GAAG,GAAG,KAAKlwB,uBAAL,CACJjY,mBADI,EAEJ,KAAK6Y,cAFD,CAAN;AAID;;AACD,WAAOsvB,GAAP;AACD;;AAQDh6B,EAAAA,eAAe,CAACsD,OAAD,EAAkC;AAC/C,UAAM1kB,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,UAAMta,IAAI,GAAG,KAAKyoD,mBAAL,CAAyBtgD,IAAI,CAACtB,KAA9B,EAAqCgmB,OAArC,CAAb;AAEA,WAAO,KAAK6D,gBAAL,CAAsBvoB,IAAtB,EAA4BnI,IAA5B,CAAP;AACD;;AAED0wB,EAAAA,gBAAgB,CAACvoB,IAAD,EAAqBnI,IAArB,EAAiD;AAC/DmI,IAAAA,IAAI,CAACnI,IAAL,GAAYA,IAAZ;AACAmI,IAAAA,IAAI,CAACgB,GAAL,CAASnC,cAAT,GAA0BhH,IAA1B;AAEA,WAAO,KAAKya,UAAL,CAAgBtS,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDsgD,EAAAA,mBAAmB,CAAC1zC,GAAD,EAAc8X,OAAd,EAAyC;AAC1D,QAAI7sB,IAAJ;AAEA,UAAM;AAAE6G,MAAAA,KAAF;AAASuD,MAAAA;AAAT,QAAkB,KAAKhB,KAA7B;;AAEA,QAAIgB,IAAI,KAAK2S,OAAE,CAAC/c,IAAhB,EAAsB;AACpBA,MAAAA,IAAI,GAAG,KAAKoJ,KAAL,CAAWyN,KAAlB;AACD,KAFD,MAEO,IAAIzM,IAAI,CAAC3K,OAAT,EAAkB;AACvBO,MAAAA,IAAI,GAAGoK,IAAI,CAAC3K,OAAZ;AACD,KAFM,MAEA;AACL,YAAM,KAAKsrB,UAAL,EAAN;AACD;;AAED,QAAI8B,OAAJ,EAAa;AAGX,WAAKzjB,KAAL,CAAWgB,IAAX,GAAkB2S,OAAE,CAAC/c,IAArB;AACD,KAJD,MAIO;AACL,WAAKq4B,iBAAL,CAAuBr4B,IAAvB,EAA6B6G,KAA7B,EAAoC,CAAC,CAACuD,IAAI,CAAC3K,OAA3C,EAAoD,KAApD;AACD;;AAED,SAAKmf,IAAL;AAEA,WAAO5e,IAAP;AACD;;AAEDq4B,EAAAA,iBAAiB,CACfja,IADe,EAEfpJ,QAFe,EAGfwvC,aAHe,EAIfhvB,SAJe,EAKT;AAEN,QAAIpX,IAAI,CAACrV,MAAL,GAAc,EAAlB,EAAsB;AACpB;AACD;;AAGD,QAAI,CAAC+V,iBAAiB,CAACV,IAAD,CAAtB,EAA8B;AAC5B;AACD;;AAED,QAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,KAAKmjC,SAAL,CAAerN,QAAnB,EAA6B;AAC3B,aAAK5+B,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAACvH,sBAA5B;AACA;AACD;AACF,KALD,MAKO,IAAIkK,IAAI,KAAK,OAAb,EAAsB;AAC3B,UAAI,KAAKmjC,SAAL,CAAetN,QAAnB,EAA6B;AAC3B,aAAK3+B,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAACpQ,sBAA5B;AACA;AACD,OAHD,MAGO,IAAI,KAAK4X,KAAL,CAAWR,aAAf,EAA8B;AACnC,aAAKnN,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAACnQ,mCAA5B;AACA;AACD,OAHM,MAGA;AACL,aAAKuoD,eAAL,CAAqBhC,+BAArB,CACE78C,QADF,EAEEyG,aAAM,CAACpQ,sBAFT;AAID;AACF,KAbM,MAaA,IAAI+S,IAAI,KAAK,WAAb,EAA0B;AAC/B,UAAI,KAAK6E,KAAL,CAAWT,+BAAf,EAAgD;AAC9C,aAAKlN,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAACtQ,gBAA5B;AACA;AACD;AACF;;AAED,QAAIq5C,aAAa,IAAI/lC,SAAS,CAACL,IAAD,CAA9B,EAAsC;AACpC,WAAK9I,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAAC9I,iBAA5B,EAA+CyL,IAA/C;AACA;AACD;;AAED,UAAM09C,YAAY,GAAG,CAAC,KAAK1yD,KAAL,CAAW0U,MAAZ,GACjBK,cADiB,GAEjBqX,SAAS,GACThX,wBADS,GAETF,oBAJJ;;AAMA,QAAIw9C,YAAY,CAAC19C,IAAD,EAAO,KAAKC,QAAZ,CAAhB,EAAuC;AACrC,WAAK/I,KAAL,CAAWN,QAAX,EAAqByG,aAAM,CAACxI,sBAA5B,EAAoDmL,IAApD;AACD;AACF;;AAEDq5C,EAAAA,cAAc,GAAY;AACxB,QAAI,KAAKlW,SAAL,CAAetN,QAAnB,EAA6B,OAAO,IAAP;;AAC7B,QAAI,KAAKh0C,OAAL,CAAa4pD,yBAAb,IAA0C,CAAC,KAAK5mC,KAAL,CAAWd,UAA1D,EAAsE;AACpE,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAIDu1C,EAAAA,UAAU,CAACv8C,QAAD,EAAmBnG,QAAnB,EAA0D;AAClE,UAAM7M,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AAEA,SAAK6+C,eAAL,CAAqBlC,+BAArB,CACExpD,IAAI,CAACtB,KADP,EAEE4U,aAAM,CAAClQ,8BAFT;;AAKA,QAAI,KAAKyd,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAJ,EAAuB;AACrB,WAAK4R,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACrL,iBAA9B;AACD;;AAED,QAAI,CAAC,KAAK6S,KAAL,CAAWd,UAAZ,IAA0B,CAAC,KAAKliB,OAAL,CAAa4pD,yBAA5C,EAAuE;AACrE,UAAI,KAAKiO,gBAAL,EAAJ,EAA6B;AAC3B,aAAKnwD,2BAAL,GAAmC,IAAnC;AACD,OAFD,MAEO;AACL,aAAKD,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,QAAI,CAAC,KAAK0B,KAAL,CAAWmlC,SAAhB,EAA2B;AACzBpmC,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAK2uB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACD;;AAED,WAAO,KAAK1jC,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED2vD,EAAAA,gBAAgB,GAAY;AAC1B,WACE,KAAK/f,qBAAL,MAGA,KAAK1wC,KAAL,CAAW0V,OAAE,CAACvZ,OAAd,CAHA,IAIA,KAAK6D,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAJA,IAKA,KAAK8F,KAAL,CAAW0V,OAAE,CAAClc,QAAd,CALA,IAMA,KAAKwG,KAAL,CAAW0V,OAAE,CAAC5a,SAAd,CANA,IASA,KAAKkF,KAAL,CAAW0V,OAAE,CAACtc,MAAd,CATA,IAUA,KAAK4G,KAAL,CAAW0V,OAAE,CAACpZ,KAAd,CAVA,IAaC,KAAKiE,SAAL,CAAe,aAAf,KAAiC,KAAKP,KAAL,CAAW0V,OAAE,CAACtZ,MAAd,CAdpC;AAgBD;;AAID8yD,EAAAA,UAAU,GAAsB;AAC9B,UAAMpuD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAEA,SAAKu5C,eAAL,CAAqBlC,+BAArB,CACExpD,IAAI,CAACtB,KADP,EAEE4U,aAAM,CAACtH,gBAFT;AAKA,SAAKyK,IAAL;AACA,QAAIm9C,UAAU,GAAG,KAAjB;AACA,QAAIvsC,QAAQ,GAAG,IAAf;;AACA,QAAI,CAAC,KAAKuoB,qBAAL,EAAL,EAAmC;AACjCgkB,MAAAA,UAAU,GAAG,KAAK/yC,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAb;;AACA,cAAQ,KAAK0F,KAAL,CAAWgB,IAAnB;AACE,aAAK2S,OAAE,CAACrb,IAAR;AACA,aAAKqb,OAAE,CAACnc,GAAR;AACA,aAAKmc,OAAE,CAAC1b,MAAR;AACA,aAAK0b,OAAE,CAACvb,MAAR;AACA,aAAKub,OAAE,CAAC/b,QAAR;AACA,aAAK+b,OAAE,CAACzb,SAAR;AACA,aAAKyb,OAAE,CAACpb,KAAR;AACA,aAAKob,OAAE,CAACtb,KAAR;AAIE,cAAI,CAACs6D,UAAL,EAAiB;;AAEnB;AACEvsC,UAAAA,QAAQ,GAAG,KAAK2D,gBAAL,EAAX;AAfJ;AAiBD;;AACDhrB,IAAAA,IAAI,CAAC6zD,QAAL,GAAgBD,UAAhB;AACA5zD,IAAAA,IAAI,CAACqnB,QAAL,GAAgBA,QAAhB;AACA,WAAO,KAAK/U,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAKDyuD,EAAAA,4BAA4B,CAACz/B,IAAD,EAAqBitB,YAArB,EAA2C;AACrE,QAAI,KAAKr8C,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,UAAIovB,IAAI,CAAC/sB,IAAL,KAAc,oBAAlB,EAAwC;AAGtC,aAAKkL,KAAL,CAAW8uC,YAAX,EAAyB3oC,aAAM,CAAC5K,8BAAhC;AACD;AACF;AACF;;AAEDqmD,EAAAA,sBAAsB,CACpB+E,eADoB,EAEpB9gD,QAFoB,EAGpBnG,QAHoB,EAIJ;AAChB,SAAKknD,iCAAL,CAAuCD,eAAvC,EAAwD9gD,QAAxD;AAEA,WAAO,KAAKghD,6BAAL,CACLF,eADK,EAEL9gD,QAFK,EAGLnG,QAHK,CAAP;AAKD;;AAEDknD,EAAAA,iCAAiC,CAC/BD,eAD+B,EAE/B9gD,QAF+B,EAGzB;AACN,QAAI,KAAK9T,KAAL,CAAW0V,OAAE,CAAC/a,KAAd,CAAJ,EAA0B;AAGxB,YAAM,KAAKsT,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC9K,mBAApC,CAAN;AACD,KAJD,MAIO,IAAIsrD,eAAe,CAAC7xD,IAAhB,KAAyB,oBAA7B,EAAmD;AACxD,WAAKkL,KAAL,CAAW6F,QAAX,EAAqBM,aAAM,CAAC7K,8BAA5B;AACD;AACF;;AAEDurD,EAAAA,6BAA6B,CAC3BF,eAD2B,EAE3B9gD,QAF2B,EAG3BnG,QAH2B,EAIX;AAChB,UAAMkW,QAAQ,GAAG,KAAKvT,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAjB;AACA,UAAMonD,iBAAiB,GAAG,KAAKA,iBAAL,CAAuBH,eAAvB,CAA1B;;AACA,QAAIG,iBAAJ,EAAuB;AACrBlxC,MAAAA,QAAQ,CAACtP,MAAT,GAAkBqgD,eAAlB;AACD,KAFD,MAEO;AACL,UAAI,CAAC,KAAKI,0CAAL,EAAL,EAAwD;AACtD,aAAK/mD,KAAL,CAAW6F,QAAX,EAAqBM,aAAM,CAAC3K,mBAA5B;AACD;;AACDoa,MAAAA,QAAQ,CAACtT,UAAT,GAAsBqkD,eAAtB;AACD;;AACD,WAAO,KAAKxhD,UAAL,CACLyQ,QADK,EAELkxC,iBAAiB,GAAG,sBAAH,GAA4B,yBAFxC,CAAP;AAID;;AAEDA,EAAAA,iBAAiB,CAACxkD,UAAD,EAAoC;AACnD,YAAQA,UAAU,CAACxN,IAAnB;AACE,WAAK,kBAAL;AACE,eACE,CAACwN,UAAU,CAAC4C,QAAZ,IAAwB,KAAK4hD,iBAAL,CAAuBxkD,UAAU,CAAC04B,MAAlC,CAD1B;;AAGF,WAAK,YAAL;AACE,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AARJ;AAUD;;AAQD2mB,EAAAA,0BAA0B,CAAIqF,QAAJ,EAA0B;AAClD,UAAMC,sBAAsB,GAAG,KAAKnzD,KAAL,CAAWglC,YAA1C;AACA,SAAKhlC,KAAL,CAAWglC,YAAX,GAA0B;AAExBC,MAAAA,wBAAwB,EAAE,CAFF;AAIxBC,MAAAA,aAAa,EAAE;AAJS,KAA1B;;AAOA,QAAI;AACF,aAAOguB,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKlzD,KAAL,CAAWglC,YAAX,GAA0BmuB,sBAA1B;AACD;AACF;;AASDC,EAAAA,0BAA0B,CAAIF,QAAJ,EAA0B;AAClD,UAAMC,sBAAsB,GAAG,KAAKnzD,KAAL,CAAWglC,YAA1C;AACA,SAAKhlC,KAAL,CAAWglC,YAAX,GAA0B;AAExBC,MAAAA,wBAAwB,EAAE,CAFF;AAIxBC,MAAAA,aAAa,EAAE;AAJS,KAA1B;;AAOA,QAAI;AACF,aAAOguB,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKlzD,KAAL,CAAWglC,YAAX,GAA0BmuB,sBAA1B;AACD;AACF;;AAEDnF,EAAAA,8BAA8B,CAAIkF,QAAJ,EAA0B;AACtD,UAAMG,0BAA0B,GAAG,KAAKrzD,KAAL,CAAWmlC,SAA9C;AACA,SAAKnlC,KAAL,CAAWmlC,SAAX,GAAuB,IAAvB;;AAEA,QAAI;AACF,aAAO+tB,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKlzD,KAAL,CAAWmlC,SAAX,GAAuBkuB,0BAAvB;AACD;AACF;;AAEDtG,EAAAA,UAAU,CAAImG,QAAJ,EAA0B;AAClC,UAAM9lD,KAAK,GAAG,KAAK+qC,SAAL,CAAevN,YAAf,EAAd;AACA,UAAM0oB,cAAc,GAAG7oB,QAAQ,GAAG,CAACr9B,KAAnC;;AACA,QAAIkmD,cAAJ,EAAoB;AAClB,WAAKnb,SAAL,CAAex+B,KAAf,CAAqBvM,KAAK,GAAGq9B,QAA7B;;AACA,UAAI;AACF,eAAOyoB,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAK/a,SAAL,CAAev+B,IAAf;AACD;AACF;;AACD,WAAOs5C,QAAQ,EAAf;AACD;;AAEDrG,EAAAA,aAAa,CAAIqG,QAAJ,EAA0B;AACrC,UAAM9lD,KAAK,GAAG,KAAK+qC,SAAL,CAAevN,YAAf,EAAd;AACA,UAAM2oB,gBAAgB,GAAG9oB,QAAQ,GAAGr9B,KAApC;;AACA,QAAImmD,gBAAJ,EAAsB;AACpB,WAAKpb,SAAL,CAAex+B,KAAf,CAAqBvM,KAAK,GAAG,CAACq9B,QAA9B;;AACA,UAAI;AACF,eAAOyoB,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAK/a,SAAL,CAAev+B,IAAf;AACD;AACF;;AACD,WAAOs5C,QAAQ,EAAf;AACD;;AAID/C,EAAAA,sBAAsB,GAAS;AAC7B,SAAKnwD,KAAL,CAAWglC,YAAX,CAAwBE,aAAxB,GAAwC,CAAxC;AACD;;AAEDgrB,EAAAA,mDAAmD,GAAY;AAC7D,WAAO,KAAKlwD,KAAL,CAAWglC,YAAX,CAAwBC,wBAAxB,IAAoD,CAA3D;AACD;;AAEDguB,EAAAA,0CAA0C,GAAY;AACpD,WACE,KAAKjzD,KAAL,CAAWglC,YAAX,CAAwBE,aAAxB,IAAyC,IAAzC,IACA,KAAKllC,KAAL,CAAWglC,YAAX,CAAwBE,aAAxB,IAAyC,CAF3C;AAID;;AAED+oB,EAAAA,uBAAuB,CAACV,IAAD,EAA6B;AAClD,UAAMx7C,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,UAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AAEA,SAAK5L,KAAL,CAAW2kC,gBAAX,GAA8B,KAAK3kC,KAAL,CAAWvC,KAAzC;AACA,UAAM8xD,6BAA6B,GAAG,KAAKvvD,KAAL,CAAWolC,0BAAjD;AACA,SAAKplC,KAAL,CAAWolC,0BAAX,GAAwC,IAAxC;AAEA,UAAMouB,GAAG,GAAG,KAAKzY,WAAL,CACV,KAAKhG,eAAL,EADU,EAEVhjC,QAFU,EAGVnG,QAHU,EAIV2hD,IAJU,CAAZ;AAOA,SAAKvtD,KAAL,CAAWolC,0BAAX,GAAwCmqB,6BAAxC;AAEA,WAAOiE,GAAP;AACD;;AAGD7D,EAAAA,qBAAqB,GAAuB;AAC1C,SAAKnR,YAAL,CAAkB,cAAlB;AACA,UAAMz/C,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;AACA,SAAKoK,GAAL,CAASjM,OAAE,CAAC7b,MAAZ;AAEA,UAAM27D,YAAY,GAAG,KAAKxJ,gBAAL,CAAsC,IAAtC,CAArB;AACA,SAAKS,kBAAL;AAEA,UAAM94B,OAAO,GAAG,KAAK1gB,SAAL,EAAhB;;AACA,QAAI;AACFnS,MAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAK4jD,YAAL,CAAkB9hC,OAAlB,EAA2Bje,OAAE,CAAC1b,MAA9B,EAAsC,QAAtC,CAAZ;AACD,KAFD,SAEU;AACRw7D,MAAAA,YAAY;AACb;;AACD,SAAK7zC,GAAL,CAASjM,OAAE,CAAC1b,MAAZ;AACA,WAAO,KAAKoZ,UAAL,CAAoCtS,IAApC,EAA0C,kBAA1C,CAAP;AACD;;AAtmFsD;;AC3BzD,MAAM40D,SAAS,GAAG;AAAExiD,EAAAA,IAAI,EAAE;AAAR,CAAlB;AAAA,MACEyiD,WAAW,GAAG;AAAEziD,EAAAA,IAAI,EAAE;AAAR,CADhB;AAGA,MAAM0iD,aAAa,GAAG,KAAtB;AAAA,MACEC,cAAc,GAAG,KADnB;AAAA,MAEEC,sBAAsB,GAAG,KAF3B;AAAA,MAGEC,gBAAgB,GAAG,KAHrB;AAKA,MAAMC,aAAa,GAAG,kBAAtB;AAEA,MAAMC,yBAAyB,GAAG,kBAAlC;;AASA,SAASC,kBAAT,CAA4BpT,MAA5B,EAAoC;AACC;AACjC,SAAK,IAAIrhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqhD,MAAM,CAACphD,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAM5I,KAAK,GAAGiqD,MAAM,CAACrhD,CAAD,CAApB;;AACA,UAAI5I,KAAK,CAACkK,IAAN,KAAe2S,OAAE,CAACpc,WAAtB,EAAmC;AACjC,cAAM;AAAEwI,UAAAA,GAAF;AAAOtC,UAAAA,KAAP;AAAcgQ,UAAAA,KAAd;AAAqB/P,UAAAA;AAArB,YAA6B5G,KAAnC;AACA,cAAMs9D,UAAU,GAAG32D,KAAK,GAAG,CAA3B;AACA,cAAM42D,UAAU,GAAG,IAAIj3D,QAAJ,CAAa2C,GAAG,CAACtC,KAAJ,CAAUJ,IAAvB,EAA6B0C,GAAG,CAACtC,KAAJ,CAAUF,MAAV,GAAmB,CAAhD,CAAnB;AACAwjD,QAAAA,MAAM,CAACpgD,MAAP,CACEjB,CADF,EAEE,CAFF,EAIE,IAAIkiD,KAAJ,CAAU;AACR5gD,UAAAA,IAAI,EAAE2S,OAAE,CAACza,IADD;AAERuU,UAAAA,KAAK,EAAE,GAFC;AAGRhQ,UAAAA,KAAK,EAAEA,KAHC;AAIRC,UAAAA,GAAG,EAAE02D,UAJG;AAKRxoD,UAAAA,QAAQ,EAAE7L,GAAG,CAACtC,KALN;AAMRsO,UAAAA,MAAM,EAAEsoD;AANA,SAAV,CAJF,EAaE,IAAIzS,KAAJ,CAAU;AACR5gD,UAAAA,IAAI,EAAE2S,OAAE,CAAC/c,IADD;AAER6W,UAAAA,KAAK,EAAEA,KAFC;AAGRhQ,UAAAA,KAAK,EAAE22D,UAHC;AAIR12D,UAAAA,GAAG,EAAEA,GAJG;AAKRkO,UAAAA,QAAQ,EAAEyoD,UALF;AAMRtoD,UAAAA,MAAM,EAAEhM,GAAG,CAACrC;AANJ,SAAV,CAbF;AAsBD;AACF;AACF;AACD,SAAOqjD,MAAP;AACD;;AACc,MAAMuT,eAAN,SAA8BhI,gBAA9B,CAA+C;AAQ5D56B,EAAAA,aAAa,CAACC,IAAD,EAAeC,OAAf,EAA2C;AACtDD,IAAAA,IAAI,CAACC,OAAL,GAAe,KAAK8hC,YAAL,CAAkB9hC,OAAlB,CAAf;AACAD,IAAAA,IAAI,CAAC3yB,QAAL,GAAgB,KAAKgB,KAAL,CAAWhB,QAA3B;AAEA,QAAI,KAAKnI,OAAL,CAAakqD,MAAjB,EAAyBpvB,IAAI,CAACovB,MAAL,GAAcoT,kBAAkB,CAAC,KAAKpT,MAAN,CAAhC;AAEzB,WAAO,KAAK1vC,UAAL,CAAgBsgB,IAAhB,EAAsB,MAAtB,CAAP;AACD;;AAED+hC,EAAAA,YAAY,CACV9hC,OADU,EAEVl0B,GAAc,GAAGiW,OAAE,CAACnc,GAFV,EAGVquC,UAAsB,GAAG,KAAKhvC,OAAL,CAAagvC,UAH5B,EAIC;AACXjU,IAAAA,OAAO,CAACiU,UAAR,GAAqBA,UAArB;AACAjU,IAAAA,OAAO,CAAC2iC,WAAR,GAAsB,KAAKC,yBAAL,EAAtB;AACA,SAAKhlD,cAAL,CAAoBoiB,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyCl0B,GAAzC;;AACA,QACE,KAAKuX,QAAL,IACA,CAAC,KAAKpe,OAAL,CAAagqD,sBADd,IAEA,KAAKhnC,KAAL,CAAWhB,gBAAX,CAA4B4qC,IAA5B,GAAmC,CAHrC,EAIE;AACA,WAAK,MAAM,CAAC7sD,IAAD,CAAX,IAAqBqvC,KAAK,CAAC+gB,IAAN,CAAW,KAAKntC,KAAL,CAAWhB,gBAAtB,CAArB,EAA8D;AAC5D,cAAMlN,GAAG,GAAG,KAAKkO,KAAL,CAAWhB,gBAAX,CAA4Bha,GAA5B,CAAgCjI,IAAhC,CAAZ;AAEA,aAAKsV,KAAL,CAAWP,GAAX,EAAgB0G,aAAM,CAAC3L,qBAAvB,EAA8C9P,IAA9C;AACD;AACF;;AACD,WAAO,KAAKya,UAAL,CAA2BugB,OAA3B,EAAoC,SAApC,CAAP;AACD;;AAWDtiB,EAAAA,eAAe,CAAChB,IAAD,EAAiC;AAC9C,UAAMF,SAAS,GAAIE,IAAnB;AACAF,IAAAA,SAAS,CAACpN,IAAV,GAAiB,WAAjB;AACAoN,IAAAA,SAAS,CAACX,KAAV,GAAkBW,SAAS,CAACI,UAA5B;AACA,WAAOJ,SAAS,CAACI,UAAjB;AAEA,UAAMH,gBAAgB,GAAGD,SAAS,CAACX,KAAnC;AACA,UAAMkB,GAAG,GAAG,KAAK7Q,KAAL,CAAW+Q,KAAX,CAAiBR,gBAAgB,CAAC5Q,KAAlC,EAAyC4Q,gBAAgB,CAAC3Q,GAA1D,CAAZ;AACA,UAAMshB,GAAG,GAAI3Q,gBAAgB,CAACZ,KAAjB,GAAyBkB,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAtC;AAEA,SAAKU,QAAL,CAAclB,gBAAd,EAAgC,KAAhC,EAAuCM,GAAvC;AACA,SAAKY,QAAL,CAAclB,gBAAd,EAAgC,UAAhC,EAA4C2Q,GAA5C;AACA3Q,IAAAA,gBAAgB,CAACrN,IAAjB,GAAwB,kBAAxB;AACA,WAAOoN,SAAP;AACD;;AAEDomD,EAAAA,yBAAyB,GAAkC;AACzD,QAAI,CAAC,KAAKv2D,KAAL,CAAW0V,OAAE,CAACxa,oBAAd,CAAL,EAA0C;AACxC,aAAO,IAAP;AACD;;AAED,UAAM4F,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,IAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKzN,KAAL,CAAWyN,KAAxB;AACA,SAAK+H,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDmjB,EAAAA,KAAK,CAACtO,OAAD,EAA4B;AAC/B,QAAI,CAAC,KAAK0N,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AACD,WAAO,KAAKmzC,YAAL,CAAkB7gD,OAAlB,CAAP;AACD;;AAWD6gD,EAAAA,YAAY,CAAC7gD,OAAD,EAA4B;AACtC,UAAM4B,IAAI,GAAG,KAAKof,cAAL,EAAb;AACA,UAAMu0B,MAAM,GAAG,KAAK/G,cAAL,CAAoB5sC,IAApB,CAAf;;AAMA,QACE2zC,MAAM,OAAN,IACAA,MAAM,OAFR,EAGE;AACA,aAAO,IAAP;AACD;;AACD,QAAIv1C,OAAJ,EAAa,OAAO,KAAP;AAEb,QAAIu1C,MAAM,QAAV,EAAyC,OAAO,IAAP;;AAEzC,QAAI90C,iBAAiB,CAAC80C,MAAD,CAArB,EAA+B;AAC7B+K,MAAAA,yBAAyB,CAACh2D,SAA1B,GAAsCsX,IAAtC;AACA,YAAMk/C,OAAO,GAAGR,yBAAyB,CAAC/1D,IAA1B,CAA+B,KAAKL,KAApC,CAAhB;;AACA,UAAI42D,OAAO,KAAK,IAAhB,EAAsB;AAGpB,cAAMC,KAAK,GAAG,KAAKvS,cAAL,CAAoB5sC,IAAI,GAAGk/C,OAAO,CAAC,CAAD,CAAP,CAAW/0D,MAAtC,CAAd;;AACA,YAAI,CAAC6U,gBAAgB,CAACmgD,KAAD,CAAjB,IAA4BA,KAAK,OAArC,EAA+D;AAC7D,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAWDpsC,EAAAA,cAAc,CAAC3U,OAAD,EAAmB4U,QAAnB,EAAoD;AAChE,QAAI,KAAKvqB,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAJ,EAAuB;AACrB,WAAK+2D,eAAL,CAAqB,IAArB;AACD;;AACD,WAAO,KAAKtU,qBAAL,CAA2B9nC,OAA3B,EAAoC4U,QAApC,CAAP;AACD;;AAEDkzB,EAAAA,qBAAqB,CAAC9nC,OAAD,EAAmB4U,QAAnB,EAAoD;AACvE,QAAIywB,SAAS,GAAG,KAAKj5C,KAAL,CAAWgB,IAA3B;AACA,UAAMjC,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,QAAIC,IAAJ;;AAEA,QAAI,KAAK+Q,KAAL,CAAWtO,OAAX,CAAJ,EAAyB;AACvBqlC,MAAAA,SAAS,GAAGtlC,OAAE,CAAClY,IAAf;AACA0V,MAAAA,IAAI,GAAG,KAAP;AACD;;AAMD,YAAQ8nC,SAAR;AACE,WAAKtlC,OAAE,CAAClZ,MAAR;AACA,WAAKkZ,OAAE,CAAC/Y,SAAR;AAEE,eAAO,KAAKg6D,2BAAL,CAAiC71D,IAAjC,EAAuCk6C,SAAS,CAAC5iD,OAAjD,CAAP;;AACF,WAAKsd,OAAE,CAAC9Y,SAAR;AACE,eAAO,KAAKg6D,sBAAL,CAA4B91D,IAA5B,CAAP;;AACF,WAAK4U,OAAE,CAAC5Y,GAAR;AACE,eAAO,KAAK+5D,gBAAL,CAAsB/1D,IAAtB,CAAP;;AACF,WAAK4U,OAAE,CAACzY,IAAR;AACE,eAAO,KAAK65D,iBAAL,CAAuBh2D,IAAvB,CAAP;;AACF,WAAK4U,OAAE,CAACxY,SAAR;AACE,YAAI,KAAK25C,iBAAL,SAAJ,EAAgD;;AAChD,YAAIlhC,OAAJ,EAAa;AACX,cAAI,KAAK5T,KAAL,CAAW0U,MAAf,EAAuB;AACrB,iBAAKxI,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC5J,cAApC;AACD,WAFD,MAEO,IAAImL,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,OAApC,EAA6C;AAClD,iBAAK1H,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACjK,cAApC;AACD;AACF;;AACD,eAAO,KAAK+wC,sBAAL,CAA4Bp6C,IAA5B,EAAkC,KAAlC,EAAyC,CAAC6U,OAA1C,CAAP;;AAEF,WAAKD,OAAE,CAAC3X,MAAR;AACE,YAAI4X,OAAJ,EAAa,KAAK+N,UAAL;AACb,eAAO,KAAKy3B,UAAL,CAAgBr6C,IAAhB,EAAsB,IAAtB,CAAP;;AAEF,WAAK4U,OAAE,CAACvY,GAAR;AACE,eAAO,KAAK45D,gBAAL,CAAsBj2D,IAAtB,CAAP;;AACF,WAAK4U,OAAE,CAACtY,OAAR;AACE,eAAO,KAAK45D,oBAAL,CAA0Bl2D,IAA1B,CAAP;;AACF,WAAK4U,OAAE,CAACrY,OAAR;AACE,eAAO,KAAK45D,oBAAL,CAA0Bn2D,IAA1B,CAAP;;AACF,WAAK4U,OAAE,CAACpY,MAAR;AACE,eAAO,KAAK45D,mBAAL,CAAyBp2D,IAAzB,CAAP;;AACF,WAAK4U,OAAE,CAACnY,IAAR;AACE,eAAO,KAAK45D,iBAAL,CAAuBr2D,IAAvB,CAAP;;AAEF,WAAK4U,OAAE,CAACjY,MAAR;AACA,WAAKiY,OAAE,CAAClY,IAAR;AACE0V,QAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKnR,KAAL,CAAWyN,KAA1B;;AACA,YAAImG,OAAO,IAAIzC,IAAI,KAAK,KAAxB,EAA+B;AAC7B,eAAKjF,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC5I,4BAApC;AACD;;AACD,eAAO,KAAK4vC,iBAAL,CAAuBt6C,IAAvB,EAA6BoS,IAA7B,CAAP;;AAEF,WAAKwC,OAAE,CAAChY,MAAR;AACE,eAAO,KAAK05D,mBAAL,CAAyBt2D,IAAzB,CAAP;;AACF,WAAK4U,OAAE,CAAC/X,KAAR;AACE,eAAO,KAAK05D,kBAAL,CAAwBv2D,IAAxB,CAAP;;AACF,WAAK4U,OAAE,CAAC7b,MAAR;AACE,eAAO,KAAKqmD,UAAL,EAAP;;AACF,WAAKxqC,OAAE,CAACrb,IAAR;AACE,eAAO,KAAKi9D,mBAAL,CAAyBx2D,IAAzB,CAAP;;AACF,WAAK4U,OAAE,CAACxX,OAAR;AAAiB;AACf,gBAAMq5D,iBAAiB,GAAG,KAAK1gB,iBAAL,EAA1B;;AACA,cACE0gB,iBAAiB,OAAjB,IACAA,iBAAiB,OAFnB,EAGE;AACA;AACD;AACF;;AAED,WAAK7hD,OAAE,CAACzX,OAAR;AAAiB;AACf,cAAI,CAAC,KAAKrF,OAAL,CAAa8pD,2BAAd,IAA6C,CAACn4B,QAAlD,EAA4D;AAC1D,iBAAKtc,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC/I,sBAApC;AACD;;AAED,eAAKkM,IAAL;AAEA,cAAIyT,MAAJ;;AACA,cAAIgwB,SAAS,KAAKtlC,OAAE,CAACxX,OAArB,EAA8B;AAC5B8sB,YAAAA,MAAM,GAAG,KAAKlH,WAAL,CAAiBhjB,IAAjB,CAAT;;AAEA,gBACEkqB,MAAM,CAACjoB,IAAP,KAAgB,mBAAhB,KACC,CAACioB,MAAM,CAACjL,UAAR,IAAsBiL,MAAM,CAACjL,UAAP,KAAsB,OAD7C,CADF,EAGE;AACA,mBAAK1f,iBAAL,GAAyB,IAAzB;AACD;AACF,WATD,MASO;AACL2qB,YAAAA,MAAM,GAAG,KAAKtW,WAAL,CAAiB5T,IAAjB,CAAT;;AAEA,gBACGkqB,MAAM,CAACjoB,IAAP,KAAgB,wBAAhB,KACE,CAACioB,MAAM,CAAC7G,UAAR,IAAsB6G,MAAM,CAAC7G,UAAP,KAAsB,OAD9C,CAAD,IAEC6G,MAAM,CAACjoB,IAAP,KAAgB,sBAAhB,KACE,CAACioB,MAAM,CAAC7G,UAAR,IAAsB6G,MAAM,CAAC7G,UAAP,KAAsB,OAD9C,CAFD,IAIA6G,MAAM,CAACjoB,IAAP,KAAgB,0BALlB,EAME;AACA,mBAAK1C,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,eAAKysB,uBAAL,CAA6BhsB,IAA7B;AAEA,iBAAOkqB,MAAP;AACD;;AAED;AAAS;AACP,cAAI,KAAKwsC,eAAL,EAAJ,EAA4B;AAC1B,gBAAI7hD,OAAJ,EAAa;AACX,mBAAK1H,KAAL,CACE,KAAKlM,KAAL,CAAWvC,KADb,EAEE4U,aAAM,CAACrQ,qCAFT;AAID;;AACD,iBAAKwT,IAAL;AACA,mBAAO,KAAK2jC,sBAAL,CAA4Bp6C,IAA5B,EAAkC,IAAlC,EAAwC,CAAC6U,OAAzC,CAAP;AACD;AACF;AA9GH;;AAsHA,UAAM8hD,SAAS,GAAG,KAAK11D,KAAL,CAAWyN,KAA7B;AACA,UAAMkb,IAAI,GAAG,KAAK9I,eAAL,EAAb;;AAEA,QACEo5B,SAAS,KAAKtlC,OAAE,CAAC/c,IAAjB,IACA+xB,IAAI,CAAC3nB,IAAL,KAAc,YADd,IAEA,KAAK4e,GAAL,CAASjM,OAAE,CAACpb,KAAZ,CAHF,EAIE;AACA,aAAO,KAAKo9D,qBAAL,CAA2B52D,IAA3B,EAAiC22D,SAAjC,EAA4C/sC,IAA5C,EAAkD/U,OAAlD,CAAP;AACD,KAND,MAMO;AACL,aAAO,KAAK8U,wBAAL,CAA8B3pB,IAA9B,EAAoC4pB,IAApC,CAAP;AACD;AACF;;AAEDoC,EAAAA,uBAAuB,CAAChsB,IAAD,EAAqB;AAC1C,QAAI,CAAC,KAAKlI,OAAL,CAAa8pD,2BAAd,IAA6C,CAAC,KAAK1rC,QAAvD,EAAiE;AAC/D,WAAK/I,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuBizD,6BAAsB,CAACvlD,mBAA9C;AACD;AACF;;AAEDkzC,EAAAA,cAAc,CAACt/C,IAAD,EAA8B;AAC1C,UAAMk7C,UAAU,GACd,KAAKj6C,KAAL,CAAWslC,cAAX,CAA0B,KAAKtlC,KAAL,CAAWslC,cAAX,CAA0B3lC,MAA1B,GAAmC,CAA7D,CADF;;AAEA,QAAIs6C,UAAU,CAACt6C,MAAf,EAAuB;AACrBZ,MAAAA,IAAI,CAACk7C,UAAL,GAAkBA,UAAlB;AACA,WAAKhqB,0BAAL,CAAgClxB,IAAhC,EAAsCk7C,UAAU,CAAC,CAAD,CAAhD;AACA,WAAKj6C,KAAL,CAAWslC,cAAX,CAA0B,KAAKtlC,KAAL,CAAWslC,cAAX,CAA0B3lC,MAA1B,GAAmC,CAA7D,IAAkE,EAAlE;AACD;AACF;;AAEDo9C,EAAAA,uBAAuB,GAAY;AACjC,WAAO,KAAK9+C,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAAP;AACD;;AAEDg0D,EAAAA,eAAe,CAAC4F,WAAD,EAA8B;AAC3C,UAAMC,wBAAwB,GAC5B,KAAK71D,KAAL,CAAWslC,cAAX,CAA0B,KAAKtlC,KAAL,CAAWslC,cAAX,CAA0B3lC,MAA1B,GAAmC,CAA7D,CADF;;AAEA,WAAO,KAAK1B,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAP,EAA0B;AACxB,YAAM68D,SAAS,GAAG,KAAK7J,cAAL,EAAlB;AACA4J,MAAAA,wBAAwB,CAAC51D,IAAzB,CAA8B61D,SAA9B;AACD;;AAED,QAAI,KAAK73D,KAAL,CAAW0V,OAAE,CAACzX,OAAd,CAAJ,EAA4B;AAC1B,UAAI,CAAC05D,WAAL,EAAkB;AAChB,aAAKj0C,UAAL;AACD;;AAED,UACE,KAAKnjB,SAAL,CAAe,YAAf,KACA,CAAC,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAFH,EAGE;AACA,aAAKuN,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACpP,oBAApC;AACD;AACF,KAXD,MAWO,IAAI,CAAC,KAAK85C,uBAAL,EAAL,EAAqC;AAC1C,YAAM,KAAK7wC,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAC7I,0BAApC,CAAN;AACD;AACF;;AAEDyiD,EAAAA,cAAc,GAAgB;AAC5B,SAAK1C,eAAL,CAAqB,CAAC,mBAAD,EAAsB,YAAtB,CAArB;AAEA,UAAMxqD,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACA,SAAKsE,IAAL;;AAEA,QAAI,KAAKhX,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAGhC,WAAKwB,KAAL,CAAWslC,cAAX,CAA0BrlC,IAA1B,CAA+B,EAA/B;AAEA,YAAM8R,QAAQ,GAAG,KAAK/R,KAAL,CAAWvC,KAA5B;AACA,YAAMmO,QAAQ,GAAG,KAAK5L,KAAL,CAAW4L,QAA5B;AACA,UAAI+c,IAAJ;;AAEA,UAAI,KAAK/I,GAAL,CAASjM,OAAE,CAACxb,MAAZ,CAAJ,EAAyB;AACvBwwB,QAAAA,IAAI,GAAG,KAAK9I,eAAL,EAAP;AACA,aAAKN,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACD,OAHD,MAGO;AACLuwB,QAAAA,IAAI,GAAG,KAAKxI,eAAL,CAAqB,KAArB,CAAP;;AAEA,eAAO,KAAKP,GAAL,CAASjM,OAAE,CAAClb,GAAZ,CAAP,EAAyB;AACvB,gBAAMsG,IAAI,GAAG,KAAKwP,WAAL,CAAiBwD,QAAjB,EAA2BnG,QAA3B,CAAb;AACA7M,UAAAA,IAAI,CAACmoC,MAAL,GAAcve,IAAd;AACA5pB,UAAAA,IAAI,CAACwnB,QAAL,GAAgB,KAAKpG,eAAL,CAAqB,IAArB,CAAhB;AACAphB,UAAAA,IAAI,CAACqS,QAAL,GAAgB,KAAhB;AACAuX,UAAAA,IAAI,GAAG,KAAKtX,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAEDA,MAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKouC,4BAAL,CAAkCj0B,IAAlC,CAAlB;AACA,WAAK3oB,KAAL,CAAWslC,cAAX,CAA0BzxB,GAA1B;AACD,KA1BD,MA0BO;AACL9U,MAAAA,IAAI,CAACyP,UAAL,GAAkB,KAAKmgD,mBAAL,EAAlB;AACD;;AACD,WAAO,KAAKt9C,UAAL,CAAgBtS,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAED69C,EAAAA,4BAA4B,CAACj0B,IAAD,EAAmC;AAC7D,QAAI,KAAK/I,GAAL,CAASjM,OAAE,CAACxb,MAAZ,CAAJ,EAAyB;AACvB,YAAM4G,IAAI,GAAG,KAAKqU,eAAL,CAAqBuV,IAArB,CAAb;AACA5pB,MAAAA,IAAI,CAACyT,MAAL,GAAcmW,IAAd;AACA5pB,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAK4vB,4BAAL,CAAkCnd,OAAE,CAACvb,MAArC,EAA6C,KAA7C,CAAjB;AACA,WAAKs0B,gBAAL,CAAsB3tB,IAAI,CAACmC,SAA3B;AACA,aAAO,KAAKmQ,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,WAAO4pB,IAAP;AACD;;AAEDisC,EAAAA,2BAA2B,CACzB71D,IADyB,EAEzB1I,OAFyB,EAGe;AACxC,UAAM0/D,OAAO,GAAG1/D,OAAO,KAAK,OAA5B;AACA,SAAKmf,IAAL;;AAEA,QAAI,KAAK48B,gBAAL,EAAJ,EAA6B;AAC3BrzC,MAAAA,IAAI,CAAC5I,KAAL,GAAa,IAAb;AACD,KAFD,MAEO;AACL4I,MAAAA,IAAI,CAAC5I,KAAL,GAAa,KAAKgqB,eAAL,EAAb;AACA,WAAKY,SAAL;AACD;;AAED,SAAKm9B,mBAAL,CAAyBn/C,IAAzB,EAA+B1I,OAA/B;AAEA,WAAO,KAAKgb,UAAL,CACLtS,IADK,EAELg3D,OAAO,GAAG,gBAAH,GAAsB,mBAFxB,CAAP;AAID;;AAED7X,EAAAA,mBAAmB,CACjBn/C,IADiB,EAEjB1I,OAFiB,EAGjB;AACA,UAAM0/D,OAAO,GAAG1/D,OAAO,KAAK,OAA5B;AACA,QAAIqJ,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKM,KAAL,CAAWqlC,MAAX,CAAkB1lC,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAMs2D,GAAG,GAAG,KAAKh2D,KAAL,CAAWqlC,MAAX,CAAkB3lC,CAAlB,CAAZ;;AACA,UAAIX,IAAI,CAAC5I,KAAL,IAAc,IAAd,IAAsB6/D,GAAG,CAACp/D,IAAJ,KAAamI,IAAI,CAAC5I,KAAL,CAAWS,IAAlD,EAAwD;AACtD,YAAIo/D,GAAG,CAAC7kD,IAAJ,IAAY,IAAZ,KAAqB4kD,OAAO,IAAIC,GAAG,CAAC7kD,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;AAC1D,YAAIpS,IAAI,CAAC5I,KAAL,IAAc4/D,OAAlB,EAA2B;AAC5B;AACF;;AACD,QAAIr2D,CAAC,KAAK,KAAKM,KAAL,CAAWqlC,MAAX,CAAkB1lC,MAA5B,EAAoC;AAClC,WAAKuM,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAAClO,oBAA9B,EAAoD9N,OAApD;AACD;AACF;;AAEDw+D,EAAAA,sBAAsB,CAAC91D,IAAD,EAAiD;AACrE,SAAKyW,IAAL;AACA,SAAKuL,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDk3D,EAAAA,qBAAqB,GAAiB;AACpC,SAAK12C,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA,UAAM6mB,GAAG,GAAG,KAAKa,eAAL,EAAZ;AACA,SAAKN,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACA,WAAO4mB,GAAP;AACD;;AAED81C,EAAAA,gBAAgB,CAAC/1D,IAAD,EAA+C;AAC7D,SAAKyW,IAAL;AACA,SAAKxV,KAAL,CAAWqlC,MAAX,CAAkBplC,IAAlB,CAAuB0zD,SAAvB;AAEA50D,IAAAA,IAAI,CAAC+Q,IAAL,GAIE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAK7qC,cAAL,CAAoB,IAApB,CAFF,CAJF;AASA,SAAKvoB,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AAEA,SAAK0L,MAAL,CAAY5L,OAAE,CAAChY,MAAf;AACAoD,IAAAA,IAAI,CAACuV,IAAL,GAAY,KAAK2hD,qBAAL,EAAZ;AACA,SAAKr2C,GAAL,CAASjM,OAAE,CAACrb,IAAZ;AACA,WAAO,KAAK+Y,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAUDg2D,EAAAA,iBAAiB,CAACh2D,IAAD,EAA0B;AACzC,SAAKyW,IAAL;AACA,SAAKxV,KAAL,CAAWqlC,MAAX,CAAkBplC,IAAlB,CAAuB0zD,SAAvB;AAEA,QAAIuC,OAAO,GAAG,CAAC,CAAf;;AACA,QAAI,KAAK7H,cAAL,MAAyB,KAAKltC,aAAL,CAAmB,OAAnB,CAA7B,EAA0D;AACxD+0C,MAAAA,OAAO,GAAG,KAAKl2D,KAAL,CAAW6L,YAArB;AACD;;AACD,SAAKgO,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACA,SAAK4J,MAAL,CAAY5L,OAAE,CAACxb,MAAf;;AAEA,QAAI,KAAK8F,KAAL,CAAW0V,OAAE,CAACrb,IAAd,CAAJ,EAAyB;AACvB,UAAI49D,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKv0C,UAAL,CAAgBu0C,OAAhB;AACD;;AACD,aAAO,KAAKC,QAAL,CAAcp3D,IAAd,EAAoB,IAApB,CAAP;AACD;;AAED,UAAMq3D,aAAa,GAAG,KAAK90C,YAAL,CAAkB,KAAlB,CAAtB;AACA,UAAMY,KAAK,GAAGk0C,aAAa,IAAI,KAAK3B,YAAL,EAA/B;;AACA,QAAI,KAAKx2D,KAAL,CAAW0V,OAAE,CAAClY,IAAd,KAAuB,KAAKwC,KAAL,CAAW0V,OAAE,CAACjY,MAAd,CAAvB,IAAgDwmB,KAApD,EAA2D;AACzD,YAAMoR,IAAI,GAAG,KAAKpiB,SAAL,EAAb;AACA,YAAMC,IAAI,GAAG+Q,KAAK,GAAG,KAAH,GAAW,KAAKliB,KAAL,CAAWyN,KAAxC;AACA,WAAK+H,IAAL;AACA,WAAK6gD,QAAL,CAAc/iC,IAAd,EAAoB,IAApB,EAA0BniB,IAA1B;AACA,WAAKE,UAAL,CAAgBiiB,IAAhB,EAAsB,qBAAtB;;AAEA,UACE,CAAC,KAAKr1B,KAAL,CAAW0V,OAAE,CAACpX,GAAd,KAAsB,KAAK+kB,YAAL,CAAkB,IAAlB,CAAvB,KACAgS,IAAI,CAACgjC,YAAL,CAAkB32D,MAAlB,KAA6B,CAF/B,EAGE;AACA,eAAO,KAAK42D,UAAL,CAAgBx3D,IAAhB,EAAsBu0B,IAAtB,EAA4B4iC,OAA5B,CAAP;AACD;;AACD,UAAIA,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKv0C,UAAL,CAAgBu0C,OAAhB;AACD;;AACD,aAAO,KAAKC,QAAL,CAAcp3D,IAAd,EAAoBu0B,IAApB,CAAP;AACD;;AAID,UAAMkjC,uBAAuB,GAC3B,KAAKv4D,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,CAAC,KAAKoJ,KAAL,CAAWylC,WADrC;AAGA,UAAMzzB,mBAAmB,GAAG,IAAI44C,gBAAJ,EAA5B;AACA,UAAMt3B,IAAI,GAAG,KAAKzT,eAAL,CAAqB,IAArB,EAA2B7N,mBAA3B,CAAb;AACA,UAAMykD,OAAO,GAAG,KAAKn1C,YAAL,CAAkB,IAAlB,CAAhB;;AACA,QAAIm1C,OAAJ,EAAa;AAEX,UAAIL,aAAJ,EAAmB;AACjB,aAAKlqD,KAAL,CAAWonB,IAAI,CAAC71B,KAAhB,EAAuB4U,aAAM,CAACpO,QAA9B;AACD,OAFD,MAEO,IAELiyD,OAAO,KAAK,CAAC,CAAb,IACAM,uBADA,IAEAljC,IAAI,CAACtyB,IAAL,KAAc,YAFd,IAGAsyB,IAAI,CAAC18B,IAAL,KAAc,OALT,EAML;AAKA,aAAKsV,KAAL,CAAWonB,IAAI,CAAC71B,KAAhB,EAAuB4U,aAAM,CAACrO,UAA9B;AACD;AACF;;AACD,QAAIyyD,OAAO,IAAI,KAAKx4D,KAAL,CAAW0V,OAAE,CAACpX,GAAd,CAAf,EAAmC;AACjC,WAAK0V,YAAL,CAAkBqhB,IAAlB,EAAoC,IAApC;AACA,YAAMojC,WAAW,GAAGD,OAAO,GAAG,kBAAH,GAAwB,kBAAnD;AACA,WAAKzpC,SAAL,CAAesG,IAAf,EAAqBojC,WAArB;AACA,aAAO,KAAKH,UAAL,CAAgBx3D,IAAhB,EAAsBu0B,IAAtB,EAA4B4iC,OAA5B,CAAP;AACD,KALD,MAKO;AACL,WAAKtM,qBAAL,CAA2B53C,mBAA3B,EAAgD,IAAhD;AACD;;AACD,QAAIkkD,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,WAAKv0C,UAAL,CAAgBu0C,OAAhB;AACD;;AACD,WAAO,KAAKC,QAAL,CAAcp3D,IAAd,EAAoBu0B,IAApB,CAAP;AACD;;AAED6lB,EAAAA,sBAAsB,CACpBp6C,IADoB,EAEpBgQ,OAFoB,EAGpB4nD,mBAHoB,EAIG;AACvB,SAAKnhD,IAAL;AACA,WAAO,KAAKo6C,aAAL,CACL7wD,IADK,EAEL+0D,cAAc,IAAI6C,mBAAmB,GAAG,CAAH,GAAO5C,sBAA9B,CAFT,EAGLhlD,OAHK,CAAP;AAKD;;AAEDimD,EAAAA,gBAAgB,CAACj2D,IAAD,EAAqC;AACnD,SAAKyW,IAAL;AACAzW,IAAAA,IAAI,CAACuV,IAAL,GAAY,KAAK2hD,qBAAL,EAAZ;AACAl3D,IAAAA,IAAI,CAACyqB,UAAL,GAAkB,KAAKjB,cAAL,CAAoB,IAApB,CAAlB;AACAxpB,IAAAA,IAAI,CAAC+qB,SAAL,GAAiB,KAAKlK,GAAL,CAASjM,OAAE,CAAC3Y,KAAZ,IAAqB,KAAKutB,cAAL,CAAoB,IAApB,CAArB,GAAiD,IAAlE;AACA,WAAO,KAAKlX,UAAL,CAAgBtS,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDk2D,EAAAA,oBAAoB,CAACl2D,IAAD,EAA6C;AAC/D,QAAI,CAAC,KAAKo5C,SAAL,CAAepN,SAAhB,IAA6B,CAAC,KAAKl0C,OAAL,CAAa6pD,0BAA/C,EAA2E;AACzE,WAAKx0C,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAChO,aAApC;AACD;;AAED,SAAKmR,IAAL;;AAMA,QAAI,KAAK48B,gBAAL,EAAJ,EAA6B;AAC3BrzC,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,IAAhB;AACD,KAFD,MAEO;AACLrnB,MAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKvG,eAAL,EAAhB;AACA,WAAKkB,SAAL;AACD;;AAED,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDm2D,EAAAA,oBAAoB,CAACn2D,IAAD,EAA6C;AAC/D,SAAKyW,IAAL;AACAzW,IAAAA,IAAI,CAAC63D,YAAL,GAAoB,KAAKX,qBAAL,EAApB;AACA,UAAMY,KAAK,GAAI93D,IAAI,CAAC83D,KAAL,GAAa,EAA5B;AACA,SAAKt3C,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AACA,SAAKkI,KAAL,CAAWqlC,MAAX,CAAkBplC,IAAlB,CAAuB2zD,WAAvB;AACA,SAAK/5C,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AAMA,QAAImhD,GAAJ;;AACA,SAAK,IAAIC,UAAT,EAAqB,CAAC,KAAK94D,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAtB,GAA+C;AAC7C,UAAI,KAAKgG,KAAL,CAAW0V,OAAE,CAACjZ,KAAd,KAAwB,KAAKuD,KAAL,CAAW0V,OAAE,CAAC7Y,QAAd,CAA5B,EAAqD;AACnD,cAAMk8D,MAAM,GAAG,KAAK/4D,KAAL,CAAW0V,OAAE,CAACjZ,KAAd,CAAf;AACA,YAAIo8D,GAAJ,EAAS,KAAKzlD,UAAL,CAAgBylD,GAAhB,EAAqB,YAArB;AACTD,QAAAA,KAAK,CAAC52D,IAAN,CAAY62D,GAAG,GAAG,KAAK5lD,SAAL,EAAlB;AACA4lD,QAAAA,GAAG,CAACttC,UAAJ,GAAiB,EAAjB;AACA,aAAKhU,IAAL;;AACA,YAAIwhD,MAAJ,EAAY;AACVF,UAAAA,GAAG,CAACxiD,IAAJ,GAAW,KAAKuL,eAAL,EAAX;AACD,SAFD,MAEO;AACL,cAAIk3C,UAAJ,EAAgB;AACd,iBAAK7qD,KAAL,CACE,KAAKlM,KAAL,CAAW6L,YADb,EAEEwG,aAAM,CAAC1L,wBAFT;AAID;;AACDowD,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,GAAG,CAACxiD,IAAJ,GAAW,IAAX;AACD;;AACD,aAAKiL,MAAL,CAAY5L,OAAE,CAACpb,KAAf;AACD,OAnBD,MAmBO;AACL,YAAIu+D,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAACttC,UAAJ,CAAevpB,IAAf,CAAoB,KAAKsoB,cAAL,CAAoB,IAApB,CAApB;AACD,SAFD,MAEO;AACL,eAAK5G,UAAL;AACD;AACF;AACF;;AACD,SAAK9H,KAAL,CAAWD,IAAX;AACA,QAAIk9C,GAAJ,EAAS,KAAKzlD,UAAL,CAAgBylD,GAAhB,EAAqB,YAArB;AACT,SAAKthD,IAAL;AACA,SAAKxV,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AACA,WAAO,KAAKxC,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDo2D,EAAAA,mBAAmB,CAACp2D,IAAD,EAA2C;AAC5D,SAAKyW,IAAL;;AACA,QAAI,KAAKm5B,qBAAL,EAAJ,EAAkC;AAChC,WAAKziC,KAAL,CAAW,KAAKlM,KAAL,CAAWgM,UAAtB,EAAkCqG,aAAM,CAACzL,iBAAzC;AACD;;AACD7H,IAAAA,IAAI,CAACqnB,QAAL,GAAgB,KAAKvG,eAAL,EAAhB;AACA,SAAKkB,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDq+C,EAAAA,qBAAqB,GAAc;AACjC,UAAMr1B,KAAK,GAAG,KAAKmH,gBAAL,EAAd;AAEA,UAAM+nC,MAAM,GAAGlvC,KAAK,CAAC/mB,IAAN,KAAe,YAA9B;AACA,SAAK6Y,KAAL,CAAWF,KAAX,CAAiBs9C,MAAM,GAAGlhD,kBAAH,GAAwB,CAA/C;AACA,SAAKiX,SAAL,CAAejF,KAAf,EAAsB,cAAtB,EAAsC7Q,YAAtC;AAEA,WAAO6Q,KAAP;AACD;;AAEDqtC,EAAAA,iBAAiB,CAACr2D,IAAD,EAAuC;AACtD,SAAKyW,IAAL;AAEAzW,IAAAA,IAAI,CAACm4D,KAAL,GAAa,KAAK/Y,UAAL,EAAb;AACAp/C,IAAAA,IAAI,CAACo4D,OAAL,GAAe,IAAf;;AAEA,QAAI,KAAKl5D,KAAL,CAAW0V,OAAE,CAAChZ,MAAd,CAAJ,EAA2B;AACzB,YAAMy8D,MAAM,GAAG,KAAKlmD,SAAL,EAAf;AACA,WAAKsE,IAAL;;AACA,UAAI,KAAKvX,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAJ,EAA2B;AACzB,aAAKonB,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACAi/D,QAAAA,MAAM,CAACrvC,KAAP,GAAe,KAAKq1B,qBAAL,EAAf;AACA,aAAK79B,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AACD,OAJD,MAIO;AACLg/D,QAAAA,MAAM,CAACrvC,KAAP,GAAe,IAAf;AACA,aAAKlO,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACD;;AAEDyhD,MAAAA,MAAM,CAACtnD,IAAP,GAGE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAKjV,UAAL,CAAgB,KAAhB,EAAuB,KAAvB,CAFF,CAHF;AAOA,WAAKtkC,KAAL,CAAWD,IAAX;AAEA7a,MAAAA,IAAI,CAACo4D,OAAL,GAAe,KAAK9lD,UAAL,CAAgB+lD,MAAhB,EAAwB,aAAxB,CAAf;AACD;;AAEDr4D,IAAAA,IAAI,CAACs4D,SAAL,GAAiB,KAAKz3C,GAAL,CAASjM,OAAE,CAAC1Y,QAAZ,IAAwB,KAAKkjD,UAAL,EAAxB,GAA4C,IAA7D;;AAEA,QAAI,CAACp/C,IAAI,CAACo4D,OAAN,IAAiB,CAACp4D,IAAI,CAACs4D,SAA3B,EAAsC;AACpC,WAAKnrD,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACxL,gBAA9B;AACD;;AAED,WAAO,KAAKwK,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDs6C,EAAAA,iBAAiB,CACft6C,IADe,EAEfoS,IAFe,EAGQ;AACvB,SAAKqE,IAAL;AACA,SAAK6gD,QAAL,CAAct3D,IAAd,EAAoB,KAApB,EAA2BoS,IAA3B;AACA,SAAK4P,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDs2D,EAAAA,mBAAmB,CAACt2D,IAAD,EAA2C;AAC5D,SAAKyW,IAAL;AACAzW,IAAAA,IAAI,CAACuV,IAAL,GAAY,KAAK2hD,qBAAL,EAAZ;AACA,SAAKj2D,KAAL,CAAWqlC,MAAX,CAAkBplC,IAAlB,CAAuB0zD,SAAvB;AAEA50D,IAAAA,IAAI,CAAC+Q,IAAL,GAIE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAK7qC,cAAL,CAAoB,OAApB,CAFF,CAJF;AASA,SAAKvoB,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AAEA,WAAO,KAAKxC,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDu2D,EAAAA,kBAAkB,CAACv2D,IAAD,EAAyC;AACzD,QAAI,KAAKiB,KAAL,CAAW0U,MAAf,EAAuB;AACrB,WAAKxI,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACzJ,UAApC;AACD;;AACD,SAAK4M,IAAL;AACAzW,IAAAA,IAAI,CAACmoC,MAAL,GAAc,KAAK+uB,qBAAL,EAAd;AAEAl3D,IAAAA,IAAI,CAAC+Q,IAAL,GAKE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAK7qC,cAAL,CAAoB,MAApB,CAFF,CALF;AAUA,WAAO,KAAKlX,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDw2D,EAAAA,mBAAmB,CAACx2D,IAAD,EAA2C;AAC5D,SAAKyW,IAAL;AACA,WAAO,KAAKnE,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED42D,EAAAA,qBAAqB,CACnB52D,IADmB,EAEnB22D,SAFmB,EAGnB/sC,IAHmB,EAInB/U,OAJmB,EAKC;AACpB,SAAK,MAAMzd,KAAX,IAAoB,KAAK6J,KAAL,CAAWqlC,MAA/B,EAAuC;AACrC,UAAIlvC,KAAK,CAACS,IAAN,KAAe8+D,SAAnB,EAA8B;AAC5B,aAAKxpD,KAAL,CAAWyc,IAAI,CAAClrB,KAAhB,EAAuB4U,aAAM,CAACxM,kBAA9B,EAAkD6vD,SAAlD;AACD;AACF;;AAED,UAAMvkD,IAAI,GAAG,KAAKnR,KAAL,CAAWgB,IAAX,CAAgBnL,MAAhB,GACT,MADS,GAET,KAAKoI,KAAL,CAAW0V,OAAE,CAACrY,OAAd,IACA,QADA,GAEA,IAJJ;;AAKA,SAAK,IAAIoE,CAAC,GAAG,KAAKM,KAAL,CAAWqlC,MAAX,CAAkB1lC,MAAlB,GAA2B,CAAxC,EAA2CD,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtD,YAAMvJ,KAAK,GAAG,KAAK6J,KAAL,CAAWqlC,MAAX,CAAkB3lC,CAAlB,CAAd;;AACA,UAAIvJ,KAAK,CAACmhE,cAAN,KAAyBv4D,IAAI,CAACtB,KAAlC,EAAyC;AACvCtH,QAAAA,KAAK,CAACmhE,cAAN,GAAuB,KAAKt3D,KAAL,CAAWvC,KAAlC;AACAtH,QAAAA,KAAK,CAACgb,IAAN,GAAaA,IAAb;AACD,OAHD,MAGO;AACL;AACD;AACF;;AAED,SAAKnR,KAAL,CAAWqlC,MAAX,CAAkBplC,IAAlB,CAAuB;AACrBrJ,MAAAA,IAAI,EAAE8+D,SADe;AAErBvkD,MAAAA,IAAI,EAAEA,IAFe;AAGrBmmD,MAAAA,cAAc,EAAE,KAAKt3D,KAAL,CAAWvC;AAHN,KAAvB;AAKAsB,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKyY,cAAL,CACV3U,OAAO,GACHA,OAAO,CAACgX,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,GACEhX,OAAO,GAAG,OADZ,GAEEA,OAHC,GAIH,OALM,CAAZ;AAQA,SAAK5T,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AACA9U,IAAAA,IAAI,CAAC5I,KAAL,GAAawyB,IAAb;AACA,WAAO,KAAKtX,UAAL,CAAgBtS,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED2pB,EAAAA,wBAAwB,CACtB3pB,IADsB,EAEtB4pB,IAFsB,EAGT;AACb5pB,IAAAA,IAAI,CAACyP,UAAL,GAAkBma,IAAlB;AACA,SAAK5H,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAMDo/C,EAAAA,UAAU,CACRoZ,eAAyB,GAAG,KADpB,EAERC,qBAA+B,GAAG,IAF1B,EAGRC,eAHQ,EAIU;AAClB,UAAM14D,IAAI,GAAG,KAAKmS,SAAL,EAAb;;AACA,QAAIqmD,eAAJ,EAAqB;AACnB,WAAKv3D,KAAL,CAAW0lC,YAAX,CAAwB8c,KAAxB;AACD;;AACD,SAAKjjC,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;;AACA,QAAI0/D,qBAAJ,EAA2B;AACzB,WAAK39C,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACD;;AACD,SAAKnG,cAAL,CACEzQ,IADF,EAEEw4D,eAFF,EAGE,KAHF,EAIE5jD,OAAE,CAAC1b,MAJL,EAKEw/D,eALF;;AAOA,QAAID,qBAAJ,EAA2B;AACzB,WAAK39C,KAAL,CAAWD,IAAX;AACD;;AACD,WAAO,KAAKvI,UAAL,CAAgBtS,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDqQ,EAAAA,gBAAgB,CAACd,IAAD,EAA6B;AAC3C,WACEA,IAAI,CAACtN,IAAL,KAAc,qBAAd,IACAsN,IAAI,CAACE,UAAL,CAAgBxN,IAAhB,KAAyB,eADzB,IAEA,CAACsN,IAAI,CAACE,UAAL,CAAgBC,KAAhB,CAAsBY,aAHzB;AAKD;;AAEDG,EAAAA,cAAc,CACZzQ,IADY,EAEZw4D,eAFY,EAGZ/uC,QAHY,EAIZ9qB,GAJY,EAKZ+5D,eALY,EAMN;AACN,UAAM3nD,IAAI,GAAI/Q,IAAI,CAAC+Q,IAAL,GAAY,EAA1B;AACA,UAAMH,UAAU,GAAI5Q,IAAI,CAAC4Q,UAAL,GAAkB,EAAtC;AACA,SAAKooC,2BAAL,CACEjoC,IADF,EAEEynD,eAAe,GAAG5nD,UAAH,GAAgBzQ,SAFjC,EAGEspB,QAHF,EAIE9qB,GAJF,EAKE+5D,eALF;AAOD;;AAKD1f,EAAAA,2BAA2B,CACzBjoC,IADyB,EAEzBH,UAFyB,EAGzB6Y,QAHyB,EAIzB9qB,GAJyB,EAKzB+5D,eALyB,EAMnB;AACN,UAAMnZ,SAAS,GAAG,KAAKt+C,KAAL,CAAW0U,MAA7B;AACA,QAAI49C,sBAAsB,GAAG,KAA7B;AACA,QAAIoF,kBAAkB,GAAG,KAAzB;;AAEA,WAAO,CAAC,KAAKz5D,KAAL,CAAWP,GAAX,CAAR,EAAyB;AACvB,YAAM4Q,IAAI,GAAG,KAAKia,cAAL,CAAoB,IAApB,EAA0BC,QAA1B,CAAb;;AAEA,UAAI7Y,UAAU,IAAI,CAAC+nD,kBAAnB,EAAuC;AACrC,YAAI,KAAKtoD,gBAAL,CAAsBd,IAAtB,CAAJ,EAAiC;AAC/B,gBAAMF,SAAS,GAAG,KAAKkB,eAAL,CAAqBhB,IAArB,CAAlB;AACAqB,UAAAA,UAAU,CAAC1P,IAAX,CAAgBmO,SAAhB;;AAEA,cACE,CAACkkD,sBAAD,IACAlkD,SAAS,CAACX,KAAV,CAAgBA,KAAhB,KAA0B,YAF5B,EAGE;AACA6kD,YAAAA,sBAAsB,GAAG,IAAzB;AACA,iBAAK/P,SAAL,CAAe,IAAf;AACD;;AAED;AACD;;AACDmV,QAAAA,kBAAkB,GAAG,IAArB;AAEA,aAAK13D,KAAL,CAAW0lC,YAAX,CAAwB8c,KAAxB;AACD;;AACD1yC,MAAAA,IAAI,CAAC7P,IAAL,CAAUqO,IAAV;AACD;;AAED,QAAImpD,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACloC,IAAhB,CAAqB,IAArB,EAA2B+iC,sBAA3B;AACD;;AAED,QAAI,CAAChU,SAAL,EAAgB;AACd,WAAKiE,SAAL,CAAe,KAAf;AACD;;AAED,SAAK/sC,IAAL;AACD;;AAMD2gD,EAAAA,QAAQ,CACNp3D,IADM,EAENu0B,IAFM,EAGU;AAChBv0B,IAAAA,IAAI,CAACu0B,IAAL,GAAYA,IAAZ;AACA,SAAKvS,SAAL,CAA8B,KAA9B;AACAhiB,IAAAA,IAAI,CAACuV,IAAL,GAAY,KAAKrW,KAAL,CAAW0V,OAAE,CAACrb,IAAd,IAAsB,IAAtB,GAA6B,KAAKunB,eAAL,EAAzC;AACA,SAAKkB,SAAL,CAA8B,KAA9B;AACAhiB,IAAAA,IAAI,CAACwvD,MAAL,GAAc,KAAKtwD,KAAL,CAAW0V,OAAE,CAACvb,MAAd,IAAwB,IAAxB,GAA+B,KAAKynB,eAAL,EAA7C;AACA,SAAKN,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA2G,IAAAA,IAAI,CAAC+Q,IAAL,GAIE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAK7qC,cAAL,CAAoB,KAApB,CAFF,CAJF;AASA,SAAK1O,KAAL,CAAWD,IAAX;AACA,SAAK5Z,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AAEA,WAAO,KAAKxC,UAAL,CAAgBtS,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAKDw3D,EAAAA,UAAU,CACRx3D,IADQ,EAERu0B,IAFQ,EAGR4iC,OAHQ,EAIG;AACX,UAAMyB,OAAO,GAAG,KAAK15D,KAAL,CAAW0V,OAAE,CAACpX,GAAd,CAAhB;AACA,SAAKiZ,IAAL;;AAEA,QAAImiD,OAAJ,EAAa;AACX,UAAIzB,OAAO,GAAG,CAAC,CAAf,EAAkB,KAAKv0C,UAAL,CAAgBu0C,OAAhB;AACnB,KAFD,MAEO;AACLn3D,MAAAA,IAAI,CAAC64D,KAAL,GAAa1B,OAAO,GAAG,CAAC,CAAxB;AACD;;AAED,QACE5iC,IAAI,CAACtyB,IAAL,KAAc,qBAAd,IACAsyB,IAAI,CAACgjC,YAAL,CAAkB,CAAlB,EAAqBhjC,IAArB,IAA6B,IAD7B,KAEC,CAACqkC,OAAD,IACC,KAAK33D,KAAL,CAAW0U,MADZ,IAEC4e,IAAI,CAACniB,IAAL,KAAc,KAFf,IAGCmiB,IAAI,CAACgjC,YAAL,CAAkB,CAAlB,EAAqB5lD,EAArB,CAAwB1P,IAAxB,KAAiC,YALnC,CADF,EAOE;AACA,WAAKkL,KAAL,CACEonB,IAAI,CAAC71B,KADP,EAEE4U,aAAM,CAACtO,sBAFT,EAGE4zD,OAAO,GAAG,QAAH,GAAc,QAHvB;AAKD,KAbD,MAaO,IAAIrkC,IAAI,CAACtyB,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKkL,KAAL,CAAWonB,IAAI,CAAC71B,KAAhB,EAAuB4U,aAAM,CAAClN,UAA9B,EAA0C,UAA1C;AACD;;AAEDpG,IAAAA,IAAI,CAACgvB,IAAL,GAAYuF,IAAZ;AACAv0B,IAAAA,IAAI,CAAC2kB,KAAL,GAAai0C,OAAO,GAChB,KAAK93C,eAAL,EADgB,GAEhB,KAAKoK,uBAAL,EAFJ;AAGA,SAAK1K,MAAL,CAAY5L,OAAE,CAACvb,MAAf;AAEA2G,IAAAA,IAAI,CAAC+Q,IAAL,GAIE,KAAKsjD,0BAAL,CAAgC,MAE9B,KAAK7qC,cAAL,CAAoB,KAApB,CAFF,CAJF;AASA,SAAK1O,KAAL,CAAWD,IAAX;AACA,SAAK5Z,KAAL,CAAWqlC,MAAX,CAAkBxxB,GAAlB;AAEA,WAAO,KAAKxC,UAAL,CAAgBtS,IAAhB,EAAsB44D,OAAO,GAAG,gBAAH,GAAsB,gBAAnD,CAAP;AACD;;AAIDtB,EAAAA,QAAQ,CACNt3D,IADM,EAEN84D,KAFM,EAGN1mD,IAHM,EAIiB;AACvB,UAAMmlD,YAAY,GAAIv3D,IAAI,CAACu3D,YAAL,GAAoB,EAA1C;AACA,UAAMwB,YAAY,GAAG,KAAKt5D,SAAL,CAAe,YAAf,CAArB;AACAO,IAAAA,IAAI,CAACoS,IAAL,GAAYA,IAAZ;;AACA,aAAS;AACP,YAAM6Z,IAAI,GAAG,KAAK9Z,SAAL,EAAb;AACA,WAAKme,UAAL,CAAgBrE,IAAhB,EAAsB7Z,IAAtB;;AACA,UAAI,KAAKyO,GAAL,CAASjM,OAAE,CAACva,EAAZ,CAAJ,EAAqB;AACnB4xB,QAAAA,IAAI,CAACsI,IAAL,GAAYukC,KAAK,GACb,KAAK5K,0BAAL,EADa,GAEb,KAAKhjC,uBAAL,EAFJ;AAGD,OAJD,MAIO;AACL,YACE9Y,IAAI,KAAK,OAAT,IACA,EAAE,KAAKlT,KAAL,CAAW0V,OAAE,CAACpX,GAAd,KAAsB,KAAK+kB,YAAL,CAAkB,IAAlB,CAAxB,CAFF,EAGE;AAGA,cAAI,CAACw2C,YAAL,EAAmB;AACjB,iBAAK5rD,KAAL,CACE,KAAKlM,KAAL,CAAWgM,UADb,EAEEqG,aAAM,CAACvP,6BAFT,EAGE,oBAHF;AAKD;AACF,SAbD,MAaO,IACLkoB,IAAI,CAACta,EAAL,CAAQ1P,IAAR,KAAiB,YAAjB,IACA,EAAE62D,KAAK,KAAK,KAAK55D,KAAL,CAAW0V,OAAE,CAACpX,GAAd,KAAsB,KAAK+kB,YAAL,CAAkB,IAAlB,CAA3B,CAAP,CAFK,EAGL;AACA,eAAKpV,KAAL,CACE,KAAKlM,KAAL,CAAWgM,UADb,EAEEqG,aAAM,CAACvP,6BAFT,EAGE,0BAHF;AAKD;;AACDkoB,QAAAA,IAAI,CAACsI,IAAL,GAAY,IAAZ;AACD;;AACDgjC,MAAAA,YAAY,CAACr2D,IAAb,CAAkB,KAAKoR,UAAL,CAAgB2Z,IAAhB,EAAsB,oBAAtB,CAAlB;AACA,UAAI,CAAC,KAAKpL,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAL,EAAyB;AAC1B;;AACD,WAAO0G,IAAP;AACD;;AAEDswB,EAAAA,UAAU,CAACrE,IAAD,EAA6B7Z,IAA7B,EAAkE;AAC1E6Z,IAAAA,IAAI,CAACta,EAAL,GAAU,KAAKwe,gBAAL,EAAV;AACA,SAAKlC,SAAL,CACEhC,IAAI,CAACta,EADP,EAEE,sBAFF,EAGES,IAAI,KAAK,KAAT,GAAiBgG,QAAjB,GAA4BD,YAH9B,EAIEhY,SAJF,EAKEiS,IAAI,KAAK,KALX;AAOD;;AAKDy+C,EAAAA,aAAa,CACX7wD,IADW,EAEXg5D,SAAkB,GAAGlE,aAFV,EAGX9kD,OAAiB,GAAG,KAHT,EAIR;AACH,UAAM0c,WAAW,GAAGssC,SAAS,GAAGjE,cAAhC;AACA,UAAMkE,kBAAkB,GAAGD,SAAS,GAAGhE,sBAAvC;AACA,UAAMkE,SAAS,GAAG,CAAC,CAACxsC,WAAF,IAAiB,EAAEssC,SAAS,GAAG/D,gBAAd,CAAnC;AAEA,SAAKllD,YAAL,CAAkB/P,IAAlB,EAAwBgQ,OAAxB;;AAEA,QAAI,KAAK9Q,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,KAAuB09D,kBAA3B,EAA+C;AAC7C,WAAK9rD,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACnO,iCAApC;AACD;;AACDnF,IAAAA,IAAI,CAACqzD,SAAL,GAAiB,KAAKxyC,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAjB;;AAEA,QAAImxB,WAAJ,EAAiB;AACf1sB,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK0tC,eAAL,CAAqB6Z,SAArB,CAAV;AACD;;AAED,UAAMne,yBAAyB,GAAG,KAAK95C,KAAL,CAAWgpB,sBAA7C;AACA,SAAKhpB,KAAL,CAAWgpB,sBAAX,GAAoC,KAApC;AACA,SAAKnP,KAAL,CAAWF,KAAX,CAAiB9D,cAAjB;AACA,SAAKsiC,SAAL,CAAex+B,KAAf,CAAqBsxB,aAAa,CAACl8B,OAAD,EAAUhQ,IAAI,CAACqzD,SAAf,CAAlC;;AAEA,QAAI,CAAC3mC,WAAL,EAAkB;AAChB1sB,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAK0tC,eAAL,EAAV;AACD;;AAED,SAAKjvB,mBAAL,CAAyBpwB,IAAzB,EAAoD,KAApD;AAKA,SAAKq0D,0BAAL,CAAgC,MAAM;AAEpC,WAAK9qC,0BAAL,CACEvpB,IADF,EAEE0sB,WAAW,GAAG,qBAAH,GAA2B,oBAFxC;AAID,KAND;AAQA,SAAK0sB,SAAL,CAAev+B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;;AAEA,QAAI6R,WAAW,IAAI,CAACusC,kBAApB,EAAwC;AAItC,WAAKzd,2BAAL,CAAiCx7C,IAAjC;AACD;;AAED,SAAKiB,KAAL,CAAWgpB,sBAAX,GAAoC8wB,yBAApC;AACA,WAAO/6C,IAAP;AACD;;AAEDq/C,EAAAA,eAAe,CAAC6Z,SAAD,EAAqC;AAClD,WAAOA,SAAS,IAAI,KAAKh6D,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAb,GAAmC,KAAKupB,eAAL,EAAnC,GAA4D,IAAnE;AACD;;AAEDgP,EAAAA,mBAAmB,CAACpwB,IAAD,EAAmBqwB,cAAnB,EAAmD;AACpE,SAAK7P,MAAL,CAAY5L,OAAE,CAACxb,MAAf;AACA,SAAKsyD,eAAL,CAAqB9wC,KAArB,CAA2BgvC,4BAA4B,EAAvD;AACA5pD,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAK+wC,gBAAL,CACZv+B,OAAE,CAACvb,MADS,MAGK,KAHL,EAIZg3B,cAJY,CAAd;AAOA,SAAKq7B,eAAL,CAAqB7wC,IAArB;AACD;;AAED2gC,EAAAA,2BAA2B,CAACx7C,IAAD,EAAyB;AAClD,QAAI,CAACA,IAAI,CAAC2R,EAAV,EAAc;AAMd,SAAKmJ,KAAL,CAAWC,WAAX,CACE/a,IAAI,CAAC2R,EAAL,CAAQ9Z,IADV,EAEE,KAAKoJ,KAAL,CAAW0U,MAAX,IAAqB3V,IAAI,CAACqzD,SAA1B,IAAuCrzD,IAAI,CAACqxB,KAA5C,GACI,KAAKvW,KAAL,CAAWN,mBAAX,GACEpC,QADF,GAEED,YAHN,GAIIE,aANN,EAOErY,IAAI,CAAC2R,EAAL,CAAQjT,KAPV;AASD;;AAKD27C,EAAAA,UAAU,CACRr6C,IADQ,EAER0sB,WAFQ,EAGRC,UAHQ,EAIL;AACH,SAAKlW,IAAL;AACA,SAAK6oC,cAAL,CAAoBt/C,IAApB;AAGA,UAAMu/C,SAAS,GAAG,KAAKt+C,KAAL,CAAW0U,MAA7B;AACA,SAAK1U,KAAL,CAAW0U,MAAX,GAAoB,IAApB;AAEA,SAAK8W,YAAL,CAAkBzsB,IAAlB,EAAwB0sB,WAAxB,EAAqCC,UAArC;AACA,SAAK4B,eAAL,CAAqBvuB,IAArB;AAEAA,IAAAA,IAAI,CAAC+Q,IAAL,GAAY,KAAKyuC,cAAL,CAAoB,CAAC,CAACx/C,IAAI,CAACkO,UAA3B,EAAuCqxC,SAAvC,CAAZ;AAEA,WAAO,KAAKjtC,UAAL,CACLtS,IADK,EAEL0sB,WAAW,GAAG,kBAAH,GAAwB,iBAF9B,CAAP;AAID;;AAEDyB,EAAAA,eAAe,GAAY;AACzB,WAAO,KAAKjvB,KAAL,CAAW0V,OAAE,CAACva,EAAd,KAAqB,KAAK6E,KAAL,CAAW0V,OAAE,CAACrb,IAAd,CAArB,IAA4C,KAAK2F,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAnD;AACD;;AAEDg1B,EAAAA,aAAa,GAAY;AACvB,WAAO,KAAKhvB,KAAL,CAAW0V,OAAE,CAACxb,MAAd,CAAP;AACD;;AAEDg1B,EAAAA,sBAAsB,CAAChe,MAAD,EAAmD;AACvE,WACE,CAACA,MAAM,CAACiC,QAAR,IACA,CAACjC,MAAM,CAAC6V,MADR,KAEC7V,MAAM,CAACiD,GAAP,CAAWxb,IAAX,KAAoB,aAApB,IACCuY,MAAM,CAACiD,GAAP,CAAW3E,KAAX,KAAqB,aAHvB,CADF;AAMD;;AAGD8wC,EAAAA,cAAc,CAACpC,aAAD,EAAyBmC,SAAzB,EAA0D;AACtE,SAAK4I,UAAL,CAAgBvtC,KAAhB;AAEA,UAAM3Z,KAA8B,GAAG;AACrCk4D,MAAAA,cAAc,EAAE,KADqB;AAErC/b,MAAAA;AAFqC,KAAvC;AAIA,QAAIlC,UAAyB,GAAG,EAAhC;AACA,UAAMhqC,SAAsB,GAAG,KAAKiB,SAAL,EAA/B;AACAjB,IAAAA,SAAS,CAACH,IAAV,GAAiB,EAAjB;AAEA,SAAKyP,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;AAIA,SAAKs7D,0BAAL,CAAgC,MAAM;AACpC,aAAO,CAAC,KAAKn1D,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAR,EAA+B;AAC7B,YAAI,KAAK2nB,GAAL,CAASjM,OAAE,CAACrb,IAAZ,CAAJ,EAAuB;AACrB,cAAI2hD,UAAU,CAACt6C,MAAX,GAAoB,CAAxB,EAA2B;AACzB,kBAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWgM,UAAtB,EAAkCqG,aAAM,CAACnP,kBAAzC,CAAN;AACD;;AACD;AACD;;AAED,YAAI,KAAKjF,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAJ,EAAuB;AACrBghD,UAAAA,UAAU,CAACh6C,IAAX,CAAgB,KAAKgsD,cAAL,EAAhB;AACA;AACD;;AAED,cAAMrgC,MAAM,GAAG,KAAK1a,SAAL,EAAf;;AAGA,YAAI+oC,UAAU,CAACt6C,MAAf,EAAuB;AACrBisB,UAAAA,MAAM,CAACquB,UAAP,GAAoBA,UAApB;AACA,eAAKhqB,0BAAL,CAAgCrE,MAAhC,EAAwCquB,UAAU,CAAC,CAAD,CAAlD;AACAA,UAAAA,UAAU,GAAG,EAAb;AACD;;AAED,aAAKtuB,gBAAL,CAAsB1b,SAAtB,EAAiC2b,MAAjC,EAAyC5rB,KAAzC;;AAEA,YACE4rB,MAAM,CAACza,IAAP,KAAgB,aAAhB,IACAya,MAAM,CAACquB,UADP,IAEAruB,MAAM,CAACquB,UAAP,CAAkBt6C,MAAlB,GAA2B,CAH7B,EAIE;AACA,eAAKuM,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4U,aAAM,CAACrP,oBAAhC;AACD;AACF;AACF,KAjCD;AAmCA,SAAKhD,KAAL,CAAW0U,MAAX,GAAoB4pC,SAApB;AAEA,SAAK9oC,IAAL;;AAEA,QAAIykC,UAAU,CAACt6C,MAAf,EAAuB;AACrB,YAAM,KAAKuM,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACtJ,iBAApC,CAAN;AACD;;AAED,SAAKm+C,UAAL,CAAgBttC,IAAhB;AAEA,WAAO,KAAKvI,UAAL,CAAgBpB,SAAhB,EAA2B,WAA3B,CAAP;AACD;;AAID4b,EAAAA,4BAA4B,CAC1B5b,SAD0B,EAE1B2b,MAF0B,EAGjB;AACT,UAAMxZ,GAAG,GAAG,KAAK+N,eAAL,CAAqB,IAArB,CAAZ;;AAEA,QAAI,KAAK8M,aAAL,EAAJ,EAA0B;AACxB,YAAM9d,MAAqB,GAAIyc,MAA/B;AAGAzc,MAAAA,MAAM,CAACgC,IAAP,GAAc,QAAd;AACAhC,MAAAA,MAAM,CAACiC,QAAP,GAAkB,KAAlB;AACAjC,MAAAA,MAAM,CAACiD,GAAP,GAAaA,GAAb;AACAjD,MAAAA,MAAM,CAAC6V,MAAP,GAAgB,KAAhB;AACA,WAAKhV,eAAL,CACEC,SADF,EAEEd,MAFF,EAGE,KAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;AAQA,aAAO,IAAP;AACD,KAjBD,MAiBO,IAAI,KAAK+d,eAAL,EAAJ,EAA4B;AACjC,YAAMxb,IAAqB,GAAIka,MAA/B;AAGAla,MAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACAM,MAAAA,IAAI,CAACU,GAAL,GAAWA,GAAX;AACAV,MAAAA,IAAI,CAACsT,MAAL,GAAc,KAAd;AACA/U,MAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoB,KAAKqR,kBAAL,CAAwBI,IAAxB,CAApB;AACA,aAAO,IAAP;AACD;;AACD,SAAKpQ,iCAAL,CAAuC8Q,GAAvC;AACA,WAAO,KAAP;AACD;;AAEDuZ,EAAAA,gBAAgB,CACd1b,SADc,EAEd2b,MAFc,EAGd5rB,KAHc,EAIR;AACN,UAAM+kB,QAAQ,GAAG,KAAKzD,YAAL,CAAkB,QAAlB,CAAjB;;AAEA,QAAIyD,QAAJ,EAAc;AACZ,UAAI,KAAK8G,4BAAL,CAAkC5b,SAAlC,EAA6C2b,MAA7C,CAAJ,EAA0D;AAExD;AACD;;AACD,UAAI,KAAKhM,GAAL,CAASjM,OAAE,CAAC7b,MAAZ,CAAJ,EAAyB;AACvB,aAAKmkD,qBAAL,CAA2BhsC,SAA3B,EAAwC2b,MAAxC;AACA;AACD;AACF;;AAED,SAAKswB,4BAAL,CAAkCjsC,SAAlC,EAA6C2b,MAA7C,EAAqD5rB,KAArD,EAA4D+kB,QAA5D;AACD;;AAEDm3B,EAAAA,4BAA4B,CAC1BjsC,SAD0B,EAE1B2b,MAF0B,EAG1B5rB,KAH0B,EAI1B+kB,QAJ0B,EAK1B;AACA,UAAMozC,YAAyC,GAAGvsC,MAAlD;AACA,UAAMwsC,aAAiD,GAAGxsC,MAA1D;AACA,UAAMysC,UAAuC,GAAGzsC,MAAhD;AACA,UAAM0sC,WAA+C,GAAG1sC,MAAxD;AAEA,UAAMzc,MAAkD,GAAGgpD,YAA3D;AACA,UAAMI,YAAqD,GAAGJ,YAA9D;AAEAvsC,IAAAA,MAAM,CAAC5G,MAAP,GAAgBD,QAAhB;;AAEA,QAAI,KAAKnF,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAJ,EAAuB;AAErB6U,MAAAA,MAAM,CAACgC,IAAP,GAAc,QAAd;AACA,YAAMR,aAAa,GAAG,KAAK1S,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAtB;AACA,WAAKihE,qBAAL,CAA2BrpD,MAA3B;;AAEA,UAAIwB,aAAJ,EAAmB;AAEjB,aAAK0c,sBAAL,CAA4Bpd,SAA5B,EAAuCmoD,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;AACA;AACD;;AAED,UAAI,KAAKjrC,sBAAL,CAA4BgrC,YAA5B,CAAJ,EAA+C;AAC7C,aAAKjsD,KAAL,CAAWisD,YAAY,CAAC/lD,GAAb,CAAiB3U,KAA5B,EAAmC4U,aAAM,CAACxP,sBAA1C;AACD;;AAED,WAAKmN,eAAL,CACEC,SADF,EAEEkoD,YAFF,EAGE,IAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;AASA;AACD;;AAED,UAAM72C,YAAY,GAAG,KAAKrjB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB,CAAC,KAAKoJ,KAAL,CAAWylC,WAAxD;AACA,UAAM6qB,SAAS,GAAG,KAAKryD,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAlB;AACA,UAAM6a,GAAG,GAAG,KAAKomD,qBAAL,CAA2B5sC,MAA3B,CAAZ;AACA,UAAM6sC,uBAAuB,GAAG,KAAKz4D,KAAL,CAAWvC,KAA3C;AAEA,SAAK2+C,4BAAL,CAAkCmc,YAAlC;;AAEA,QAAI,KAAKtrC,aAAL,EAAJ,EAA0B;AACxB9d,MAAAA,MAAM,CAACgC,IAAP,GAAc,QAAd;;AAEA,UAAIm/C,SAAJ,EAAe;AACb,aAAKjjC,sBAAL,CAA4Bpd,SAA5B,EAAuCmoD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACA;AACD;;AAGD,YAAMjoD,aAAa,GAAG,KAAKgd,sBAAL,CAA4BgrC,YAA5B,CAAtB;AACA,UAAI/nD,iBAAiB,GAAG,KAAxB;;AACA,UAAID,aAAJ,EAAmB;AACjBgoD,QAAAA,YAAY,CAAChnD,IAAb,GAAoB,aAApB;;AAGA,YAAInR,KAAK,CAACk4D,cAAN,IAAwB,CAAC,KAAK15D,SAAL,CAAe,YAAf,CAA7B,EAA2D;AACzD,eAAK0N,KAAL,CAAWkG,GAAG,CAAC3U,KAAf,EAAsB4U,aAAM,CAAC/O,oBAA7B;AACD;;AACD,YAAI6M,aAAa,IAAI,KAAK3R,SAAL,CAAe,YAAf,CAAjB,IAAiDotB,MAAM,CAACsuB,QAA5D,EAAsE;AACpE,eAAKhuC,KAAL,CAAWkG,GAAG,CAAC3U,KAAf,EAAsB4U,aAAM,CAAClL,qBAA7B;AACD;;AACDnH,QAAAA,KAAK,CAACk4D,cAAN,GAAuB,IAAvB;AACA9nD,QAAAA,iBAAiB,GAAGpQ,KAAK,CAACm8C,aAA1B;AACD;;AAED,WAAKnsC,eAAL,CACEC,SADF,EAEEkoD,YAFF,EAGE,KAHF,EAIE,KAJF,EAKEhoD,aALF,EAMEC,iBANF;AAQD,KAjCD,MAiCO,IAAI,KAAK8c,eAAL,EAAJ,EAA4B;AACjC,UAAIojC,SAAJ,EAAe;AACb,aAAKoI,wBAAL,CAA8BzoD,SAA9B,EAAyCqoD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKK,iBAAL,CAAuB1oD,SAAvB,EAAkCooD,UAAlC;AACD;AACF,KANM,MAMA,IACL/2C,YAAY,IACZlP,GAAG,CAACxb,IAAJ,KAAa,OADb,IAEA,CAAC,KAAKw7C,gBAAL,EAHI,EAIL;AAEA,WAAK9wC,iCAAL,CAAuC8Q,GAAvC;AACA,YAAMlC,WAAW,GAAG,KAAK0P,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAApB;;AAEA,UAAIi+D,YAAY,CAAChmD,QAAjB,EAA2B;AACzB,aAAKoP,UAAL,CAAgB82C,uBAAhB;AACD;;AAEDtpD,MAAAA,MAAM,CAACgC,IAAP,GAAc,QAAd;AAEA,YAAMm/C,SAAS,GAAG,KAAKryD,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAlB;AACA,WAAKihE,qBAAL,CAA2BrpD,MAA3B;AACA,WAAKitC,4BAAL,CAAkCmc,YAAlC;;AAEA,UAAIjI,SAAJ,EAAe;AAEb,aAAKjjC,sBAAL,CACEpd,SADF,EAEEmoD,aAFF,EAGEloD,WAHF,EAIE,IAJF;AAMD,OARD,MAQO;AACL,YAAI,KAAKid,sBAAL,CAA4BgrC,YAA5B,CAAJ,EAA+C;AAC7C,eAAKjsD,KAAL,CAAWisD,YAAY,CAAC/lD,GAAb,CAAiB3U,KAA5B,EAAmC4U,aAAM,CAACzP,kBAA1C;AACD;;AAED,aAAKoN,eAAL,CACEC,SADF,EAEEkoD,YAFF,EAGEjoD,WAHF,EAIE,IAJF,EAKsB,KALtB,EAME,KANF;AAQD;AACF,KAzCM,MAyCA,IACLoR,YAAY,KACXlP,GAAG,CAACxb,IAAJ,KAAa,KAAb,IAAsBwb,GAAG,CAACxb,IAAJ,KAAa,KADxB,CAAZ,IAEA,EAAE,KAAKqH,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,KAAuB,KAAK83C,gBAAL,EAAzB,CAHK,EAIL;AAGA,WAAK9wC,iCAAL,CAAuC8Q,GAAvC;AACAjD,MAAAA,MAAM,CAACgC,IAAP,GAAciB,GAAG,CAACxb,IAAlB;AAEA,YAAM05D,SAAS,GAAG,KAAKryD,KAAL,CAAW0V,OAAE,CAACpc,WAAd,CAAlB;AACA,WAAKihE,qBAAL,CAA2BL,YAA3B;;AAEA,UAAI7H,SAAJ,EAAe;AAEb,aAAKjjC,sBAAL,CAA4Bpd,SAA5B,EAAuCmoD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACD,OAHD,MAGO;AACL,YAAI,KAAKjrC,sBAAL,CAA4BgrC,YAA5B,CAAJ,EAA+C;AAC7C,eAAKjsD,KAAL,CAAWisD,YAAY,CAAC/lD,GAAb,CAAiB3U,KAA5B,EAAmC4U,aAAM,CAAC1P,qBAA1C;AACD;;AACD,aAAKqN,eAAL,CACEC,SADF,EAEEkoD,YAFF,EAGE,KAHF,EAIE,KAJF,EAKsB,KALtB,EAME,KANF;AAQD;;AAED,WAAK1qC,uBAAL,CAA6B0qC,YAA7B;AACD,KA/BM,MA+BA,IAAI,KAAK/lB,gBAAL,EAAJ,EAA6B;AAElC,UAAIke,SAAJ,EAAe;AACb,aAAKoI,wBAAL,CAA8BzoD,SAA9B,EAAyCqoD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKK,iBAAL,CAAuB1oD,SAAvB,EAAkCooD,UAAlC;AACD;AACF,KAPM,MAOA;AACL,WAAK12C,UAAL;AACD;AACF;;AAGD62C,EAAAA,qBAAqB,CAAC5sC,MAAD,EAAqD;AACxE,UAAM;AAAE5qB,MAAAA,IAAF;AAAQyM,MAAAA,KAAR;AAAehQ,MAAAA;AAAf,QAAyB,KAAKuC,KAApC;;AACA,QACE,CAACgB,IAAI,KAAK2S,OAAE,CAAC/c,IAAZ,IAAoBoK,IAAI,KAAK2S,OAAE,CAACrc,MAAjC,KACAs0B,MAAM,CAAC5G,MADP,IAEAvX,KAAK,KAAK,WAHZ,EAIE;AACA,WAAKvB,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAChK,eAAzB;AACD;;AAED,QAAIrH,IAAI,KAAK2S,OAAE,CAACpc,WAAZ,IAA2BkW,KAAK,KAAK,aAAzC,EAAwD;AACtD,WAAKvB,KAAL,CAAWzO,KAAX,EAAkB4U,aAAM,CAAC3P,4BAAzB;AACD;;AAED,WAAO,KAAKgrB,iBAAL,CAAuB9B,MAAvB,EAA0D,IAA1D,CAAP;AACD;;AAEDqwB,EAAAA,qBAAqB,CACnBhsC,SADmB,EAEnB2b,MAFmB,EAGnB;AAAA;;AACA,SAAK4yB,YAAL,CAAkB,kBAAlB,EAAsC5yB,MAAM,CAACnuB,KAA7C;AAEA,SAAKoc,KAAL,CAAWF,KAAX,CAAiBzD,WAAW,GAAGC,kBAAd,GAAmCH,WAApD;AAEA,UAAMk0C,SAAS,GAAG,KAAKlqD,KAAL,CAAWqlC,MAA7B;AACA,SAAKrlC,KAAL,CAAWqlC,MAAX,GAAoB,EAApB;AAGA,SAAK8S,SAAL,CAAex+B,KAAf,CAAqB0wB,KAArB;AACA,UAAMv6B,IAAI,GAAI8b,MAAM,CAAC9b,IAAP,GAAc,EAA5B;AACA,SAAKioC,2BAAL,CAAiCjoC,IAAjC,EAAuC5Q,SAAvC,EAAkD,KAAlD,EAAyDyU,OAAE,CAAC1b,MAA5D;AACA,SAAKkgD,SAAL,CAAev+B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAK5Z,KAAL,CAAWqlC,MAAX,GAAoB6kB,SAApB;AACAj6C,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoB,KAAKoR,UAAL,CAA+Bua,MAA/B,EAAuC,aAAvC,CAApB;;AACA,8BAAIA,MAAM,CAACquB,UAAX,aAAI,mBAAmBt6C,MAAvB,EAA+B;AAC7B,WAAKuM,KAAL,CAAW0f,MAAM,CAACnuB,KAAlB,EAAyB4U,aAAM,CAAClP,oBAAhC;AACD;AACF;;AAEDw1D,EAAAA,iBAAiB,CAAC1oD,SAAD,EAAyByB,IAAzB,EAAgD;AAC/D,QACE,CAACA,IAAI,CAACN,QAAN,KACCM,IAAI,CAACU,GAAL,CAASxb,IAAT,KAAkB,aAAlB,IAAmC8a,IAAI,CAACU,GAAL,CAAS3E,KAAT,KAAmB,aADvD,CADF,EAGE;AAGA,WAAKvB,KAAL,CAAWwF,IAAI,CAACU,GAAL,CAAS3U,KAApB,EAA2B4U,aAAM,CAAC5P,qBAAlC;AACD;;AAEDwN,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoB,KAAKqR,kBAAL,CAAwBI,IAAxB,CAApB;AACD;;AAEDgnD,EAAAA,wBAAwB,CACtBzoD,SADsB,EAEtByB,IAFsB,EAGtB;AACA,UAAM3S,IAAI,GAAG,KAAKyS,yBAAL,CAA+BE,IAA/B,CAAb;AACAzB,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoBlB,IAApB;AAEA,SAAKmoD,UAAL,CAAgBD,kBAAhB,CACE,KAAKx2C,gBAAL,CAAsB1R,IAAI,CAACqT,GAA3B,CADF,EAEEkG,mBAFF,EAGEvZ,IAAI,CAACqT,GAAL,CAAS3U,KAHX;AAKD;;AAEDuS,EAAAA,eAAe,CACbC,SADa,EAEbd,MAFa,EAGbe,WAHa,EAIbnB,OAJa,EAKboB,aALa,EAMbC,iBANa,EAOP;AACNH,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CACE,KAAKoQ,WAAL,CACElB,MADF,EAEEe,WAFF,EAGEnB,OAHF,EAIEoB,aAJF,EAKEC,iBALF,EAME,aANF,EAOE,IAPF,CADF;AAWD;;AAEDid,EAAAA,sBAAsB,CACpBpd,SADoB,EAEpBd,MAFoB,EAGpBe,WAHoB,EAIpBnB,OAJoB,EAKd;AACN,UAAMhQ,IAAI,GAAG,KAAKsR,WAAL,CACXlB,MADW,EAEXe,WAFW,EAGXnB,OAHW,EAIS,KAJT,EAKX,KALW,EAMX,oBANW,EAOX,IAPW,CAAb;AASAkB,IAAAA,SAAS,CAACH,IAAV,CAAe7P,IAAf,CAAoBlB,IAApB;AAEA,UAAMoS,IAAI,GACRpS,IAAI,CAACoS,IAAL,KAAc,KAAd,GACIpS,IAAI,CAACimB,MAAL,GACE9M,2BADF,GAEEE,6BAHN,GAIIrZ,IAAI,CAACoS,IAAL,KAAc,KAAd,GACApS,IAAI,CAACimB,MAAL,GACE7M,2BADF,GAEEE,6BAHF,GAIAC,mBATN;AAUA,SAAK4uC,UAAL,CAAgBD,kBAAhB,CACE,KAAKx2C,gBAAL,CAAsB1R,IAAI,CAACqT,GAA3B,CADF,EAEEjB,IAFF,EAGEpS,IAAI,CAACqT,GAAL,CAAS3U,KAHX;AAKD;;AAGD2+C,EAAAA,4BAA4B,CAE1BC,YAF0B,EAGpB;;AAGR7qC,EAAAA,yBAAyB,CACvBzS,IADuB,EAEC;AACxB,SAAK65D,gBAAL,CAAsB75D,IAAtB;AACA,SAAKgiB,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAGDuS,EAAAA,kBAAkB,CAACvS,IAAD,EAAyC;AACzD,SAAK65D,gBAAL,CAAsB75D,IAAtB;AACA,SAAKgiB,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAGD65D,EAAAA,gBAAgB,CAAC75D,IAAD,EAAuD;AACrE,SAAK8a,KAAL,CAAWF,KAAX,CAAiBzD,WAAW,GAAGF,WAA/B;AACA,SAAKy0C,eAAL,CAAqB9wC,KAArB,CAA2BmvC,kBAAkB,EAA7C;AACA,SAAK3Q,SAAL,CAAex+B,KAAf,CAAqB0wB,KAArB;AACAtrC,IAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKmS,GAAL,CAASjM,OAAE,CAACva,EAAZ,IAAkB,KAAK6wB,uBAAL,EAAlB,GAAmD,IAAhE;AACA,SAAKwgC,eAAL,CAAqB7wC,IAArB;AACA,SAAKu+B,SAAL,CAAev+B,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACD;;AAED4R,EAAAA,YAAY,CACVzsB,IADU,EAEV0sB,WAFU,EAGVC,UAHU,EAIV3R,WAAyB,GAAG9C,UAJlB,EAKJ;AACN,QAAI,KAAKhZ,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AACvBmI,MAAAA,IAAI,CAAC2R,EAAL,GAAU,KAAKyP,eAAL,EAAV;;AACA,UAAIsL,WAAJ,EAAiB;AACf,aAAKuB,SAAL,CAAejuB,IAAI,CAAC2R,EAApB,EAAwB,YAAxB,EAAsCqJ,WAAtC;AACD;AACF,KALD,MAKO;AACL,UAAI2R,UAAU,IAAI,CAACD,WAAnB,EAAgC;AAC9B1sB,QAAAA,IAAI,CAAC2R,EAAL,GAAU,IAAV;AACD,OAFD,MAEO;AACL,aAAKiR,UAAL,CAAgB,IAAhB,EAAsBtP,aAAM,CAACpM,gBAA7B;AACD;AACF;AACF;;AAGDqnB,EAAAA,eAAe,CAACvuB,IAAD,EAAsB;AACnCA,IAAAA,IAAI,CAACkO,UAAL,GAAkB,KAAK2S,GAAL,CAASjM,OAAE,CAAC1X,QAAZ,IAAwB,KAAK0yD,mBAAL,EAAxB,GAAqD,IAAvE;AACD;;AAKDh8C,EAAAA,WAAW,CAAC5T,IAAD,EAA4B;AACrC,UAAM85D,UAAU,GAAG,KAAKja,gCAAL,CAAsC7/C,IAAtC,CAAnB;AACA,UAAM+5D,iBAAiB,GAAG,CAACD,UAAD,IAAe,KAAKj5C,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAzC;AACA,UAAM0gE,OAAO,GAAGD,iBAAiB,IAAI,KAAKztC,aAAL,CAAmBtsB,IAAnB,CAArC;AACA,UAAMwsB,YAAY,GAChBwtC,OAAO,IAAI,KAAKztC,kCAAL,CAAwCvsB,IAAxC,CADb;AAEA,UAAMi6D,mBAAmB,GACvBF,iBAAiB,KAAK,CAACvtC,YAAD,IAAiB,KAAK3L,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAtB,CADnB;AAEA,UAAM4gE,cAAc,GAAGJ,UAAU,IAAIE,OAArC;;AAEA,QAAIA,OAAO,IAAI,CAACxtC,YAAhB,EAA8B;AAC5B,UAAIstC,UAAJ,EAAgB,KAAKl3C,UAAL;AAChB,WAAKyJ,eAAL,CAAqBrsB,IAArB,EAA2B,IAA3B;AAEA,aAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED,UAAMm6D,aAAa,GAAG,KAAKC,+BAAL,CAAqCp6D,IAArC,CAAtB;;AAEA,QACG85D,UAAU,IAAIC,iBAAd,IAAmC,CAACC,OAApC,IAA+C,CAACG,aAAjD,IACC3tC,YAAY,IAAIytC,mBAAhB,IAAuC,CAACE,aAF3C,EAGE;AACA,YAAM,KAAKv3C,UAAL,CAAgB,IAAhB,EAAsBhO,OAAE,CAAC7b,MAAzB,CAAN;AACD;;AAED,QAAIshE,cAAJ;;AACA,QAAIH,cAAc,IAAIC,aAAtB,EAAqC;AACnCE,MAAAA,cAAc,GAAG,KAAjB;AACA,WAAKhuC,eAAL,CAAqBrsB,IAArB,EAA2Bk6D,cAA3B;AACD,KAHD,MAGO;AACLG,MAAAA,cAAc,GAAG,KAAKC,2BAAL,CAAiCt6D,IAAjC,CAAjB;AACD;;AAED,QAAIk6D,cAAc,IAAIC,aAAlB,IAAmCE,cAAvC,EAAuD;AACrD,WAAKva,WAAL,CAAiB9/C,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,CAAC,CAACA,IAAI,CAAChC,MAA3C;AACA,aAAO,KAAKsU,UAAL,CAAgBtS,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,QAAI,KAAK6gB,GAAL,CAASjM,OAAE,CAAC7Y,QAAZ,CAAJ,EAA2B;AAEzBiE,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKgL,4BAAL,EAAnB;AACA,WAAK+1B,WAAL,CAAiB9/C,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AAEA,aAAO,KAAKsS,UAAL,CAAgBtS,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,UAAM,KAAK4iB,UAAL,CAAgB,IAAhB,EAAsBhO,OAAE,CAAC7b,MAAzB,CAAN;AACD;;AAGDuzB,EAAAA,aAAa,CAACtsB,IAAD,EAAwB;AACnC,WAAO,KAAK6gB,GAAL,CAASjM,OAAE,CAACrZ,IAAZ,CAAP;AACD;;AAEDskD,EAAAA,gCAAgC,CAAC7/C,IAAD,EAAwB;AACtD,QAAI,KAAK8pB,wBAAL,EAAJ,EAAqC;AAEnC,WAAK21B,YAAL,CAAkB,mBAAlB;AACA,YAAMtwB,SAAS,GAAG,KAAKhd,SAAL,EAAlB;AACAgd,MAAAA,SAAS,CAACtb,QAAV,GAAqB,KAAKuN,eAAL,CAAqB,IAArB,CAArB;AACAphB,MAAAA,IAAI,CAACqC,UAAL,GAAkB,CAAC,KAAKiQ,UAAL,CAAgB6c,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED5C,EAAAA,kCAAkC,CAACvsB,IAAD,EAAwB;AACxD,QAAI,KAAKuiB,YAAL,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,UAAI,CAACviB,IAAI,CAACqC,UAAV,EAAsBrC,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AAEtB,YAAM8sB,SAAS,GAAG,KAAK3f,WAAL,CAChB,KAAKvO,KAAL,CAAW6L,YADK,EAEhB,KAAK7L,KAAL,CAAW8L,eAFK,CAAlB;AAKA,WAAK0J,IAAL;AAEA0Y,MAAAA,SAAS,CAACtb,QAAV,GAAqB,KAAK6b,qBAAL,EAArB;AACA1vB,MAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CACE,KAAKoR,UAAL,CAAgB6c,SAAhB,EAA2B,0BAA3B,CADF;AAGA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDirC,EAAAA,+BAA+B,CAACp6D,IAAD,EAAwB;AACrD,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAAC7b,MAAd,CAAJ,EAA2B;AACzB,UAAI,CAACiH,IAAI,CAACqC,UAAV,EAAsBrC,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACtBrC,MAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,GAAG,KAAKkrB,qBAAL,EAAxB;AAEApsB,MAAAA,IAAI,CAAChC,MAAL,GAAc,IAAd;AACAgC,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,IAAnB;AAEA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDu7C,EAAAA,2BAA2B,CAACt6D,IAAD,EAAwB;AACjD,QAAI,KAAK6pB,4BAAL,EAAJ,EAAyC;AACvC7pB,MAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACArC,MAAAA,IAAI,CAAChC,MAAL,GAAc,IAAd;AACAgC,MAAAA,IAAI,CAAC+e,WAAL,GAAmB,KAAKmN,sBAAL,CAA4BlsB,IAA5B,CAAnB;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED02D,EAAAA,eAAe,GAAY;AACzB,QAAI,CAAC,KAAKn0C,YAAL,CAAkB,OAAlB,CAAL,EAAiC,OAAO,KAAP;AACjC,UAAM9L,IAAI,GAAG,KAAKof,cAAL,EAAb;AACA,WACE,CAACh4B,SAAS,CAAC0X,IAAV,CAAe,KAAKxW,KAAL,CAAW+Q,KAAX,CAAiB,KAAK7O,KAAL,CAAW2L,GAA5B,EAAiC6J,IAAjC,CAAf,CAAD,IACA,KAAKipC,oBAAL,CAA0BjpC,IAA1B,EAAgC,UAAhC,CAFF;AAID;;AAEDsT,EAAAA,4BAA4B,GAAiC;AAC3D,UAAMH,IAAI,GAAG,KAAKzX,SAAL,EAAb;AAEA,UAAMnC,OAAO,GAAG,KAAK0mD,eAAL,EAAhB;;AAEA,QAAI,KAAKx3D,KAAL,CAAW0V,OAAE,CAACxY,SAAd,KAA4B4T,OAAhC,EAAyC;AACvC,WAAKyG,IAAL;;AACA,UAAIzG,OAAJ,EAAa;AACX,aAAKyG,IAAL;AACD;;AAED,aAAO,KAAKo6C,aAAL,CACLjnC,IADK,EAELmrC,cAAc,GAAGE,gBAFZ,EAGLjlD,OAHK,CAAP;AAKD,KAXD,MAWO,IAAI,KAAK9Q,KAAL,CAAW0V,OAAE,CAAC3X,MAAd,CAAJ,EAA2B;AAChC,aAAO,KAAKo9C,UAAL,CAAgBzwB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAFM,MAEA,IAAI,KAAK1qB,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAJ,EAAuB;AAC5B,UACE,KAAKuF,SAAL,CAAe,YAAf,KACA,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAFF,EAGE;AACA,aAAKuN,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAACtP,qBAApC;AACD;;AACD,WAAKitD,eAAL,CAAqB,KAArB;AACA,aAAO,KAAK5W,UAAL,CAAgBzwB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KATM,MASA,IAAI,KAAK1qB,KAAL,CAAW0V,OAAE,CAACjY,MAAd,KAAyB,KAAKuC,KAAL,CAAW0V,OAAE,CAAClY,IAAd,CAAzB,IAAgD,KAAKymB,KAAL,EAApD,EAAkE;AACvE,YAAM,KAAKhW,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAClI,wBAApC,CAAN;AACD,KAFM,MAEA;AACL,YAAM0uC,GAAG,GAAG,KAAK5uB,uBAAL,EAAZ;AACA,WAAKlJ,SAAL;AACA,aAAO83B,GAAP;AACD;AACF;;AAGD5tB,EAAAA,sBAAsB,CAAClsB,IAAD,EAAiD;AACrE,WAAO,KAAKwpB,cAAL,CAAoB,IAApB,CAAP;AACD;;AAEDM,EAAAA,wBAAwB,GAAY;AAClC,QAAI,KAAK5qB,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAJ,EAAyB;AACvB,YAAM6W,KAAK,GAAG,KAAKzN,KAAL,CAAWyN,KAAzB;;AACA,UAAKA,KAAK,KAAK,OAAV,IAAqB,CAAC,KAAKzN,KAAL,CAAWylC,WAAlC,IAAkDh4B,KAAK,KAAK,KAAhE,EAAuE;AACrE,eAAO,KAAP;AACD;;AACD,UACE,CAACA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,WAA/B,KACA,CAAC,KAAKzN,KAAL,CAAWylC,WAFd,EAGE;AACA,cAAM6zB,CAAC,GAAG,KAAKr0C,SAAL,EAAV;;AAKA,YACGq0C,CAAC,CAACt4D,IAAF,KAAW2S,OAAE,CAAC/c,IAAd,IAAsB0iE,CAAC,CAAC7rD,KAAF,KAAY,MAAnC,IACA6rD,CAAC,CAACt4D,IAAF,KAAW2S,OAAE,CAAC7b,MAFhB,EAGE;AACA,eAAKyxD,eAAL,CAAqB,CAAC,MAAD,EAAS,YAAT,CAArB;AACA,iBAAO,KAAP;AACD;AACF;AACF,KAtBD,MAsBO,IAAI,CAAC,KAAKtrD,KAAL,CAAW0V,OAAE,CAAC7Y,QAAd,CAAL,EAA8B;AACnC,aAAO,KAAP;AACD;;AAED,UAAM0a,IAAI,GAAG,KAAKof,cAAL,EAAb;AACA,UAAM2kC,OAAO,GAAG,KAAK9a,oBAAL,CAA0BjpC,IAA1B,EAAgC,MAAhC,CAAhB;;AACA,QACE,KAAK1X,KAAL,CAAWiD,UAAX,CAAsByU,IAAtB,YACC,KAAKvX,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,KAAuB2iE,OAF1B,EAGE;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKt7D,KAAL,CAAW0V,OAAE,CAAC7Y,QAAd,KAA2By+D,OAA/B,EAAwC;AACtC,YAAMC,aAAa,GAAG,KAAK17D,KAAL,CAAWiD,UAAX,CACpB,KAAK49C,mBAAL,CAAyBnpC,IAAI,GAAG,CAAhC,CADoB,CAAtB;AAGA,aACEgkD,aAAa,OAAb,IACAA,aAAa,OAFf;AAID;;AACD,WAAO,KAAP;AACD;;AAEDpuC,EAAAA,eAAe,CAACrsB,IAAD,EAAiCwgB,MAAjC,EAAyD;AACtE,QAAI,KAAK4B,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;AAC9BpiB,MAAAA,IAAI,CAAChC,MAAL,GAAc,KAAKmiD,iBAAL,EAAd;AACA,WAAKL,WAAL,CAAiB9/C,IAAjB;AACA,YAAM06D,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AACA,UAAID,UAAJ,EAAgB;AACd16D,QAAAA,IAAI,CAAC06D,UAAL,GAAkBA,UAAlB;AACD;AACF,KAPD,MAOO;AACL,UAAIl6C,MAAJ,EAAY;AACV,aAAKoC,UAAL;AACD,OAFD,MAEO;AACL5iB,QAAAA,IAAI,CAAChC,MAAL,GAAc,IAAd;AACD;AACF;;AAED,SAAKgkB,SAAL;AACD;;AAED6H,EAAAA,4BAA4B,GAAY;AACtC,QAAI,KAAK3qB,KAAL,CAAW0V,OAAE,CAAC1a,EAAd,CAAJ,EAAuB;AACrB,WAAKswD,eAAL,CAAqB,CAAC,YAAD,EAAe,mBAAf,CAArB;;AACA,UAAI,KAAK/qD,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,YAAI,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAAJ,EAAkE;AAChE,eAAKgjB,UAAL,CAAgB,KAAK3hB,KAAL,CAAWvC,KAA3B,EAAkC4U,aAAM,CAACtP,qBAAzC;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WACE,KAAK/C,KAAL,CAAWgB,IAAX,CAAgB3K,OAAhB,KAA4B,KAA5B,IACA,KAAK2J,KAAL,CAAWgB,IAAX,CAAgB3K,OAAhB,KAA4B,OAD5B,IAEA,KAAK2J,KAAL,CAAWgB,IAAX,CAAgB3K,OAAhB,KAA4B,UAF5B,IAGA,KAAK2J,KAAL,CAAWgB,IAAX,CAAgB3K,OAAhB,KAA4B,OAH5B,IAIA,KAAK6rB,KAAL,EAJA,IAKA,KAAKuzC,eAAL,EANF;AAQD;;AAED5W,EAAAA,WAAW,CACT9/C,IADS,EAET46D,UAFS,EAGTC,SAHS,EAITC,MAJS,EAKH;AACN,QAAIF,UAAJ,EAAgB;AAEd,UAAIC,SAAJ,EAAe;AAEb,aAAKve,qBAAL,CAA2Bt8C,IAA3B,EAAiC,SAAjC;;AACA,YAAI,KAAKP,SAAL,CAAe,mBAAf,CAAJ,EAAyC;AAAA;;AACvC,gBAAMsf,WAAW,GAAK/e,IAAF,CACjB+e,WADH;;AAEA,cACEA,WAAW,CAAC9c,IAAZ,KAAqB,YAArB,IACA8c,WAAW,CAAClnB,IAAZ,KAAqB,MADrB,IAEAknB,WAAW,CAACpgB,GAAZ,GAAkBogB,WAAW,CAACrgB,KAA9B,KAAwC,CAFxC,IAGA,wBAACqgB,WAAW,CAACrP,KAAb,aAAC,mBAAmBY,aAApB,CAJF,EAKE;AACA,iBAAKnD,KAAL,CAAW4R,WAAW,CAACrgB,KAAvB,EAA8B4U,aAAM,CAACvO,6BAArC;AACD;AACF;AACF,OAfD,MAeO,IAAI/E,IAAI,CAACqC,UAAL,IAAmBrC,IAAI,CAACqC,UAAL,CAAgBzB,MAAvC,EAA+C;AAEpD,aAAK,MAAMuuB,SAAX,IAAwBnvB,IAAI,CAACqC,UAA7B,EAAyC;AACvC,gBAAM;AAAEwR,YAAAA;AAAF,cAAesb,SAArB;AACA,gBAAM4rC,YAAY,GAChBlnD,QAAQ,CAAC5R,IAAT,KAAkB,YAAlB,GAAiC4R,QAAQ,CAAChc,IAA1C,GAAiDgc,QAAQ,CAACnF,KAD5D;AAEA,eAAK4tC,qBAAL,CAA2BntB,SAA3B,EAAsC4rC,YAAtC;;AAEA,cAAI,CAACD,MAAD,IAAW3rC,SAAS,CAACE,KAAzB,EAAgC;AAC9B,kBAAM;AAAEA,cAAAA;AAAF,gBAAYF,SAAlB;;AACA,gBAAIE,KAAK,CAACptB,IAAN,KAAe,YAAnB,EAAiC;AAC/B,mBAAKkL,KAAL,CACEgiB,SAAS,CAACzwB,KADZ,EAEE4U,aAAM,CAACxO,qBAFT,EAGEuqB,KAAK,CAAC3gB,KAHR,EAIEqsD,YAJF;AAMD,aAPD,MAOO;AAEL,mBAAK7qC,iBAAL,CAAuBb,KAAK,CAACx3B,IAA7B,EAAmCw3B,KAAK,CAAC3wB,KAAzC,EAAgD,IAAhD,EAAsD,KAAtD;AAEA,mBAAKoc,KAAL,CAAWS,gBAAX,CAA4B8T,KAA5B;AACD;AACF;AACF;AACF,OAzBM,MAyBA,IAAIrvB,IAAI,CAAC+e,WAAT,EAAsB;AAE3B,YACE/e,IAAI,CAAC+e,WAAL,CAAiB9c,IAAjB,KAA0B,qBAA1B,IACAjC,IAAI,CAAC+e,WAAL,CAAiB9c,IAAjB,KAA0B,kBAF5B,EAGE;AACA,gBAAM0P,EAAE,GAAG3R,IAAI,CAAC+e,WAAL,CAAiBpN,EAA5B;AACA,cAAI,CAACA,EAAL,EAAS,MAAM,IAAIwO,KAAJ,CAAU,mBAAV,CAAN;AAET,eAAKm8B,qBAAL,CAA2Bt8C,IAA3B,EAAiC2R,EAAE,CAAC9Z,IAApC;AACD,SARD,MAQO,IAAImI,IAAI,CAAC+e,WAAL,CAAiB9c,IAAjB,KAA0B,qBAA9B,EAAqD;AAC1D,eAAK,MAAM8c,WAAX,IAA0B/e,IAAI,CAAC+e,WAAL,CAAiBw4C,YAA3C,EAAyD;AACvD,iBAAKtnD,gBAAL,CAAsB8O,WAAW,CAACpN,EAAlC;AACD;AACF;AACF;AACF;;AAED,UAAMmlD,wBAAwB,GAC5B,KAAK71D,KAAL,CAAWslC,cAAX,CAA0B,KAAKtlC,KAAL,CAAWslC,cAAX,CAA0B3lC,MAA1B,GAAmC,CAA7D,CADF;;AAIA,QAAIk2D,wBAAwB,CAACl2D,MAA7B,EAAqC;AACnC,YAAM,KAAKuM,KAAL,CAAWnN,IAAI,CAACtB,KAAhB,EAAuB4U,aAAM,CAACnI,0BAA9B,CAAN;AACD;AACF;;AAED8E,EAAAA,gBAAgB,CAACjQ,IAAD,EAA2C;AACzD,QAAIA,IAAI,CAACiC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAKq6C,qBAAL,CAA2Bt8C,IAA3B,EAAiCA,IAAI,CAACnI,IAAtC;AACD,KAFD,MAEO,IAAImI,IAAI,CAACiC,IAAL,KAAc,eAAlB,EAAmC;AACxC,WAAK,MAAM0Q,IAAX,IAAmB3S,IAAI,CAACkC,UAAxB,EAAoC;AAClC,aAAK+N,gBAAL,CAAsB0C,IAAtB;AACD;AACF,KAJM,MAIA,IAAI3S,IAAI,CAACiC,IAAL,KAAc,cAAlB,EAAkC;AACvC,WAAK,MAAMqrD,IAAX,IAAmBttD,IAAI,CAACQ,QAAxB,EAAkC;AAChC,YAAI8sD,IAAJ,EAAU;AACR,eAAKr9C,gBAAL,CAAsBq9C,IAAtB;AACD;AACF;AACF,KANM,MAMA,IAAIttD,IAAI,CAACiC,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAKgO,gBAAL,CAAsBjQ,IAAI,CAAC0O,KAA3B;AACD,KAFM,MAEA,IAAI1O,IAAI,CAACiC,IAAL,KAAc,aAAlB,EAAiC;AACtC,WAAKgO,gBAAL,CAAsBjQ,IAAI,CAACqnB,QAA3B;AACD,KAFM,MAEA,IAAIrnB,IAAI,CAACiC,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKgO,gBAAL,CAAsBjQ,IAAI,CAACgvB,IAA3B;AACD;AACF;;AAEDstB,EAAAA,qBAAqB,CACnBt8C,IADmB,EAOnBnI,IAPmB,EAQb;AACN,QAAI,KAAKwzD,mBAAL,CAAyB1rD,GAAzB,CAA6B9H,IAA7B,CAAJ,EAAwC;AACtC,WAAKsV,KAAL,CACEnN,IAAI,CAACtB,KADP,EAEE7G,IAAI,KAAK,SAAT,GACIyb,aAAM,CAAC9O,sBADX,GAEI8O,aAAM,CAAC7O,eAJb,EAKE5M,IALF;AAOD;;AACD,SAAKwzD,mBAAL,CAAyBnwC,GAAzB,CAA6BrjB,IAA7B;AACD;;AAIDu0B,EAAAA,qBAAqB,GAA6B;AAChD,UAAM4uC,KAAK,GAAG,EAAd;AACA,QAAIhzC,KAAK,GAAG,IAAZ;AAGA,SAAKxH,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;;AAEA,WAAO,CAAC,KAAK8nB,GAAL,CAASjM,OAAE,CAAC1b,MAAZ,CAAR,EAA6B;AAC3B,UAAI8uB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKxH,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACA,YAAI,KAAKunB,GAAL,CAASjM,OAAE,CAAC1b,MAAZ,CAAJ,EAAyB;AAC1B;;AAED,YAAM8G,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,MAAAA,IAAI,CAACqvB,KAAL,GAAa,KAAKK,qBAAL,EAAb;AACA1vB,MAAAA,IAAI,CAAC6T,QAAL,GAAgB,KAAKuO,aAAL,CAAmB,IAAnB,IACZ,KAAKsN,qBAAL,EADY,GAEZ1vB,IAAI,CAACqvB,KAAL,CAAWU,OAAX,EAFJ;AAGAirC,MAAAA,KAAK,CAAC95D,IAAN,CAAW,KAAKoR,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB,CAAX;AACD;;AAED,WAAOg7D,KAAP;AACD;;AAGDtrC,EAAAA,qBAAqB,GAAmC;AACtD,QAAI,KAAKxwB,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAJ,EAA2B;AACzB,YAAM2xB,MAAM,GAAG,KAAKlb,kBAAL,CAAwB,KAAK/N,KAAL,CAAWyN,KAAnC,CAAf;AACA,YAAMusD,SAAS,GAAG/wC,MAAM,CAACxb,KAAP,CAAaxP,KAAb,CAAmBg2D,aAAnB,CAAlB;;AACA,UAAI+F,SAAJ,EAAe;AACb,aAAK9tD,KAAL,CACE+c,MAAM,CAACxrB,KADT,EAEE4U,aAAM,CAAC5L,gCAFT,EAGEuzD,SAAS,CAAC,CAAD,CAAT,CAAaj5D,UAAb,CAAwB,CAAxB,EAA2Bk5D,QAA3B,CAAoC,EAApC,CAHF;AAKD;;AACD,aAAOhxC,MAAP;AACD;;AACD,WAAO,KAAK9I,eAAL,CAAqB,IAArB,CAAP;AACD;;AAKD4B,EAAAA,WAAW,CAAChjB,IAAD,EAA4B;AAErCA,IAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;;AACA,QAAI,CAAC,KAAKnD,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B;AAG1B,YAAMuhE,UAAU,GAAG,KAAKxqC,gCAAL,CAAsCtvB,IAAtC,CAAnB;AAOA,YAAMm7D,SAAS,GAAG,CAACrB,UAAD,IAAe,KAAKj5C,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CAAjC;AAGA,YAAM0gE,OAAO,GAAGmB,SAAS,IAAI,KAAKlb,6BAAL,CAAmCjgD,IAAnC,CAA7B;AAGA,UAAIm7D,SAAS,IAAI,CAACnB,OAAlB,EAA2B,KAAK9Z,0BAAL,CAAgClgD,IAAhC;AAC3B,WAAK4gB,gBAAL,CAAsB,MAAtB;AACD;;AACD5gB,IAAAA,IAAI,CAAChC,MAAL,GAAc,KAAKmiD,iBAAL,EAAd;AAIA,UAAMua,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AACA,QAAID,UAAJ,EAAgB;AACd16D,MAAAA,IAAI,CAAC06D,UAAL,GAAkBA,UAAlB;AACD,KAFD,MAE0C;AACxC,YAAMhnD,UAAU,GAAG,KAAK0nD,0BAAL,EAAnB;;AACA,UAAI1nD,UAAJ,EAAgB;AACd1T,QAAAA,IAAI,CAAC0T,UAAL,GAAkBA,UAAlB;AACD;AACF;;AAED,SAAKsO,SAAL;AACA,WAAO,KAAK1P,UAAL,CAAgBtS,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmgD,EAAAA,iBAAiB,GAAoB;AACnC,QAAI,CAAC,KAAKjhD,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B,KAAKqqB,UAAL;AAC5B,WAAO,KAAKE,aAAL,EAAP;AACD;;AAGDmM,EAAAA,wBAAwB,CAACjvB,IAAD,EAAqC;AAC3D,WAAO,KAAKd,KAAL,CAAW0V,OAAE,CAAC/c,IAAd,CAAP;AACD;;AAEDq3B,EAAAA,yBAAyB,CACvBlvB,IADuB,EAEvBmvB,SAFuB,EAGvBltB,IAHuB,EAIvBmtB,kBAJuB,EAKjB;AACND,IAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKjO,eAAL,EAAlB;AACA,SAAK6M,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoDjX,YAApD;AACAnY,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAKoR,UAAL,CAAgB6c,SAAhB,EAA2BltB,IAA3B,CAArB;AACD;;AASDo5D,EAAAA,kBAAkB,GAAwB;AACxC,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,SAAS,GAAG,IAAI1lD,GAAJ,EAAlB;;AAEA,OAAG;AACD,UAAI,KAAK3W,KAAL,CAAW0V,OAAE,CAAC1b,MAAd,CAAJ,EAA2B;AACzB;AACD;;AAED,YAAM8G,IAAI,GAAG,KAAKmS,SAAL,EAAb;AAGA,YAAMghD,OAAO,GAAG,KAAKlyD,KAAL,CAAWyN,KAA3B;;AAIA,UAAI6sD,SAAS,CAAC57D,GAAV,CAAcwzD,OAAd,CAAJ,EAA4B;AAC1B,aAAKhmD,KAAL,CACE,KAAKlM,KAAL,CAAWvC,KADb,EAEE4U,aAAM,CAAC7L,iCAFT,EAGE0rD,OAHF;AAKD;;AACDoI,MAAAA,SAAS,CAACrgD,GAAV,CAAci4C,OAAd;;AACA,UAAI,KAAKj0D,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAJ,EAA2B;AACzByH,QAAAA,IAAI,CAACqT,GAAL,GAAW,KAAKrE,kBAAL,CAAwBmkD,OAAxB,CAAX;AACD,OAFD,MAEO;AACLnzD,QAAAA,IAAI,CAACqT,GAAL,GAAW,KAAK+N,eAAL,CAAqB,IAArB,CAAX;AACD;;AACD,WAAKZ,MAAL,CAAY5L,OAAE,CAACpb,KAAf;;AAEA,UAAI,CAAC,KAAK0F,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B;AAC1B,cAAM,KAAKqqB,UAAL,CACJ,KAAK3hB,KAAL,CAAWvC,KADP,EAEJ4U,aAAM,CAAC9L,2BAFH,CAAN;AAID;;AACDxH,MAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKM,kBAAL,CAAwB,KAAK/N,KAAL,CAAWyN,KAAnC,CAAb;AACA,WAAK4D,UAAL,CAAmCtS,IAAnC,EAAyC,iBAAzC;AACAs7D,MAAAA,KAAK,CAACp6D,IAAN,CAAWlB,IAAX;AACD,KApCD,QAoCS,KAAK6gB,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CApCT;;AAsCA,WAAOgiE,KAAP;AACD;;AAQDF,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKl8D,KAAL,CAAW0V,OAAE,CAAC/X,KAAd,KAAwB,CAAC,KAAK+yC,qBAAL,EAA7B,EAA2D;AACzD,WAAK6P,YAAL,CAAkB,kBAAlB;AACA,WAAKhpC,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAKhX,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AACD,UAAM67D,KAAK,GAAG,EAAd;AACA,UAAM5nD,UAAU,GAAG,IAAImC,GAAJ,EAAnB;;AACA,OAAG;AACD,YAAM7V,IAAI,GAAG,KAAKmS,SAAL,EAAb;AACAnS,MAAAA,IAAI,CAACqT,GAAL,GAAW,KAAK+N,eAAL,CAAqB,IAArB,CAAX;;AAEA,UAAIphB,IAAI,CAACqT,GAAL,CAASxb,IAAT,KAAkB,MAAtB,EAA8B;AAC5B,aAAKsV,KAAL,CACEnN,IAAI,CAACqT,GAAL,CAAS3U,KADX,EAEE4U,aAAM,CAAC/L,gCAFT,EAGEvH,IAAI,CAACqT,GAAL,CAASxb,IAHX;AAKD;;AAED,UAAI6b,UAAU,CAAC/T,GAAX,CAAeK,IAAI,CAACqT,GAAL,CAASxb,IAAxB,CAAJ,EAAmC;AACjC,aAAKsV,KAAL,CACEnN,IAAI,CAACqT,GAAL,CAAS3U,KADX,EAEE4U,aAAM,CAAC7L,iCAFT,EAGEzH,IAAI,CAACqT,GAAL,CAASxb,IAHX;AAKD;;AACD6b,MAAAA,UAAU,CAACwH,GAAX,CAAelb,IAAI,CAACqT,GAAL,CAASxb,IAAxB;AACA,WAAK2oB,MAAL,CAAY5L,OAAE,CAACpb,KAAf;;AACA,UAAI,CAAC,KAAK0F,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAL,EAA4B;AAC1B,cAAM,KAAKqqB,UAAL,CACJ,KAAK3hB,KAAL,CAAWvC,KADP,EAEJ4U,aAAM,CAAC9L,2BAFH,CAAN;AAID;;AACDxH,MAAAA,IAAI,CAAC0O,KAAL,GAAa,KAAKM,kBAAL,CAAwB,KAAK/N,KAAL,CAAWyN,KAAnC,CAAb;AACA,WAAK4D,UAAL,CAAgBtS,IAAhB,EAAsB,iBAAtB;AACAs7D,MAAAA,KAAK,CAACp6D,IAAN,CAAWlB,IAAX;AACD,KA9BD,QA8BS,KAAK6gB,GAAL,CAASjM,OAAE,CAACtb,KAAZ,CA9BT;;AAgCA,WAAOgiE,KAAP;AACD;;AAEDX,EAAAA,0BAA0B,GAAG;AAE3B,QAAI,KAAKp4C,YAAL,CAAkB,QAAlB,KAA+B,CAAC,KAAKqtB,qBAAL,EAApC,EAAkE;AAChE,WAAK6P,YAAL,CAAkB,kBAAlB;AACA,WAAKhpC,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAKhX,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AAED,SAAKohB,GAAL,CAASjM,OAAE,CAAC7b,MAAZ;AACA,UAAMuiE,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,SAAKx6C,GAAL,CAASjM,OAAE,CAAC1b,MAAZ;AAEA,WAAOoiE,KAAP;AACD;;AAEDhsC,EAAAA,gCAAgC,CAACtvB,IAAD,EAAqC;AACnE,QAAI,KAAKivB,wBAAL,CAA8BjvB,IAA9B,CAAJ,EAAyC;AAEvC,WAAKkvB,yBAAL,CACElvB,IADF,EAEE,KAAKmS,SAAL,EAFF,EAGE,wBAHF,EAIE,0BAJF;AAMA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED8tC,EAAAA,6BAA6B,CAACjgD,IAAD,EAAqC;AAChE,QAAI,KAAKd,KAAL,CAAW0V,OAAE,CAACrZ,IAAd,CAAJ,EAAyB;AACvB,YAAM4zB,SAAS,GAAG,KAAKhd,SAAL,EAAlB;AACA,WAAKsE,IAAL;AACA,WAAKmK,gBAAL,CAAsB,IAAtB;AAEA,WAAKsO,yBAAL,CACElvB,IADF,EAEEmvB,SAFF,EAGE,0BAHF,EAIE,4BAJF;AAMA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED+wB,EAAAA,0BAA0B,CAAClgD,IAAD,EAA4B;AACpD,QAAIgoB,KAAK,GAAG,IAAZ;AACA,SAAKxH,MAAL,CAAY5L,OAAE,CAAC7b,MAAf;;AACA,WAAO,CAAC,KAAK8nB,GAAL,CAASjM,OAAE,CAAC1b,MAAZ,CAAR,EAA6B;AAC3B,UAAI8uB,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AAEL,YAAI,KAAKnH,GAAL,CAASjM,OAAE,CAACpb,KAAZ,CAAJ,EAAwB;AACtB,gBAAM,KAAK2T,KAAL,CAAW,KAAKlM,KAAL,CAAWvC,KAAtB,EAA6B4U,aAAM,CAAChP,sBAApC,CAAN;AACD;;AAED,aAAKkc,MAAL,CAAY5L,OAAE,CAACtb,KAAf;AACA,YAAI,KAAKunB,GAAL,CAASjM,OAAE,CAAC1b,MAAZ,CAAJ,EAAyB;AAC1B;;AAED,WAAKq2B,oBAAL,CAA0BvvB,IAA1B;AACD;AACF;;AAGDuvB,EAAAA,oBAAoB,CAACvvB,IAAD,EAAkC;AACpD,UAAMmvB,SAAS,GAAG,KAAKhd,SAAL,EAAlB;AACA,UAAMqpD,gBAAgB,GAAG,KAAKt8D,KAAL,CAAW0V,OAAE,CAACrc,MAAd,CAAzB;AACA42B,IAAAA,SAAS,CAACW,QAAV,GAAqB,KAAKJ,qBAAL,EAArB;;AACA,QAAI,KAAKtN,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B+M,MAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKjO,eAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAM;AAAE0O,QAAAA;AAAF,UAAeX,SAArB;;AACA,UAAIqsC,gBAAJ,EAAsB;AACpB,cAAM,KAAKruD,KAAL,CACJgiB,SAAS,CAACzwB,KADN,EAEJ4U,aAAM,CAAC/N,qBAFH,EAGJuqB,QAAQ,CAACphB,KAHL,CAAN;AAKD;;AACD,WAAKwhB,iBAAL,CAAuBJ,QAAQ,CAACj4B,IAAhC,EAAsCs3B,SAAS,CAACzwB,KAAhD,EAAuD,IAAvD,EAA6D,IAA7D;AACAywB,MAAAA,SAAS,CAACE,KAAV,GAAkBS,QAAQ,CAACC,OAAT,EAAlB;AACD;;AACD,SAAK9B,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoDlX,YAApD;AACAnY,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAKoR,UAAL,CAAgB6c,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAIDd,EAAAA,WAAW,CACTrF,KADS,EAEA;AACT,WAAOA,KAAK,CAAC/mB,IAAN,KAAe,YAAf,IAA+B+mB,KAAK,CAACnxB,IAAN,KAAe,MAArD;AACD;;AA1yE2D;;AChF/C,MAAM4jE,MAAN,SAAqBlG,eAArB,CAAqC;AAQlDp+D,EAAAA,WAAW,CAACW,OAAD,EAAoBiH,KAApB,EAAmC;AAC5CjH,IAAAA,OAAO,GAAGoqD,UAAU,CAACpqD,OAAD,CAApB;AACA,UAAMA,OAAN,EAAeiH,KAAf;AAEA,SAAKjH,OAAL,GAAeA,OAAf;AACA,SAAKozD,gBAAL;AACA,SAAKxrD,OAAL,GAAeg8D,UAAU,CAAC,KAAK5jE,OAAL,CAAa4H,OAAd,CAAzB;AACA,SAAKd,QAAL,GAAgB9G,OAAO,CAAC2pD,cAAxB;AACD;;AAGD5hC,EAAAA,eAAe,GAA2B;AACxC,WAAOjG,YAAP;AACD;;AAEDgS,EAAAA,KAAK,GAAS;AACZ,SAAK+/B,kBAAL;AACA,UAAM/4B,IAAI,GAAG,KAAKzgB,SAAL,EAAb;AACA,UAAM0gB,OAAO,GAAG,KAAK1gB,SAAL,EAAhB;AACA,SAAKsgB,SAAL;AACAG,IAAAA,IAAI,CAACllB,MAAL,GAAc,IAAd;AACA,SAAKilB,aAAL,CAAmBC,IAAnB,EAAyBC,OAAzB;AACAD,IAAAA,IAAI,CAACllB,MAAL,GAAc,KAAKzM,KAAL,CAAWyM,MAAzB;AACA,WAAOklB,IAAP;AACD;;AAhCiD;;AAmCpD,SAAS8oC,UAAT,CAAoBh8D,OAApB,EAAqD;AACnD,QAAMi8D,SAAqB,GAAG,IAAIhkE,GAAJ,EAA9B;;AACA,OAAK,MAAMkI,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,UAAM,CAAC7H,IAAD,EAAOC,OAAP,IAAkBovC,KAAK,CAACC,OAAN,CAActnC,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,EAAS,EAAT,CAAzD;AACA,QAAI,CAAC87D,SAAS,CAACh8D,GAAV,CAAc9H,IAAd,CAAL,EAA0B8jE,SAAS,CAAC3jE,GAAV,CAAcH,IAAd,EAAoBC,OAAO,IAAI,EAA/B;AAC3B;;AACD,SAAO6jE,SAAP;AACD;;ACpCM,SAAS/vC,KAAT,CAAe7sB,KAAf,EAA8BjH,OAA9B,EAAuD;AAAA;;AAC5D,MAAI,aAAAA,OAAO,SAAP,qBAASgvC,UAAT,MAAwB,aAA5B,EAA2C;AACzChvC,IAAAA,OAAO,qBACFA,OADE,CAAP;;AAGA,QAAI;AACFA,MAAAA,OAAO,CAACgvC,UAAR,GAAqB,QAArB;AACA,YAAMilB,MAAM,GAAG6P,SAAS,CAAC9jE,OAAD,EAAUiH,KAAV,CAAxB;AACA,YAAM88D,GAAG,GAAG9P,MAAM,CAACngC,KAAP,EAAZ;;AAEA,UAAImgC,MAAM,CAACxsD,iBAAX,EAA8B;AAC5B,eAAOs8D,GAAP;AACD;;AAED,UAAI9P,MAAM,CAACvsD,2BAAX,EAAwC;AAMtC,YAAI;AACF1H,UAAAA,OAAO,CAACgvC,UAAR,GAAqB,QAArB;AACA,iBAAO80B,SAAS,CAAC9jE,OAAD,EAAUiH,KAAV,CAAT,CAA0B6sB,KAA1B,EAAP;AACD,SAHD,CAGE,gBAAM;AACT,OAVD,MAUO;AAGLiwC,QAAAA,GAAG,CAAChpC,OAAJ,CAAYiU,UAAZ,GAAyB,QAAzB;AACD;;AAED,aAAO+0B,GAAP;AACD,KA1BD,CA0BE,OAAOC,WAAP,EAAoB;AACpB,UAAI;AACFhkE,QAAAA,OAAO,CAACgvC,UAAR,GAAqB,QAArB;AACA,eAAO80B,SAAS,CAAC9jE,OAAD,EAAUiH,KAAV,CAAT,CAA0B6sB,KAA1B,EAAP;AACD,OAHD,CAGE,iBAAM;;AAER,YAAMkwC,WAAN;AACD;AACF,GAtCD,MAsCO;AACL,WAAOF,SAAS,CAAC9jE,OAAD,EAAUiH,KAAV,CAAT,CAA0B6sB,KAA1B,EAAP;AACD;AACF;AAEM,SAAS9K,eAAT,CAAyB/hB,KAAzB,EAAwCjH,OAAxC,EAAuE;AAC5E,QAAMi0D,MAAM,GAAG6P,SAAS,CAAC9jE,OAAD,EAAUiH,KAAV,CAAxB;;AACA,MAAIgtD,MAAM,CAACj0D,OAAP,CAAe+uC,UAAnB,EAA+B;AAC7BklB,IAAAA,MAAM,CAAC9qD,KAAP,CAAa0U,MAAb,GAAsB,IAAtB;AACD;;AACD,SAAOo2C,MAAM,CAACrN,aAAP,EAAP;AACD;;AAID,SAASkd,SAAT,CAAmB9jE,OAAnB,EAAsCiH,KAAtC,EAA6D;AAC3D,MAAI29C,GAAG,GAAG+e,MAAV;;AACA,MAAI3jE,OAAJ,YAAIA,OAAO,CAAE4H,OAAb,EAAsB;AACpBihD,IAAAA,eAAe,CAAC7oD,OAAO,CAAC4H,OAAT,CAAf;AACAg9C,IAAAA,GAAG,GAAGqf,cAAc,CAACjkE,OAAO,CAAC4H,OAAT,CAApB;AACD;;AAED,SAAO,IAAIg9C,GAAJ,CAAQ5kD,OAAR,EAAiBiH,KAAjB,CAAP;AACD;;AAED,MAAMi9D,gBAAkD,GAAG,EAA3D;;AAGA,SAASD,cAAT,CAAwBE,kBAAxB,EAAuE;AACrE,QAAMC,UAAU,GAAG3a,gBAAgB,CAACxB,MAAjB,CAAwBloD,IAAI,IAC7C4H,SAAS,CAACw8D,kBAAD,EAAqBpkE,IAArB,CADQ,CAAnB;AAIA,QAAMwb,GAAG,GAAG6oD,UAAU,CAACpb,IAAX,CAAgB,GAAhB,CAAZ;AACA,MAAIpE,GAAG,GAAGsf,gBAAgB,CAAC3oD,GAAD,CAA1B;;AACA,MAAI,CAACqpC,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAG+e,MAAN;;AACA,SAAK,MAAM57D,MAAX,IAAqBq8D,UAArB,EAAiC;AAC/Bxf,MAAAA,GAAG,GAAGuE,YAAY,CAACphD,MAAD,CAAZ,CAAqB68C,GAArB,CAAN;AACD;;AACDsf,IAAAA,gBAAgB,CAAC3oD,GAAD,CAAhB,GAAwBqpC,GAAxB;AACD;;AACD,SAAOA,GAAP;AACD;;;;;;"}