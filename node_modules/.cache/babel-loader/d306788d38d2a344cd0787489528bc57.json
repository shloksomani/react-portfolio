{"ast":null,"code":"/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.15.0\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\n\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\n\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\n\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\n\n\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  } // NOTE: 1 DOM access here\n\n\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\n\n\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n\n  return element.parentNode || element.host;\n}\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\n\n\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n\n    case '#document':\n      return element.body;\n  } // Firefox want us to check `-x` and `-y` variations as well\n\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\n\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n\n  if (version === 10) {\n    return isIE10;\n  }\n\n  return isIE11 || isIE10;\n}\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\n\n\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here\n\n  var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent\n\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  } // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n\n\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\n\n\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\n\n\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  } // Here we make sure to give as \"start\" the element that comes first in the DOM\n\n\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1; // Get common ancestor container\n\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  } // one of the nodes is inside shadowDOM, find which one\n\n\n  var element1root = getRoot(element1);\n\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\n\n\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\n\n\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\n\n\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\n\n\nfunction getBoundingClientRect(element) {\n  var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  }; // subtract scrollbar size from sizes\n\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10); // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them\n\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n  return getClientRect(offset);\n}\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\n\n\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n\n  var parentNode = getParentNode(element);\n\n  if (!parentNode) {\n    return false;\n  }\n\n  return isFixed(parentNode);\n}\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n\n  var el = element.parentElement;\n\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n\n  return el || document.documentElement;\n}\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\n\n\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // NOTE: 1 DOM access here\n\n  var boundaries = {\n    top: 0,\n    left: 0\n  };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference); // Handle viewport case\n\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation\n\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  } // Add paddings\n\n\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width * height;\n}\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n  var variation = placement.split('-')[1];\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\n\n\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\n\n\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\n\n\nfunction getOppositePlacement(placement) {\n  var hash = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\n\n\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0]; // Get popper node sizes\n\n  var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object\n\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  }; // depending by the popper placement we have to compute its offsets slightly differently\n\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\n\n\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  } // use `filter` to obtain the same behavior of `find`\n\n\n  return arr.filter(check)[0];\n}\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\n\n\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  } // use `find` + `indexOf` if `findIndex` isn't supported\n\n\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\n\n\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n      data = fn(data, modifier);\n    }\n  });\n  return data;\n}\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\n\n\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  }; // compute reference element offsets\n\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed); // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding); // store the computed placement inside `originalPlacement`\n\n  data.originalPlacement = data.placement;\n  data.positionFixed = this.options.positionFixed; // compute the popper offsets\n\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'; // run the modifiers\n\n  data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\n\n\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\n\n\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n\n  return null;\n}\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\n\n\nfunction destroy() {\n  this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled\n\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners(); // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n\n  return this;\n}\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\n\n\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, {\n    passive: true\n  });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n\n  scrollParents.push(target);\n}\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\n\n\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, {\n    passive: true\n  }); // Scroll event listener on scroll parents\n\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n  return state;\n}\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\n\n\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\n\n\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound); // Remove scroll event listener on scroll parents\n\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  }); // Reset state\n\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\n\n\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\n\n\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\n\n\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = ''; // add unit if the value is numeric and is one of the following\n\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\n\n\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\n\n\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n\n  setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties\n\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\n\n\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed); // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n  popper.setAttribute('x-placement', placement); // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n\n  setStyles(popper, {\n    position: options.positionFixed ? 'fixed' : 'absolute'\n  });\n  return options;\n}\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\n\n\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent); // Styles\n\n  var styles = {\n    position: popper.position\n  };\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right'; // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n\n  var prefixedProperty = getSupportedPropertyName('transform'); // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n\n  var left = void 0,\n      top = void 0;\n\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  } // Attributes\n\n\n  var attributes = {\n    'x-placement': data.placement\n  }; // Update `data` attributes, styles and arrowStyles\n\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n  return data;\n}\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\n\n\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n\n  return isRequired;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction arrow(data, options) {\n  var _data$offsets$arrow; // arrow depends on keepTogether in order to work\n\n\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier\n\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len]; //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n  // top/left side\n\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  } // bottom/right side\n\n\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper\n\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper\n\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n  return data;\n}\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\n\n\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n\n  return variation;\n}\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\n\n\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']; // Get rid of `auto` `auto-start` and `auto-end`\n\nvar validPlacements = placements.slice(3);\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\n\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here\n\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required\n\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1; // flips variation if reference element overflows boundaries\n\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom); // flips variation if popper content overflows boundaries\n\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : ''); // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\n\n\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2]; // If it's not a number it's an operator, I guess\n\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\n\n\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  }); // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  } // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n\n\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]; // Convert the values with units to absolute pixels to allow our computations\n\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, []) // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  }); // Loop trough the offsets arrays and execute the operations\n\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var basePlacement = placement.split('-')[0];\n  var offsets = void 0;\n\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  } // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n\n\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed); // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n  options.boundaries = boundaries;\n  var order = options.priority;\n  var popper = data.offsets.popper;\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n\n      return defineProperty({}, mainSide, value);\n    }\n  };\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n  data.offsets.popper = popper;\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1]; // if shift shiftvariation is specified, run the modifier\n\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\n\n\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n  return data;\n}\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\n\n\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: offset,\n\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: arrow,\n\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: flip,\n\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\n\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n// Utils\n// Methods\n\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    }; // make update() debounced, so that it only runs at most once-per-tick\n\n\n    this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it\n\n    this.options = _extends({}, Popper.Defaults, options); // init state\n\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    }; // get reference and popper elements (allow jQuery wrappers)\n\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options\n\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    }); // Refactoring modifiers' list (Object => Array)\n\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    }) // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    }); // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    }); // fire the first update to position the popper in the right place\n\n    this.update();\n    var eventsEnabled = this.options.eventsEnabled;\n\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  } // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\nexport default Popper;","map":{"version":3,"sources":["../../src/utils/isBrowser.js","../../src/utils/debounce.js","../../src/utils/isFunction.js","../../src/utils/getStyleComputedProperty.js","../../src/utils/getParentNode.js","../../src/utils/getScrollParent.js","../../src/utils/isIE.js","../../src/utils/getOffsetParent.js","../../src/utils/isOffsetContainer.js","../../src/utils/getRoot.js","../../src/utils/findCommonOffsetParent.js","../../src/utils/getScroll.js","../../src/utils/includeScroll.js","../../src/utils/getBordersSize.js","../../src/utils/getWindowSizes.js","../../src/utils/getClientRect.js","../../src/utils/getBoundingClientRect.js","../../src/utils/getOffsetRectRelativeToArbitraryNode.js","../../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../../src/utils/isFixed.js","../../src/utils/getFixedPositionOffsetParent.js","../../src/utils/getBoundaries.js","../../src/utils/computeAutoPlacement.js","../../src/utils/getReferenceOffsets.js","../../src/utils/getOuterSizes.js","../../src/utils/getOppositePlacement.js","../../src/utils/getPopperOffsets.js","../../src/utils/find.js","../../src/utils/findIndex.js","../../src/utils/runModifiers.js","../../src/methods/update.js","../../src/utils/isModifierEnabled.js","../../src/utils/getSupportedPropertyName.js","../../src/methods/destroy.js","../../src/utils/getWindow.js","../../src/utils/setupEventListeners.js","../../src/methods/enableEventListeners.js","../../src/utils/removeEventListeners.js","../../src/methods/disableEventListeners.js","../../src/utils/isNumeric.js","../../src/utils/setStyles.js","../../src/utils/setAttributes.js","../../src/modifiers/applyStyle.js","../../src/utils/getRoundedOffsets.js","../../src/modifiers/computeStyle.js","../../src/utils/isModifierRequired.js","../../src/modifiers/arrow.js","../../src/utils/getOppositeVariation.js","../../src/methods/placements.js","../../src/utils/clockwise.js","../../src/modifiers/flip.js","../../src/modifiers/keepTogether.js","../../src/modifiers/offset.js","../../src/modifiers/preventOverflow.js","../../src/modifiers/shift.js","../../src/modifiers/hide.js","../../src/modifiers/inner.js","../../src/modifiers/index.js","../../src/methods/defaults.js","../../src/index.js"],"names":["longerTimeoutBrowsers","timeoutDuration","i","isBrowser","navigator","called","scheduled","supportsMicroTasks","window","getType","functionToCheck","element","css","property","document","overflow","overflowX","overflowY","getStyleComputedProperty","getScrollParent","getParentNode","isIE11","isIE10","version","noOffsetParent","isIE","offsetParent","nodeName","getOffsetParent","node","getRoot","element1","element2","order","Node","start","end","range","commonAncestorContainer","isOffsetContainer","element1root","findCommonOffsetParent","side","upperSide","html","scrollingElement","subtract","scrollTop","getScroll","scrollLeft","modifier","sideA","axis","sideB","parseFloat","styles","Math","body","parseInt","computedStyle","getComputedStyle","getSize","offsets","height","rect","result","top","sizes","getWindowSizes","width","horizScrollbar","vertScrollbar","getBordersSize","getClientRect","fixedPosition","runIsIE","isHTML","parent","childrenRect","getBoundingClientRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","includeScroll","excludeScroll","relativeOffset","getOffsetRectRelativeToArbitraryNode","offset","parentNode","isFixed","el","boundaries","left","getFixedPositionOffsetParent","boundariesElement","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","popper","padding","isPaddingNumber","placement","getBoundaries","rects","refRect","bottom","sortedAreas","getArea","b","a","filteredAreas","computedPlacement","variation","commonOffsetParent","x","y","hash","right","popperRect","getOuterSizes","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","referenceOffsets","getOppositePlacement","Array","arr","cur","match","obj","modifiersToRun","ends","modifiers","findIndex","fn","isFunction","data","getReferenceOffsets","computeAutoPlacement","getPopperOffsets","runModifiers","name","enabled","prefixes","upperProp","prefix","toCheck","isModifierEnabled","getSupportedPropertyName","ownerDocument","isBody","target","passive","state","scrollElement","setupEventListeners","removeEventListeners","n","isNaN","isFinite","unit","isNumeric","value","attributes","Object","options","position","reference","round","floor","noRound","referenceWidth","popperWidth","isVertical","isVariation","sameWidthParity","bothOddWidth","horizontalToInteger","verticalToInteger","isFirefox","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","getRoundedOffsets","prefixedProperty","invertTop","invertLeft","requesting","isRequired","requested","isModifierRequired","arrowElement","len","sideCapitalized","altSide","opSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","validPlacements","placements","counter","index","BEHAVIORS","placementOpposite","flipOrder","clockwise","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flippedVariationByContent","flippedVariation","getOppositeVariation","split","str","size","useHeight","fragments","frag","divider","splitRegex","ops","mergeWithPrevious","toValue","op","index2","basePlacement","parseOffset","transformProp","popperStyles","transform","check","shiftvariation","shiftOffsets","bound","subtractLength","shift","keepTogether","inner","hide","undefined","Popper","debounce","modifierOptions","eventsEnabled","update","destroy","enableEventListeners","disableEventListeners","requestAnimationFrame","Utils","PopperUtils","Defaults"],"mappings":"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","sourcesContent":["export default typeof window !== 'undefined' && typeof document !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nlet timeoutDuration = 0;\nfor (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`], 10) +\n    parseFloat(styles[`border${sideB}Width`], 10)\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.right - result.left;\n  const height =\n    sizes.height || element.clientHeight || result.bottom - result.top;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop, 10);\n    const marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`], 10);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`], 10);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"]},"metadata":{},"sourceType":"module"}