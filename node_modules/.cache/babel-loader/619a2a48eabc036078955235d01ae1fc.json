{"ast":null,"code":"/** @license React v0.13.6\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    var enableSchedulerDebugging = false;\n    /* eslint-disable no-var */\n    // TODO: Use symbols?\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.\n\n    var firstCallbackNode = null;\n    var currentDidTimeout = false; // Pausing the scheduler is useful for debugging.\n\n    var isSchedulerPaused = false;\n    var currentPriorityLevel = NormalPriority;\n    var currentEventStartTime = -1;\n    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.\n\n    var isExecutingCallback = false;\n    var isHostCallbackScheduled = false;\n    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n    function ensureHostCallbackIsScheduled() {\n      if (isExecutingCallback) {\n        // Don't schedule work yet; wait until the next time we yield.\n        return;\n      } // Schedule the host callback using the earliest expiration in the list.\n\n\n      var expirationTime = firstCallbackNode.expirationTime;\n\n      if (!isHostCallbackScheduled) {\n        isHostCallbackScheduled = true;\n      } else {\n        // Cancel the existing host callback.\n        cancelHostCallback();\n      }\n\n      requestHostCallback(flushWork, expirationTime);\n    }\n\n    function flushFirstCallback() {\n      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n\n      var next = firstCallbackNode.next;\n\n      if (firstCallbackNode === next) {\n        // This is the last callback in the list.\n        firstCallbackNode = null;\n        next = null;\n      } else {\n        var lastCallbackNode = firstCallbackNode.previous;\n        firstCallbackNode = lastCallbackNode.next = next;\n        next.previous = lastCallbackNode;\n      }\n\n      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.\n\n      var callback = flushedNode.callback;\n      var expirationTime = flushedNode.expirationTime;\n      var priorityLevel = flushedNode.priorityLevel;\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousExpirationTime = currentExpirationTime;\n      currentPriorityLevel = priorityLevel;\n      currentExpirationTime = expirationTime;\n      var continuationCallback;\n\n      try {\n        continuationCallback = callback();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentExpirationTime = previousExpirationTime;\n      } // A callback may return a continuation. The continuation should be scheduled\n      // with the same priority and expiration as the just-finished callback.\n\n\n      if (typeof continuationCallback === 'function') {\n        var continuationNode = {\n          callback: continuationCallback,\n          priorityLevel: priorityLevel,\n          expirationTime: expirationTime,\n          next: null,\n          previous: null\n        }; // Insert the new callback into the list, sorted by its expiration. This is\n        // almost the same as the code in `scheduleCallback`, except the callback\n        // is inserted into the list *before* callbacks of equal expiration instead\n        // of after.\n\n        if (firstCallbackNode === null) {\n          // This is the first callback in the list.\n          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\n        } else {\n          var nextAfterContinuation = null;\n          var node = firstCallbackNode;\n\n          do {\n            if (node.expirationTime >= expirationTime) {\n              // This callback expires at or after the continuation. We will insert\n              // the continuation *before* this callback.\n              nextAfterContinuation = node;\n              break;\n            }\n\n            node = node.next;\n          } while (node !== firstCallbackNode);\n\n          if (nextAfterContinuation === null) {\n            // No equal or lower priority callback was found, which means the new\n            // callback is the lowest priority callback in the list.\n            nextAfterContinuation = firstCallbackNode;\n          } else if (nextAfterContinuation === firstCallbackNode) {\n            // The new callback is the highest priority callback in the list.\n            firstCallbackNode = continuationNode;\n            ensureHostCallbackIsScheduled();\n          }\n\n          var previous = nextAfterContinuation.previous;\n          previous.next = nextAfterContinuation.previous = continuationNode;\n          continuationNode.next = nextAfterContinuation;\n          continuationNode.previous = previous;\n        }\n      }\n    }\n\n    function flushImmediateWork() {\n      if ( // Confirm we've exited the outer most event handler\n      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\n        isExecutingCallback = true;\n\n        try {\n          do {\n            flushFirstCallback();\n          } while ( // Keep flushing until there are no more immediate callbacks\n          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\n        } finally {\n          isExecutingCallback = false;\n\n          if (firstCallbackNode !== null) {\n            // There's still work remaining. Request another callback.\n            ensureHostCallbackIsScheduled();\n          } else {\n            isHostCallbackScheduled = false;\n          }\n        }\n      }\n    }\n\n    function flushWork(didTimeout) {\n      // Exit right away if we're currently paused\n      if (enableSchedulerDebugging && isSchedulerPaused) {\n        return;\n      }\n\n      isExecutingCallback = true;\n      var previousDidTimeout = currentDidTimeout;\n      currentDidTimeout = didTimeout;\n\n      try {\n        if (didTimeout) {\n          // Flush all the expired callbacks without yielding.\n          while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n            // TODO Wrap in feature flag\n            // Read the current time. Flush all the callbacks that expire at or\n            // earlier than that time. Then read the current time again and repeat.\n            // This optimizes for as few performance.now calls as possible.\n            var currentTime = exports.unstable_now();\n\n            if (firstCallbackNode.expirationTime <= currentTime) {\n              do {\n                flushFirstCallback();\n              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));\n\n              continue;\n            }\n\n            break;\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstCallbackNode !== null) {\n            do {\n              if (enableSchedulerDebugging && isSchedulerPaused) {\n                break;\n              }\n\n              flushFirstCallback();\n            } while (firstCallbackNode !== null && !shouldYieldToHost());\n          }\n        }\n      } finally {\n        isExecutingCallback = false;\n        currentDidTimeout = previousDidTimeout;\n\n        if (firstCallbackNode !== null) {\n          // There's still work remaining. Request another callback.\n          ensureHostCallbackIsScheduled();\n        } else {\n          isHostCallbackScheduled = false;\n        } // Before exiting, flush all the immediate work that was scheduled.\n\n\n        flushImmediateWork();\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousEventStartTime = currentEventStartTime;\n      currentPriorityLevel = priorityLevel;\n      currentEventStartTime = exports.unstable_now();\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.\n\n        flushImmediateWork();\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel = void 0;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousEventStartTime = currentEventStartTime;\n      currentPriorityLevel = priorityLevel;\n      currentEventStartTime = exports.unstable_now();\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.\n\n        flushImmediateWork();\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        var previousEventStartTime = currentEventStartTime;\n        currentPriorityLevel = parentPriorityLevel;\n        currentEventStartTime = exports.unstable_now();\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n          currentEventStartTime = previousEventStartTime;\n          flushImmediateWork();\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(callback, deprecated_options) {\n      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\n      var expirationTime;\n\n      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\n        // FIXME: Remove this branch once we lift expiration times out of React.\n        expirationTime = startTime + deprecated_options.timeout;\n      } else {\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\n            break;\n\n          case UserBlockingPriority:\n            expirationTime = startTime + USER_BLOCKING_PRIORITY;\n            break;\n\n          case IdlePriority:\n            expirationTime = startTime + IDLE_PRIORITY;\n            break;\n\n          case LowPriority:\n            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;\n            break;\n\n          case NormalPriority:\n          default:\n            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\n        }\n      }\n\n      var newNode = {\n        callback: callback,\n        priorityLevel: currentPriorityLevel,\n        expirationTime: expirationTime,\n        next: null,\n        previous: null\n      }; // Insert the new callback into the list, ordered first by expiration, then\n      // by insertion. So the new callback is inserted any other callback with\n      // equal expiration.\n\n      if (firstCallbackNode === null) {\n        // This is the first callback in the list.\n        firstCallbackNode = newNode.next = newNode.previous = newNode;\n        ensureHostCallbackIsScheduled();\n      } else {\n        var next = null;\n        var node = firstCallbackNode;\n\n        do {\n          if (node.expirationTime > expirationTime) {\n            // The new callback expires before this one.\n            next = node;\n            break;\n          }\n\n          node = node.next;\n        } while (node !== firstCallbackNode);\n\n        if (next === null) {\n          // No callback with a later expiration was found, which means the new\n          // callback has the latest expiration in the list.\n          next = firstCallbackNode;\n        } else if (next === firstCallbackNode) {\n          // The new callback has the earliest expiration in the entire list.\n          firstCallbackNode = newNode;\n          ensureHostCallbackIsScheduled();\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newNode;\n        newNode.next = next;\n        newNode.previous = previous;\n      }\n\n      return newNode;\n    }\n\n    function unstable_pauseExecution() {\n      isSchedulerPaused = true;\n    }\n\n    function unstable_continueExecution() {\n      isSchedulerPaused = false;\n\n      if (firstCallbackNode !== null) {\n        ensureHostCallbackIsScheduled();\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return firstCallbackNode;\n    }\n\n    function unstable_cancelCallback(callbackNode) {\n      var next = callbackNode.next;\n\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n\n      if (next === callbackNode) {\n        // This is the only scheduled callback. Clear the list.\n        firstCallbackNode = null;\n      } else {\n        // Remove the callback from its position in the list.\n        if (callbackNode === firstCallbackNode) {\n          firstCallbackNode = next;\n        }\n\n        var previous = callbackNode.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      callbackNode.next = callbackNode.previous = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());\n    } // The remaining code is essentially a polyfill for requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n    // We capture a local reference to any global, in case it gets polyfilled after\n    // this module is initially evaluated. We want to be using a\n    // consistent implementation.\n\n\n    var localDate = Date; // This initialization code may run even on server environments if a component\n    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n    // have setTimeout or clearTimeout. However, we always expect them to be defined\n    // on the client. https://github.com/facebook/react/pull/13088\n\n    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\n    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error\n    // later if they are missing on the client.\n\n    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\n    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If\n    // we're backgrounded we prefer for that work to happen so that the page\n    // continues to load in the background. So we also schedule a 'setTimeout' as\n    // a fallback.\n    // TODO: Need a better heuristic for backgrounded work.\n\n    var ANIMATION_FRAME_TIMEOUT = 100;\n    var rAFID;\n    var rAFTimeoutID;\n\n    var requestAnimationFrameWithTimeout = function (callback) {\n      // schedule rAF and also a setTimeout\n      rAFID = localRequestAnimationFrame(function (timestamp) {\n        // cancel the setTimeout\n        localClearTimeout(rAFTimeoutID);\n        callback(timestamp);\n      });\n      rAFTimeoutID = localSetTimeout(function () {\n        // cancel the requestAnimationFrame\n        localCancelAnimationFrame(rAFID);\n        callback(exports.unstable_now());\n      }, ANIMATION_FRAME_TIMEOUT);\n    };\n\n    if (hasNativePerformanceNow) {\n      var Performance = performance;\n\n      exports.unstable_now = function () {\n        return Performance.now();\n      };\n    } else {\n      exports.unstable_now = function () {\n        return localDate.now();\n      };\n    }\n\n    var requestHostCallback;\n    var cancelHostCallback;\n    var shouldYieldToHost;\n    var globalValue = null;\n\n    if (typeof window !== 'undefined') {\n      globalValue = window;\n    } else if (typeof global !== 'undefined') {\n      globalValue = global;\n    }\n\n    if (globalValue && globalValue._schedMock) {\n      // Dynamic injection, only for testing purposes.\n      var globalImpl = globalValue._schedMock;\n      requestHostCallback = globalImpl[0];\n      cancelHostCallback = globalImpl[1];\n      shouldYieldToHost = globalImpl[2];\n      exports.unstable_now = globalImpl[3];\n    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n\n      var _flushCallback = function (didTimeout) {\n        if (_callback !== null) {\n          try {\n            _callback(didTimeout);\n          } finally {\n            _callback = null;\n          }\n        }\n      };\n\n      requestHostCallback = function (cb, ms) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0, false);\n        }\n      };\n\n      cancelHostCallback = function () {\n        _callback = null;\n      };\n\n      shouldYieldToHost = function () {\n        return false;\n      };\n    } else {\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof localRequestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof localCancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      var scheduledHostCallback = null;\n      var isMessageEventScheduled = false;\n      var timeoutTime = -1;\n      var isAnimationFrameScheduled = false;\n      var isFlushingHostCallback = false;\n      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking\n      // will adjust this value to a faster fps if we get more frequent animation\n      // frames.\n\n      var previousFrameTime = 33;\n      var activeFrameTime = 33;\n\n      shouldYieldToHost = function () {\n        return frameDeadline <= exports.unstable_now();\n      }; // We use the postMessage trick to defer idle work until after the repaint.\n\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n\n      channel.port1.onmessage = function (event) {\n        isMessageEventScheduled = false;\n        var prevScheduledCallback = scheduledHostCallback;\n        var prevTimeoutTime = timeoutTime;\n        scheduledHostCallback = null;\n        timeoutTime = -1;\n        var currentTime = exports.unstable_now();\n        var didTimeout = false;\n\n        if (frameDeadline - currentTime <= 0) {\n          // There's no time left in this idle period. Check if the callback has\n          // a timeout and whether it's been exceeded.\n          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\n            // Exceeded the timeout. Invoke the callback even though there's no\n            // time left.\n            didTimeout = true;\n          } else {\n            // No timeout.\n            if (!isAnimationFrameScheduled) {\n              // Schedule another animation callback so we retry later.\n              isAnimationFrameScheduled = true;\n              requestAnimationFrameWithTimeout(animationTick);\n            } // Exit without invoking the callback.\n\n\n            scheduledHostCallback = prevScheduledCallback;\n            timeoutTime = prevTimeoutTime;\n            return;\n          }\n        }\n\n        if (prevScheduledCallback !== null) {\n          isFlushingHostCallback = true;\n\n          try {\n            prevScheduledCallback(didTimeout);\n          } finally {\n            isFlushingHostCallback = false;\n          }\n        }\n      };\n\n      var animationTick = function (rafTime) {\n        if (scheduledHostCallback !== null) {\n          // Eagerly schedule the next animation callback at the beginning of the\n          // frame. If the scheduler queue is not empty at the end of the frame, it\n          // will continue flushing inside that callback. If the queue *is* empty,\n          // then it will exit immediately. Posting the callback at the start of the\n          // frame ensures it's fired within the earliest possible frame. If we\n          // waited until the end of the frame to post the callback, we risk the\n          // browser skipping a frame and not firing the callback until the frame\n          // after that.\n          requestAnimationFrameWithTimeout(animationTick);\n        } else {\n          // No pending work. Exit.\n          isAnimationFrameScheduled = false;\n          return;\n        }\n\n        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n\n        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n          if (nextFrameTime < 8) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If the calculated frame time gets lower than 8, it is probably a bug.\n            nextFrameTime = 8;\n          } // If one frame goes long, then the next one can be short to catch up.\n          // If two frames are short in a row, then that's an indication that we\n          // actually have a higher frame rate than what we're currently optimizing.\n          // We adjust our heuristic dynamically accordingly. For example, if we're\n          // running on 120hz display or 90hz VR display.\n          // Take the max of the two in case one of them was an anomaly due to\n          // missed frame deadlines.\n\n\n          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n        } else {\n          previousFrameTime = nextFrameTime;\n        }\n\n        frameDeadline = rafTime + activeFrameTime;\n\n        if (!isMessageEventScheduled) {\n          isMessageEventScheduled = true;\n          port.postMessage(undefined);\n        }\n      };\n\n      requestHostCallback = function (callback, absoluteTimeout) {\n        scheduledHostCallback = callback;\n        timeoutTime = absoluteTimeout;\n\n        if (isFlushingHostCallback || absoluteTimeout < 0) {\n          // Don't wait for the next frame. Continue working ASAP, in a new event.\n          port.postMessage(undefined);\n        } else if (!isAnimationFrameScheduled) {\n          // If rAF didn't already schedule one, we need to schedule a frame.\n          // TODO: If this rAF doesn't materialize because the browser throttles, we\n          // might want to still have setTimeout trigger rIC as a backup to ensure\n          // that we keep performing work.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n      };\n\n      cancelHostCallback = function () {\n        scheduledHostCallback = null;\n        isMessageEventScheduled = false;\n        timeoutTime = -1;\n      };\n    }\n\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_next = unstable_next;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  })();\n}","map":{"version":3,"sources":["C:/Users/jlpan/RPortfolio/react-portfolio/node_modules/scheduler/cjs/scheduler.development.js"],"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","enableSchedulerDebugging","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","firstCallbackNode","currentDidTimeout","isSchedulerPaused","currentPriorityLevel","currentEventStartTime","currentExpirationTime","isExecutingCallback","isHostCallbackScheduled","hasNativePerformanceNow","performance","now","ensureHostCallbackIsScheduled","expirationTime","cancelHostCallback","requestHostCallback","flushWork","flushFirstCallback","flushedNode","next","lastCallbackNode","previous","callback","priorityLevel","previousPriorityLevel","previousExpirationTime","continuationCallback","continuationNode","nextAfterContinuation","node","flushImmediateWork","didTimeout","previousDidTimeout","currentTime","unstable_now","shouldYieldToHost","unstable_runWithPriority","eventHandler","previousEventStartTime","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","deprecated_options","startTime","timeout","newNode","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","callbackNode","unstable_getCurrentPriorityLevel","unstable_shouldYield","localDate","Date","localSetTimeout","setTimeout","undefined","localClearTimeout","clearTimeout","localRequestAnimationFrame","requestAnimationFrame","localCancelAnimationFrame","cancelAnimationFrame","ANIMATION_FRAME_TIMEOUT","rAFID","rAFTimeoutID","requestAnimationFrameWithTimeout","timestamp","Performance","globalValue","window","global","_schedMock","globalImpl","MessageChannel","_callback","_flushCallback","cb","ms","console","error","scheduledHostCallback","isMessageEventScheduled","timeoutTime","isAnimationFrameScheduled","isFlushingHostCallback","frameDeadline","previousFrameTime","activeFrameTime","channel","port","port2","port1","onmessage","event","prevScheduledCallback","prevTimeoutTime","animationTick","rafTime","nextFrameTime","postMessage","absoluteTimeout","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority"],"mappings":"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","sourcesContent":["/** @license React v0.13.6\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar enableSchedulerDebugging = false;\n\n/* eslint-disable no-var */\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY = maxSigned31BitInt;\n\n// Callbacks are stored as a circular, doubly linked list.\nvar firstCallbackNode = null;\n\nvar currentDidTimeout = false;\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentPriorityLevel = NormalPriority;\nvar currentEventStartTime = -1;\nvar currentExpirationTime = -1;\n\n// This is set when a callback is being executed, to prevent re-entrancy.\nvar isExecutingCallback = false;\n\nvar isHostCallbackScheduled = false;\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nfunction ensureHostCallbackIsScheduled() {\n  if (isExecutingCallback) {\n    // Don't schedule work yet; wait until the next time we yield.\n    return;\n  }\n  // Schedule the host callback using the earliest expiration in the list.\n  var expirationTime = firstCallbackNode.expirationTime;\n  if (!isHostCallbackScheduled) {\n    isHostCallbackScheduled = true;\n  } else {\n    // Cancel the existing host callback.\n    cancelHostCallback();\n  }\n  requestHostCallback(flushWork, expirationTime);\n}\n\nfunction flushFirstCallback() {\n  var flushedNode = firstCallbackNode;\n\n  // Remove the node from the list before calling the callback. That way the\n  // list is in a consistent state even if the callback throws.\n  var next = firstCallbackNode.next;\n  if (firstCallbackNode === next) {\n    // This is the last callback in the list.\n    firstCallbackNode = null;\n    next = null;\n  } else {\n    var lastCallbackNode = firstCallbackNode.previous;\n    firstCallbackNode = lastCallbackNode.next = next;\n    next.previous = lastCallbackNode;\n  }\n\n  flushedNode.next = flushedNode.previous = null;\n\n  // Now it's safe to call the callback.\n  var callback = flushedNode.callback;\n  var expirationTime = flushedNode.expirationTime;\n  var priorityLevel = flushedNode.priorityLevel;\n  var previousPriorityLevel = currentPriorityLevel;\n  var previousExpirationTime = currentExpirationTime;\n  currentPriorityLevel = priorityLevel;\n  currentExpirationTime = expirationTime;\n  var continuationCallback;\n  try {\n    continuationCallback = callback();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n    currentExpirationTime = previousExpirationTime;\n  }\n\n  // A callback may return a continuation. The continuation should be scheduled\n  // with the same priority and expiration as the just-finished callback.\n  if (typeof continuationCallback === 'function') {\n    var continuationNode = {\n      callback: continuationCallback,\n      priorityLevel: priorityLevel,\n      expirationTime: expirationTime,\n      next: null,\n      previous: null\n    };\n\n    // Insert the new callback into the list, sorted by its expiration. This is\n    // almost the same as the code in `scheduleCallback`, except the callback\n    // is inserted into the list *before* callbacks of equal expiration instead\n    // of after.\n    if (firstCallbackNode === null) {\n      // This is the first callback in the list.\n      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\n    } else {\n      var nextAfterContinuation = null;\n      var node = firstCallbackNode;\n      do {\n        if (node.expirationTime >= expirationTime) {\n          // This callback expires at or after the continuation. We will insert\n          // the continuation *before* this callback.\n          nextAfterContinuation = node;\n          break;\n        }\n        node = node.next;\n      } while (node !== firstCallbackNode);\n\n      if (nextAfterContinuation === null) {\n        // No equal or lower priority callback was found, which means the new\n        // callback is the lowest priority callback in the list.\n        nextAfterContinuation = firstCallbackNode;\n      } else if (nextAfterContinuation === firstCallbackNode) {\n        // The new callback is the highest priority callback in the list.\n        firstCallbackNode = continuationNode;\n        ensureHostCallbackIsScheduled();\n      }\n\n      var previous = nextAfterContinuation.previous;\n      previous.next = nextAfterContinuation.previous = continuationNode;\n      continuationNode.next = nextAfterContinuation;\n      continuationNode.previous = previous;\n    }\n  }\n}\n\nfunction flushImmediateWork() {\n  if (\n  // Confirm we've exited the outer most event handler\n  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\n    isExecutingCallback = true;\n    try {\n      do {\n        flushFirstCallback();\n      } while (\n      // Keep flushing until there are no more immediate callbacks\n      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\n    } finally {\n      isExecutingCallback = false;\n      if (firstCallbackNode !== null) {\n        // There's still work remaining. Request another callback.\n        ensureHostCallbackIsScheduled();\n      } else {\n        isHostCallbackScheduled = false;\n      }\n    }\n  }\n}\n\nfunction flushWork(didTimeout) {\n  // Exit right away if we're currently paused\n\n  if (enableSchedulerDebugging && isSchedulerPaused) {\n    return;\n  }\n\n  isExecutingCallback = true;\n  var previousDidTimeout = currentDidTimeout;\n  currentDidTimeout = didTimeout;\n  try {\n    if (didTimeout) {\n      // Flush all the expired callbacks without yielding.\n      while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n        // TODO Wrap in feature flag\n        // Read the current time. Flush all the callbacks that expire at or\n        // earlier than that time. Then read the current time again and repeat.\n        // This optimizes for as few performance.now calls as possible.\n        var currentTime = exports.unstable_now();\n        if (firstCallbackNode.expirationTime <= currentTime) {\n          do {\n            flushFirstCallback();\n          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));\n          continue;\n        }\n        break;\n      }\n    } else {\n      // Keep flushing callbacks until we run out of time in the frame.\n      if (firstCallbackNode !== null) {\n        do {\n          if (enableSchedulerDebugging && isSchedulerPaused) {\n            break;\n          }\n          flushFirstCallback();\n        } while (firstCallbackNode !== null && !shouldYieldToHost());\n      }\n    }\n  } finally {\n    isExecutingCallback = false;\n    currentDidTimeout = previousDidTimeout;\n    if (firstCallbackNode !== null) {\n      // There's still work remaining. Request another callback.\n      ensureHostCallbackIsScheduled();\n    } else {\n      isHostCallbackScheduled = false;\n    }\n    // Before exiting, flush all the immediate work that was scheduled.\n    flushImmediateWork();\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  var previousEventStartTime = currentEventStartTime;\n  currentPriorityLevel = priorityLevel;\n  currentEventStartTime = exports.unstable_now();\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n    currentEventStartTime = previousEventStartTime;\n\n    // Before exiting, flush all the immediate work that was scheduled.\n    flushImmediateWork();\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel = void 0;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  var previousEventStartTime = currentEventStartTime;\n  currentPriorityLevel = priorityLevel;\n  currentEventStartTime = exports.unstable_now();\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n    currentEventStartTime = previousEventStartTime;\n\n    // Before exiting, flush all the immediate work that was scheduled.\n    flushImmediateWork();\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    var previousEventStartTime = currentEventStartTime;\n    currentPriorityLevel = parentPriorityLevel;\n    currentEventStartTime = exports.unstable_now();\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n      currentEventStartTime = previousEventStartTime;\n      flushImmediateWork();\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(callback, deprecated_options) {\n  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\n\n  var expirationTime;\n  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\n    // FIXME: Remove this branch once we lift expiration times out of React.\n    expirationTime = startTime + deprecated_options.timeout;\n  } else {\n    switch (currentPriorityLevel) {\n      case ImmediatePriority:\n        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\n        break;\n      case UserBlockingPriority:\n        expirationTime = startTime + USER_BLOCKING_PRIORITY;\n        break;\n      case IdlePriority:\n        expirationTime = startTime + IDLE_PRIORITY;\n        break;\n      case LowPriority:\n        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;\n        break;\n      case NormalPriority:\n      default:\n        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\n    }\n  }\n\n  var newNode = {\n    callback: callback,\n    priorityLevel: currentPriorityLevel,\n    expirationTime: expirationTime,\n    next: null,\n    previous: null\n  };\n\n  // Insert the new callback into the list, ordered first by expiration, then\n  // by insertion. So the new callback is inserted any other callback with\n  // equal expiration.\n  if (firstCallbackNode === null) {\n    // This is the first callback in the list.\n    firstCallbackNode = newNode.next = newNode.previous = newNode;\n    ensureHostCallbackIsScheduled();\n  } else {\n    var next = null;\n    var node = firstCallbackNode;\n    do {\n      if (node.expirationTime > expirationTime) {\n        // The new callback expires before this one.\n        next = node;\n        break;\n      }\n      node = node.next;\n    } while (node !== firstCallbackNode);\n\n    if (next === null) {\n      // No callback with a later expiration was found, which means the new\n      // callback has the latest expiration in the list.\n      next = firstCallbackNode;\n    } else if (next === firstCallbackNode) {\n      // The new callback has the earliest expiration in the entire list.\n      firstCallbackNode = newNode;\n      ensureHostCallbackIsScheduled();\n    }\n\n    var previous = next.previous;\n    previous.next = next.previous = newNode;\n    newNode.next = next;\n    newNode.previous = previous;\n  }\n\n  return newNode;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (firstCallbackNode !== null) {\n    ensureHostCallbackIsScheduled();\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return firstCallbackNode;\n}\n\nfunction unstable_cancelCallback(callbackNode) {\n  var next = callbackNode.next;\n  if (next === null) {\n    // Already cancelled.\n    return;\n  }\n\n  if (next === callbackNode) {\n    // This is the only scheduled callback. Clear the list.\n    firstCallbackNode = null;\n  } else {\n    // Remove the callback from its position in the list.\n    if (callbackNode === firstCallbackNode) {\n      firstCallbackNode = next;\n    }\n    var previous = callbackNode.previous;\n    previous.next = next;\n    next.previous = previous;\n  }\n\n  callbackNode.next = callbackNode.previous = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());\n}\n\n// The remaining code is essentially a polyfill for requestIdleCallback. It\n// works by scheduling a requestAnimationFrame, storing the time for the start\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\n// Within the postMessage handler do as much work as possible until time + frame\n// rate. By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\n// We capture a local reference to any global, in case it gets polyfilled after\n// this module is initially evaluated. We want to be using a\n// consistent implementation.\nvar localDate = Date;\n\n// This initialization code may run even on server environments if a component\n// just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n// have setTimeout or clearTimeout. However, we always expect them to be defined\n// on the client. https://github.com/facebook/react/pull/13088\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\n\n// We don't expect either of these to necessarily be defined, but we will error\n// later if they are missing on the client.\nvar localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\nvar localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;\n\n// requestAnimationFrame does not run when the tab is in the background. If\n// we're backgrounded we prefer for that work to happen so that the page\n// continues to load in the background. So we also schedule a 'setTimeout' as\n// a fallback.\n// TODO: Need a better heuristic for backgrounded work.\nvar ANIMATION_FRAME_TIMEOUT = 100;\nvar rAFID;\nvar rAFTimeoutID;\nvar requestAnimationFrameWithTimeout = function (callback) {\n  // schedule rAF and also a setTimeout\n  rAFID = localRequestAnimationFrame(function (timestamp) {\n    // cancel the setTimeout\n    localClearTimeout(rAFTimeoutID);\n    callback(timestamp);\n  });\n  rAFTimeoutID = localSetTimeout(function () {\n    // cancel the requestAnimationFrame\n    localCancelAnimationFrame(rAFID);\n    callback(exports.unstable_now());\n  }, ANIMATION_FRAME_TIMEOUT);\n};\n\nif (hasNativePerformanceNow) {\n  var Performance = performance;\n  exports.unstable_now = function () {\n    return Performance.now();\n  };\n} else {\n  exports.unstable_now = function () {\n    return localDate.now();\n  };\n}\n\nvar requestHostCallback;\nvar cancelHostCallback;\nvar shouldYieldToHost;\n\nvar globalValue = null;\nif (typeof window !== 'undefined') {\n  globalValue = window;\n} else if (typeof global !== 'undefined') {\n  globalValue = global;\n}\n\nif (globalValue && globalValue._schedMock) {\n  // Dynamic injection, only for testing purposes.\n  var globalImpl = globalValue._schedMock;\n  requestHostCallback = globalImpl[0];\n  cancelHostCallback = globalImpl[1];\n  shouldYieldToHost = globalImpl[2];\n  exports.unstable_now = globalImpl[3];\n} else if (\n// If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' ||\n// Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _flushCallback = function (didTimeout) {\n    if (_callback !== null) {\n      try {\n        _callback(didTimeout);\n      } finally {\n        _callback = null;\n      }\n    }\n  };\n  requestHostCallback = function (cb, ms) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0, false);\n    }\n  };\n  cancelHostCallback = function () {\n    _callback = null;\n  };\n  shouldYieldToHost = function () {\n    return false;\n  };\n} else {\n  if (typeof console !== 'undefined') {\n    // TODO: Remove fb.me link\n    if (typeof localRequestAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n    if (typeof localCancelAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  var scheduledHostCallback = null;\n  var isMessageEventScheduled = false;\n  var timeoutTime = -1;\n\n  var isAnimationFrameScheduled = false;\n\n  var isFlushingHostCallback = false;\n\n  var frameDeadline = 0;\n  // We start out assuming that we run at 30fps but then the heuristic tracking\n  // will adjust this value to a faster fps if we get more frequent animation\n  // frames.\n  var previousFrameTime = 33;\n  var activeFrameTime = 33;\n\n  shouldYieldToHost = function () {\n    return frameDeadline <= exports.unstable_now();\n  };\n\n  // We use the postMessage trick to defer idle work until after the repaint.\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = function (event) {\n    isMessageEventScheduled = false;\n\n    var prevScheduledCallback = scheduledHostCallback;\n    var prevTimeoutTime = timeoutTime;\n    scheduledHostCallback = null;\n    timeoutTime = -1;\n\n    var currentTime = exports.unstable_now();\n\n    var didTimeout = false;\n    if (frameDeadline - currentTime <= 0) {\n      // There's no time left in this idle period. Check if the callback has\n      // a timeout and whether it's been exceeded.\n      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\n        // Exceeded the timeout. Invoke the callback even though there's no\n        // time left.\n        didTimeout = true;\n      } else {\n        // No timeout.\n        if (!isAnimationFrameScheduled) {\n          // Schedule another animation callback so we retry later.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n        // Exit without invoking the callback.\n        scheduledHostCallback = prevScheduledCallback;\n        timeoutTime = prevTimeoutTime;\n        return;\n      }\n    }\n\n    if (prevScheduledCallback !== null) {\n      isFlushingHostCallback = true;\n      try {\n        prevScheduledCallback(didTimeout);\n      } finally {\n        isFlushingHostCallback = false;\n      }\n    }\n  };\n\n  var animationTick = function (rafTime) {\n    if (scheduledHostCallback !== null) {\n      // Eagerly schedule the next animation callback at the beginning of the\n      // frame. If the scheduler queue is not empty at the end of the frame, it\n      // will continue flushing inside that callback. If the queue *is* empty,\n      // then it will exit immediately. Posting the callback at the start of the\n      // frame ensures it's fired within the earliest possible frame. If we\n      // waited until the end of the frame to post the callback, we risk the\n      // browser skipping a frame and not firing the callback until the frame\n      // after that.\n      requestAnimationFrameWithTimeout(animationTick);\n    } else {\n      // No pending work. Exit.\n      isAnimationFrameScheduled = false;\n      return;\n    }\n\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n      if (nextFrameTime < 8) {\n        // Defensive coding. We don't support higher frame rates than 120hz.\n        // If the calculated frame time gets lower than 8, it is probably a bug.\n        nextFrameTime = 8;\n      }\n      // If one frame goes long, then the next one can be short to catch up.\n      // If two frames are short in a row, then that's an indication that we\n      // actually have a higher frame rate than what we're currently optimizing.\n      // We adjust our heuristic dynamically accordingly. For example, if we're\n      // running on 120hz display or 90hz VR display.\n      // Take the max of the two in case one of them was an anomaly due to\n      // missed frame deadlines.\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n    } else {\n      previousFrameTime = nextFrameTime;\n    }\n    frameDeadline = rafTime + activeFrameTime;\n    if (!isMessageEventScheduled) {\n      isMessageEventScheduled = true;\n      port.postMessage(undefined);\n    }\n  };\n\n  requestHostCallback = function (callback, absoluteTimeout) {\n    scheduledHostCallback = callback;\n    timeoutTime = absoluteTimeout;\n    if (isFlushingHostCallback || absoluteTimeout < 0) {\n      // Don't wait for the next frame. Continue working ASAP, in a new event.\n      port.postMessage(undefined);\n    } else if (!isAnimationFrameScheduled) {\n      // If rAF didn't already schedule one, we need to schedule a frame.\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\n      // might want to still have setTimeout trigger rIC as a backup to ensure\n      // that we keep performing work.\n      isAnimationFrameScheduled = true;\n      requestAnimationFrameWithTimeout(animationTick);\n    }\n  };\n\n  cancelHostCallback = function () {\n    scheduledHostCallback = null;\n    isMessageEventScheduled = false;\n    timeoutTime = -1;\n  };\n}\n\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_next = unstable_next;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}