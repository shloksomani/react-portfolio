{"ast":null,"code":"var conversions = require('./conversions');\n\nvar route = require('./route');\n\nvar convert = {};\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n  var wrappedFn = function (args) {\n    if (args === undefined || args === null) {\n      return args;\n    }\n\n    if (arguments.length > 1) {\n      args = Array.prototype.slice.call(arguments);\n    }\n\n    return fn(args);\n  }; // preserve .conversion property if there is one\n\n\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n\n  return wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n  var wrappedFn = function (args) {\n    if (args === undefined || args === null) {\n      return args;\n    }\n\n    if (arguments.length > 1) {\n      args = Array.prototype.slice.call(arguments);\n    }\n\n    var result = fn(args); // we're assuming the result is an array here.\n    // see notice in conversions.js; don't use box types\n    // in conversion functions.\n\n    if (typeof result === 'object') {\n      for (var len = result.length, i = 0; i < len; i++) {\n        result[i] = Math.round(result[i]);\n      }\n    }\n\n    return result;\n  }; // preserve .conversion property if there is one\n\n\n  if ('conversion' in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n\n  return wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n  convert[fromModel] = {};\n  Object.defineProperty(convert[fromModel], 'channels', {\n    value: conversions[fromModel].channels\n  });\n  Object.defineProperty(convert[fromModel], 'labels', {\n    value: conversions[fromModel].labels\n  });\n  var routes = route(fromModel);\n  var routeModels = Object.keys(routes);\n  routeModels.forEach(function (toModel) {\n    var fn = routes[toModel];\n    convert[fromModel][toModel] = wrapRounded(fn);\n    convert[fromModel][toModel].raw = wrapRaw(fn);\n  });\n});\nmodule.exports = convert;","map":{"version":3,"sources":["C:/Users/jlpan/RPortfolio/react-portfolio/node_modules/color-convert/index.js"],"names":["conversions","require","route","convert","models","Object","keys","wrapRaw","fn","wrappedFn","args","undefined","arguments","length","Array","prototype","slice","call","conversion","wrapRounded","result","len","i","Math","round","forEach","fromModel","defineProperty","value","channels","labels","routes","routeModels","toModel","raw","module","exports"],"mappings":"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","sourcesContent":["var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n"]},"metadata":{},"sourceType":"script"}