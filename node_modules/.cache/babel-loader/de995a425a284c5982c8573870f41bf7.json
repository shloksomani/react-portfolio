{"ast":null,"code":"/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\n\n\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined';\n}\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\n\n\nfunction isNull(payload) {\n  return getType(payload) === 'Null';\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isPlainObject(payload) {\n  if (getType(payload) !== 'Object') return false;\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\n}\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\n\n\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object';\n}\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\n\n\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\n\n\nfunction isFunction(payload) {\n  return getType(payload) === 'Function';\n}\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\n\n\nfunction isArray(payload) {\n  return getType(payload) === 'Array';\n}\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isString(payload) {\n  return getType(payload) === 'String';\n}\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isFullString(payload) {\n  return isString(payload) && payload !== '';\n}\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\n\n\nfunction isEmptyString(payload) {\n  return payload === '';\n}\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\n\n\nfunction isNumber(payload) {\n  return getType(payload) === 'Number' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\n\n\nfunction isBoolean(payload) {\n  return getType(payload) === 'Boolean';\n}\n/**\r\n * Returns whether the payload is a regular expression\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\n\n\nfunction isRegExp(payload) {\n  return getType(payload) === 'RegExp';\n}\n/**\r\n * Returns whether the payload is a date, and that the date is Valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\n\n\nfunction isDate(payload) {\n  return getType(payload) === 'Date' && !isNaN(payload);\n}\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Symbol}\r\n */\n\n\nfunction isSymbol(payload) {\n  return getType(payload) === 'Symbol';\n}\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {*}\r\n */\n\n\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\n\n\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError('Type must be a function');\n  }\n\n  if (!type.hasOwnProperty('prototype')) {\n    throw new TypeError('Type is not a class');\n  } // Classes usually have names (as functions usually have names)\n\n\n  var name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nexport { getType, isUndefined, isNull, isPlainObject, isObject, isAnyObject, isObjectLike, isFunction, isArray, isString, isFullString, isEmptyString, isNumber, isBoolean, isRegExp, isDate, isSymbol, isPrimitive, isType };","map":{"version":3,"sources":["C:/Users/jlpan/RPortfolio/react-portfolio/node_modules/is-what/dist/index.esm.js"],"names":["getType","payload","Object","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","constructor","getPrototypeOf","isObject","isAnyObject","isObjectLike","isFunction","isArray","isString","isFullString","isEmptyString","isNumber","isNaN","isBoolean","isRegExp","isDate","isSymbol","isPrimitive","isType","type","Function","TypeError","hasOwnProperty","name","Boolean"],"mappings":"AAAA;;;;;;AAMA,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AACtB,SAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,EAAwCK,KAAxC,CAA8C,CAA9C,EAAiD,CAAC,CAAlD,CAAP;AACH;AACD;;;;;;;;AAMA,SAASC,WAAT,CAAqBN,OAArB,EAA8B;AAC1B,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,WAA5B;AACH;AACD;;;;;;;;AAMA,SAASO,MAAT,CAAgBP,OAAhB,EAAyB;AACrB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAA5B;AACH;AACD;;;;;;;;AAMA,SAASQ,aAAT,CAAuBR,OAAvB,EAAgC;AAC5B,MAAID,OAAO,CAACC,OAAD,CAAP,KAAqB,QAAzB,EACI,OAAO,KAAP;AACJ,SAAQA,OAAO,CAACS,WAAR,KAAwBR,MAAxB,IAAkCA,MAAM,CAACS,cAAP,CAAsBV,OAAtB,MAAmCC,MAAM,CAACC,SAApF;AACH;AACD;;;;;;;;AAMA,SAASS,QAAT,CAAkBX,OAAlB,EAA2B;AACvB,SAAOQ,aAAa,CAACR,OAAD,CAApB;AACH;AACD;;;;;;;;AAMA,SAASY,WAAT,CAAqBZ,OAArB,EAA8B;AAC1B,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;;;;;;;;;;;AASA,SAASa,YAAT,CAAsBb,OAAtB,EAA+B;AAC3B,SAAOY,WAAW,CAACZ,OAAD,CAAlB;AACH;AACD;;;;;;;;AAMA,SAASc,UAAT,CAAoBd,OAApB,EAA6B;AACzB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,UAA5B;AACH;AACD;;;;;;;;AAMA,SAASe,OAAT,CAAiBf,OAAjB,EAA0B;AACtB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,OAA5B;AACH;AACD;;;;;;;;AAMA,SAASgB,QAAT,CAAkBhB,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;;;;;;;;AAMA,SAASiB,YAAT,CAAsBjB,OAAtB,EAA+B;AAC3B,SAAOgB,QAAQ,CAAChB,OAAD,CAAR,IAAqBA,OAAO,KAAK,EAAxC;AACH;AACD;;;;;;;;AAMA,SAASkB,aAAT,CAAuBlB,OAAvB,EAAgC;AAC5B,SAAOA,OAAO,KAAK,EAAnB;AACH;AACD;;;;;;;;;;AAQA,SAASmB,QAAT,CAAkBnB,OAAlB,EAA2B;AACvB,SAAQD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAArB,IAAiC,CAACoB,KAAK,CAACpB,OAAD,CAA/C;AACH;AACD;;;;;;;;AAMA,SAASqB,SAAT,CAAmBrB,OAAnB,EAA4B;AACxB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,SAA5B;AACH;AACD;;;;;;;;AAMA,SAASsB,QAAT,CAAkBtB,OAAlB,EAA2B;AACvB,SAAOD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA5B;AACH;AACD;;;;;;;;AAMA,SAASuB,MAAT,CAAgBvB,OAAhB,EAAyB;AACrB,SAAQD,OAAO,CAACC,OAAD,CAAP,KAAqB,MAArB,IAA+B,CAACoB,KAAK,CAACpB,OAAD,CAA7C;AACH;AACD;;;;;;;;AAMA,SAASwB,QAAT,CAAkBxB,OAAlB,EAA2B;AACvB,SAAQD,OAAO,CAACC,OAAD,CAAP,KAAqB,QAA7B;AACH;AACD;;;;;;;;AAMA,SAASyB,WAAT,CAAqBzB,OAArB,EAA8B;AAC1B,SAAQqB,SAAS,CAACrB,OAAD,CAAT,IACJO,MAAM,CAACP,OAAD,CADF,IAEJM,WAAW,CAACN,OAAD,CAFP,IAGJmB,QAAQ,CAACnB,OAAD,CAHJ,IAIJgB,QAAQ,CAAChB,OAAD,CAJJ,IAKJwB,QAAQ,CAACxB,OAAD,CALZ;AAMH;AACD;;;;;;;;;;;;;AAWA,SAAS0B,MAAT,CAAgB1B,OAAhB,EAAyB2B,IAAzB,EAA+B;AAC3B,MAAI,EAAEA,IAAI,YAAYC,QAAlB,CAAJ,EAAiC;AAC7B,UAAM,IAAIC,SAAJ,CAAc,yBAAd,CAAN;AACH;;AACD,MAAI,CAACF,IAAI,CAACG,cAAL,CAAoB,WAApB,CAAL,EAAuC;AACnC,UAAM,IAAID,SAAJ,CAAc,qBAAd,CAAN;AACH,GAN0B,CAO3B;;;AACA,MAAIE,IAAI,GAAGJ,IAAI,CAACI,IAAhB;AACA,SAAQhC,OAAO,CAACC,OAAD,CAAP,KAAqB+B,IAAtB,IAA+BC,OAAO,CAAChC,OAAO,IAAKA,OAAO,CAACS,WAAR,KAAwBkB,IAArC,CAA7C;AACH;;AAED,SAAS5B,OAAT,EAAkBO,WAAlB,EAA+BC,MAA/B,EAAuCC,aAAvC,EAAsDG,QAAtD,EAAgEC,WAAhE,EAA6EC,YAA7E,EAA2FC,UAA3F,EAAuGC,OAAvG,EAAgHC,QAAhH,EAA0HC,YAA1H,EAAwIC,aAAxI,EAAuJC,QAAvJ,EAAiKE,SAAjK,EAA4KC,QAA5K,EAAsLC,MAAtL,EAA8LC,QAA9L,EAAwMC,WAAxM,EAAqNC,MAArN","sourcesContent":["/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\r\nfunction getType(payload) {\r\n    return Object.prototype.toString.call(payload).slice(8, -1);\r\n}\r\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isUndefined(payload) {\r\n    return getType(payload) === 'Undefined';\r\n}\r\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\r\nfunction isNull(payload) {\r\n    return getType(payload) === 'Null';\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isPlainObject(payload) {\r\n    if (getType(payload) !== 'Object')\r\n        return false;\r\n    return (payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype);\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isObject(payload) {\r\n    return isPlainObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is {[key: string]: any}}\r\n */\r\nfunction isAnyObject(payload) {\r\n    return getType(payload) === 'Object';\r\n}\r\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\r\nfunction isObjectLike(payload) {\r\n    return isAnyObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a function\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Function}\r\n */\r\nfunction isFunction(payload) {\r\n    return getType(payload) === 'Function';\r\n}\r\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isArray(payload) {\r\n    return getType(payload) === 'Array';\r\n}\r\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isString(payload) {\r\n    return getType(payload) === 'String';\r\n}\r\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isFullString(payload) {\r\n    return isString(payload) && payload !== '';\r\n}\r\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isEmptyString(payload) {\r\n    return payload === '';\r\n}\r\n/**\r\n * Returns whether the payload is a number\r\n *\r\n * This will return false for NaN\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\r\nfunction isNumber(payload) {\r\n    return (getType(payload) === 'Number' && !isNaN(payload));\r\n}\r\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\r\nfunction isBoolean(payload) {\r\n    return getType(payload) === 'Boolean';\r\n}\r\n/**\r\n * Returns whether the payload is a regular expression\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\r\nfunction isRegExp(payload) {\r\n    return getType(payload) === 'RegExp';\r\n}\r\n/**\r\n * Returns whether the payload is a date, and that the date is Valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\r\nfunction isDate(payload) {\r\n    return (getType(payload) === 'Date' && !isNaN(payload));\r\n}\r\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Symbol}\r\n */\r\nfunction isSymbol(payload) {\r\n    return (getType(payload) === 'Symbol');\r\n}\r\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {*}\r\n */\r\nfunction isPrimitive(payload) {\r\n    return (isBoolean(payload) ||\r\n        isNull(payload) ||\r\n        isUndefined(payload) ||\r\n        isNumber(payload) ||\r\n        isString(payload) ||\r\n        isSymbol(payload));\r\n}\r\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\r\nfunction isType(payload, type) {\r\n    if (!(type instanceof Function)) {\r\n        throw new TypeError('Type must be a function');\r\n    }\r\n    if (!type.hasOwnProperty('prototype')) {\r\n        throw new TypeError('Type is not a class');\r\n    }\r\n    // Classes usually have names (as functions usually have names)\r\n    var name = type.name;\r\n    return (getType(payload) === name) || Boolean(payload && (payload.constructor === type));\r\n}\n\nexport { getType, isUndefined, isNull, isPlainObject, isObject, isAnyObject, isObjectLike, isFunction, isArray, isString, isFullString, isEmptyString, isNumber, isBoolean, isRegExp, isDate, isSymbol, isPrimitive, isType };\n"]},"metadata":{},"sourceType":"module"}